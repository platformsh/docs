[
    {
        "title": "Introduction",
        "uri": "en",
        "content": "Introduction Platform sh second generation Platform as a Service built especially continuous deployment  allows host web applications cloud making development testing workflows productive  you re new Platform sh  recommend starting Big Picture  particular Structure  Build   Deploy will started right track best leverage Platform sh  main requirement Platform sh use Git manage application code  project s configuration driven almost entirely small number YAML files Git repository  Configuration section covers detail serve tutorial quick reference  Platform sh supports number different programming Languages environments  features recommended optimizations number Featured Frameworks  Finally  tips setting own Development workflow Administering Platform sh account  Git Driven Infrastructure Platform Service  PaaS  Platform sh automatically manages everything application needs order run  means can  should  view infrastructure needs part application  version control part application  Infrastructure code Platform sh covers not hosting needs DevOps needs  simple  single tool covers application life cycle development production scaling  need write code  including few YAML files specify desired infrastructure  commit Git  push  don t need setup anything manually  web server already setup configured  database  search engine  cache specify  Every branch push fully independent environment mdash complete application code  copy database  copy search index  copy user files  everything mdash and its automatically generated URL sent stakeholders automated CI systems  really  what site look merged production   Every time  use concepts replicate traditional development staging production workflow even give every feature its own effective staging environment merging production  empowering use git flow methodologies even better   intermediary integration branch several branches  Platform sh respects structure branches  It s entirely you  Full stack management Managing full stack internally gives Platform sh unique features  Unified Environment  services  MySQL  ElasticSearch  MongoDB  etc     managed inside cluster included price  no external single points of failure  When back environment  fully consistent snapshot whole application  Multi Services   Multi App  deploy multiple applications  for example  microservice based architecture   using multiple data backends  MySQL  Postgres  Redis etc    written multiple frameworks  Drupal   NodeJS   Flask  example  multiple languages  cluster  Full Cluster Cloning Technology  full production cluster cloned minute mdash including its data mdash to create on the fly  ephemeral development environments byte level copy production  Fail Proof Deployments  Every time test new feature  test deployment process  Continuous Deployment Start  Everything build oriented  consistent  repeatable build process  simplifying process keeping application updated secure",
        "objectID": "en"
    },
    {
        "title": "Administration",
        "uri": "en/administration",
        "content": "",
        "objectID": "en/administration",
        "weight": -60,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Backup and restore",
        "uri": "en/administration/backup-and-restore",
        "content": "Backups Backups triggered directly via management console via CLI  backup creates complete snapshot environment  includes persistent data running services  MySQL  SOLR      files stored mounted volumes  need  admin  role order create backup environment  Backups Platform sh Professional retained least 7 days  will purged 7 days 6 months  Platform sh s discretion  Please data retention page information    note     advise backups live environment merging environment live environment  time increase storage space services  Using CLI    platform backup create Please aware triggering backup will cause momentary pause site availability so requests complete  allowing backup taken against known consistent state  total interruption usually 15 30 seconds requests during time held temporarily  not dropped  Restore will backup activity feed environment Platform sh management console  trigger restore clicking restore link  restore backup different environment using CLI  list existing backups CLI follows    platform backups Finding backups environment master                                                               Created     Complete   Backup name                                                                 2015 06 19 17 11 42   100   2ca4d90639f706283fee     2015 05 28 15 05 42   100   1a1fbcb9943849706ee6     2015 05 21 14 38 40   100   7dbdcdb16f41f9e1c061     2015 05 20 15 29 58   100   4997900d2804d5b2fc39     2015 05 20 13 31 57   100   c1f2c976263bec03a10e     2015 05 19 14 51 18   100   71051a8fe6ef78bca0eb   restore specific backup CLI follows    platform backup restore 2ca4d90639f706283fee even restore backup different branch CLI follows    platform backup restore   target RESTORE_BRANCH 2ca4d90639f706283fee work  it s important act active branch backup taken  Restoring backup develop when working staging branch impossible  Switch acting branch set   target above snippet mentions  no branch already exists  specify parent branch will created restore backup follows    platform backup restore   branch from PARENT_BRANCH 2ca4d90639f706283fee   note     need  admin  role restore environment backup  aware older US EU regions not support restoring backups different environments  project one older regions may file support ticket ask backup restored different environment you  migrate project one new regions supports feature  Backups downtime backup does cause momentary pause service  recommend running during non peak hours site  Automated backups Backups not triggered automatically Platform sh Professional  Backups may triggered calling CLI automated system Jenkins CI service  installing CLI tool application container triggering backup via cron  Automated backups using Cron   note     Automated backups using cron requires API token install CLI application container  ask not schedule backup task once day minimize data usage  Once CLI installed application container API token configured add cron task run once day trigger backup  CLI will read existing environment variables container default project environment running on  cases backups useful master production environment  common cron specification daily backup master environment looks this  crons  backup  spec   0 5        cmd        PLATFORM_BRANCH    master    platform backup create   yes   no wait fi above cron task will run once day 5  UTC   and  current environment master branch  will run platform backup create current project environment    yes flag will skip user interaction    no wait flag will cause command complete immediately rather waiting backup complete    note     important include   no wait flag  not  cron process will block will unable deploy new versions site until backup creation process complete  Retention Please Data Retention Page",
        "objectID": "en/administration/backup-and-restore",
        "weight": 2,
        "toc": true
    },
    {
        "title": "Integrations",
        "uri": "en/administration/integrations",
        "content": "note     aware project administrator  someone admin level access project  add remove integrations  User administration details  Listing active integrations CLI  list active integrations  platform integrations   note     created account using Bitbucket GitHub oAuth Login  order use Platform sh CLI will need set password visiting https   accounts platform sh user password  Validating integrations Once integration configured  validate functioning properly command    platform integration validate  p Enter number choose integration   0  5jutqdj2tvkde  health slack   1  a6555jyqp4gl2  github    1 Validating integration a6555jyqp4gl2  type  github     integration valid    note      p flag unnecessary above command executed local repository Platform sh project remote set",
        "objectID": "en/administration/integrations",
        "weight": 3,
        "layout": "single",
        "toc": true,
        "sidebarTitle": "External integrations",
        "description": "Platform.sh can easily be integrated with external services.<br><br>\n\nWe support native integrations with multiple services, first and foremost Git hosting services such as GitHub, GitLab, or Bitbucket.  You can continue to use those tools for your development workflow, and have Platform.sh environments created automatically for your pull requests and branches.<br><br>\n\nYou can also easily add our native integrations with performance monitoring tools such as Blackfire, New Relic, or Tideways, as well as setting up health notifications.  Or create your own integration using our webhooks.\n"
    },
    {
        "title": "Bitbucket",
        "uri": "en/administration/integrations/bitbucket",
        "content": "two options setting Bitbucket integrations Platform sh  Using Platform sh add on Setting OAuth consumer manually Platform sh Bitbucket add on Bitbucket add on allows manage Platform sh environments directly Bitbucket repository  Supported  Create new environment when creating branch opening pull request Bitbucket  Rebuild environment when pushing new code Bitbucket  Delete environment when merging pull request  Install add on Bitbucket account  click avatar select App Marketplace  Filter list available add ons  Deployment  category  Add add on titled  Platform sh PHP PaaS  grant its access account    note       Bitbucket Integration connected Platform sh account owner      Platform sh recommends install add on team level  select  Manage Team  instead  so every repository belongs team use add on      created account using bitbucket oAuth Login order use Platform CLI will need setup password visiting page https   accounts platform sh user password Setup integration connect Bitbucket repository Platform sh  go repository page administrator click Settings icon  click Platform sh integration PLATFORM SH section  add on will give two options when grant Platform sh access repository  Create new project  will allow choose region create project repository  Connect existing project  bottom page   will allow connect repository pre initialized empty project Platform sh  Setting OAuth consumer Platform sh add on does not configure integration automatically  so manually creating OAuth consumer account  Bitbucket Go user account click  Settings    ACCESS MANAGEMENT  click OAuth  bottom page  OAuth consumers   click  Add consumer  button  Fill information consumer  order OAuth2 work correctly  it s recommended include  Name  Give consumer recognizable name  Platform sh consumer Platform sh integration  Callback URL  URL users will redirected access authorization  sufficient set value http   localhost  Permissions  Sets integration permissions Platform sh  permissions will create webhooks will enable Platform sh mirror actions Bitbucket repository  Account   Email  Read Repositories   Read  Write Pull requests   Read Webhooks   Read write completed form  Save consumer  saved  will Platform sh consumer listed  OAuth consumers  section  open item  will expose two variables will need complete integration using Platform sh CLI  Key Secret  Local Install Platform sh CLI not already done so  Retrieve PROJECT_ID existing project platform project list create new project platform project create  run integration command  platform integration add   type bitbucket   project   key   secret   repository   PLATFORMSHPROJECTID project ID Platform sh project  CONSUMER_KEY Key variable consumer created  CONSUMER_SECRET Secret variable consumer created  USER REEPOSITORY location repository  Optional parameters    fetch branches  Track deploy branches  true default    prune branches  Delete branches not exist remote Bitbucket repository  true default    build pull requests  Track deploy pull requests  true default    build pull requests post merge  false Platform sh build branch specified PR  true build result merging PR   false default    pull requests clone parent data  Set false disable cloning parent environment data when creating PR environment  so PR environment starts no data   true default  Validate integration cases  verify integration functioning properly using CLI command   platform integration validate Optional parameters default several parameters will set Bitbucket integration  changed using platform integration update command    fetch branches  Track deploy branches   prune branches  Delete branches not exist remote Bitbucket repository   build pull requests  Track deploy pull requests   resync pull requests  Re sync pull request environment data every build information see  platform help integration update Note   prune branches option depends   fetch branches enabled    fetch branches disabled    prune branches will automatically set false  even specifically set true",
        "objectID": "en/administration/integrations/bitbucket",
        "weight": 1,
        "toc": true
    },
    {
        "title": "Blackfire",
        "uri": "en/administration/integrations/blackfire",
        "content": "Version Check latest versions probe CLI tool Blackfire s documentation  Grid plan 1  credentials Sign free 15 days Premium trial blackfire io install Blackfire Companion web browser extension  Chrome Firefox     note     Blackfire offers perpetually free edition local development will not run Platform sh  Go Dashboard create new environment Environments tab  will need store server credentials further configuration  find time  Settings  tab environment Blackfire  2  Enable Blackfire extension Configure extension  platform app yaml follows  runtime  extensions  blackfire Push changes Platform environment enable Blackfire follows  git add  platform app yaml git commit  m  Enable Blackfire   git push 3  Configure server credentials Blackfire enables fine grained configuration server credentials across branches environments Platform sh  Configuring global server credentials Configuring server credentials master branch will enable sure profile branch  platform variable create  e master env BLACKFIRESERVERID   value platform variable create  e master env BLACKFIRESERVERTOKEN   value Configuring server credentials per branch recommendation Blackfire environment production  one staging  one development integration  mapped Platform sh one Blackfire environment production branch  one staging branch  one feature branches  platform variable create  e  env BLACKFIRESERVERID platform variable create  e  env BLACKFIRESERVERTOKEN 4  Confirm it s running Login via SSH container confirm Blackfire running follows  php   ri blackfire blackfire blackfire    enabled blackfire    1 16 1 Timing measurement    gtod Num CPU    8     Dedicated cluster Sign free 15 days Premium trial blackfire io install Blackfire Companion web browser extension  Chrome Firefox   open support ticket Backfire server ID token  client ID token optional  support team will install you  Note  Blackfire integration works profiling cluster via URL origin  not profile site going CDN  Profiling web requests Access site via browser click Profile Blackfire Companion  That s it  site will profiled results Blackfire account  Profiling CLI commands profile PHP CLI scripts  use following command line  blackfire   config  etc platform  USER blackfire ini Going further Blackfire Blackfire enables to  collaborate rest team write performance tests automate profiling periodic builds integrate further Platform sh enabling automate profiling code commit integrate New Relic combined benefits monitoring profiling integrate GitHub  Bitbucket GitLab show results Blackfire builds commit status level Check Blackfire s documentation information    note     features may require Premium Enterprise subscription    offer attractive bundles Platform sh Blackfire io subscriptions    Please contact sales department discuss help you  Troubleshooting Bypassing Reverse Proxy  Cache  Content Delivery Networks  CDN  using one those  will need let Blackfire access servers  information configure bypass  HTTP Cache configuration using HTTP cache cookies   please update  platform app yaml cookies allowed go cache  need allow __blackfire cookie name  Something like  cache  enabled  true cookies     SESS       __blackfire   Reaching Blackfire support above didn t help  collect following send Blackfire support  output platform ssh    php  d displaystartuperrors on   ri blackfire command Blackfire logs Getting Blackfire logs Please execute following environment you re facing issue  platform variable create php blackfire log_file   value  tmp blackfire log platform variable create php blackfire log_level   value 4 start profile build again will logs platform ssh    cat  tmp blackfire log   blackfire log  Disabling Blackfire logs Once done  please disable logging with  platform variable delete php blackfire log_file platform variable delete php blackfire log_level",
        "objectID": "en/administration/integrations/blackfire",
        "weight": 2,
        "toc": true,
        "description": "Platform.sh supports <a href=\"https://blackfire.io/\">Blackfire.io</a>.<br><br>\n\nBlackfire is a PHP profiler and automated performance testing tool that can be used in the development Integration, Staging, and Production environments.\n\nIt grants details information on your PHP code's resources consumption across Wall-Time, CPU, I/O, Memory, Network Calls, HTTP requests and SQL queries.\n\nIn addition, it can profile your code automatically and notify you whenever your code does not comply with best practices for PHP, Symfony, Drupal, eZPlatform, Typo3 & Magento code performance management.<br><br>\n\nFor a high level overview and demo of Blackfire, check out the <a href=\"https://www.youtube.com/watch?v=-5icUW9pUH8\">full video tutorial</a>.\n"
    },
    {
        "title": "GitHub",
        "uri": "en/administration/integrations/github",
        "content": "Features supported        Create new environment when creating branch opening pull request GitHub      Rebuild environment when pushing new code GitHub      Delete environment when merging pull request  Setup 1  Generate token integrate Platform sh project existing GitHub repository  first need generate token GitHub user profile  Simply go Settings  select Developer settings click Personal access tokens  Generate new token  Give description ensure token following scopes  integrate public repositories  public_repo integrate own private repositories  repo integrate organization s private repositories  repo read org Copy token note  temporarily   Note integration work  GitHub user needs permission push code repository  2  Enable integration Note project owner manage integrations  Open terminal window  you need Platform sh CLI installed   Enable GitHub integration follows  platform integration add   type github   project PLATFORMSHPROJECTID   token GITHUB USER TOKEN   repository USER REPOSITORY PLATFORMSHPROJECTID project ID Platform sh project GITHUB USER TOKEN token generated step 1 USER github user name REPOSITORY name repository github  not git address  Note repository belongs organization  use    repository ORGANIZATION REPOSITORY   e g  platform integration add   type github   project abcde12345   token xxx   repository platformsh platformsh docs Optional parameters    fetch branches  Track deploy branches  true default    prune branches  Delete branches not exist remote GitHub repository  true default    build pull requests  Track deploy pull requests  true default    build pull requests post merge  false Platform sh build branch specified PR  true build result merging PR   false default    pull requests clone parent data  Set false disable cloning parent environment data when creating PR environment  so PR environment starts no data   true default  CLI will create necessary webhook when there s correct permission set given token  Note   prune branches option depends   fetch branches enabled    fetch branches disabled    prune branches will automatically set false  even specifically set true  3  Add webhook message Failed read write webhooks  will need add webhook manually  Copy hook URL shown message  Go GitHub repository click Settings  select Webhooks Services tab  click Add webhook  Paste hook URL  choose application json content type  choose  Send everything  events want receive  click Add webhook  start pushing code  creating new branches opening pull requests directly GitHub repository  Note created account using GitHub oAuth Login order use Platform CLI  will need setup password  4  Validate integration verify integration functioning properly using CLI command   platform integration validate Types environments Environments based GitHub pull requests will correct  parent  environment Platform sh  will activated automatically copy parent s data  However  environments based  non pull request  branches cannot parents  will inherit directly master start inactive default",
        "objectID": "en/administration/integrations/github",
        "weight": 5,
        "toc": true,
        "description": "The <a href=\"https://github.com\">GitHub</a>integration allows you to manage your Platform.sh environments directly from your GitHub repository.\n"
    },
    {
        "title": "GitLab",
        "uri": "en/administration/integrations/gitlab",
        "content": "Features supported        Create new environment when creating branch opening pull request GitLab      Rebuild environment when pushing new code GitLab      Delete environment when merging pull request  Setup 1  Generate token integrate Platform sh project existing GitLab repository  first need generate token GitLab user profile  Simply go Settings page GitLab click Access Tokens  Fill Name field example  Platform sh Integration  optionally set expiration time  Give description ensure token following scopes  api   Access API read_user   Read user information read_repository   Read repositories Copy token note  temporarily   Note integration work  GitLab user needs permission push code repository  2  Enable integration Note project owner project admin manage integrations  Open terminal window  you need Platform sh CLI installed   Enable GitLab integration follows  platform integration add   type gitlab   token GITLAB ACCESS TOKEN   base url https   THE URL OF YOUR GITLAB   server project MY NAMESPACE MY PROJECTNAME   project PLATFORMSHPROJECTID PLATFORMSHPROJECTID project ID Platform sh project GITLAB ACCESS TOKEN token generated step 1   base url used base call Gitlab API  point https   gitlab com project hosted Gitlab  URL own Gitlab instance otherwise  not include namespace project name  MY NAMESPACE MY PROJECTNAME describes namespace GitLab project  not including base url  example  repository located https   gitlab com sandbox my_application  integration command platform integration add   type gitlab   token GITLAB ACCESS TOKEN   base url https   gitlab com   server project sandbox myapplication   project PLATFORMSHPROJECT_ID Optional parameters    build merge requests  Track deploy merge requests  true default    merge requests clone parent data   merge requests clone data parent environment  true default    fetch branches  Track deploy branches  true default    prune branches  Delete branches not exist remote GitLab repository  true default  Note   prune branches option depends   fetch branches enabled    fetch branches disabled    prune branches will automatically set false  even specifically set true  3  Add webhook previous command  successful output configuration integration  last element look like    hookurl   https    region  platform sh api projects  projectid  integrations  hookid  hook   CLI will create necessary webhook using above URL when there s correct permission set given token  message Failed read write webhooks  will need add webhook manually  Copy hook URL shown message  Go GitLab repository click Settings   Integrations  Paste hook URL  Triggers section choose Push events  Tag push events Merge Request events  Click Add webhook  start pushing code  creating new branches opening merge requests directly GitLab repository  will environments automatically created updated Platform sh side  4  Validate integration verify integration functioning properly using CLI command   platform integration validate Types environments Environments based GitLab merge requests will correct  parent  environment Platform sh  will activated automatically copy parent s data  unless set option merge requests clone parent data false   However  environments based  non merge request  branches cannot parents  will inherit directly master start inactive default",
        "objectID": "en/administration/integrations/gitlab",
        "weight": 6,
        "toc": true,
        "description": "The <a href=\"https://gitlab.com\">GitLab</a> integration allows you to manage your Platform.sh environments directly from your GitLab repository.\n"
    },
    {
        "title": "HipChat",
        "uri": "en/administration/integrations/hipchat",
        "content": "Setup 1  Find HipChat ROOM ID  HipChat web administrative UI  go Admin   Rooms click room link notifications  Note down  APP ID  listed Room Details Room s  Summary  page  you find ID URL   2  Generate room specific HIPCHAT TOKEN  Click Room s  Tokens  page sidebar  Create New Token section specify  PlatformSH  token s label click  Create  button  Note down Token value  3  Create HipChat webhook Platform CLI    platform integration add   type hipchat   room ROOM ID   token HIPCHAT TOKEN number optional parameters who s default values include    events    All Events    environments    All Environments    excluded environments   Empty    states complete  Complete state only  You re given chance customize parameters interactive shell prompt  may override defaults command line    states pending in_progress complete  All states  Validate integration verify integration functioning properly using CLI command   platform integration validate",
        "objectID": "en/administration/integrations/hipchat",
        "weight": 7,
        "toc": true,
        "description": "The <a href=\"https://hipchat.com\">HipChat</a> integration allows you to send notifications about your Platform.sh activity directly to HipChat.\n"
    },
    {
        "title": "New Relic",
        "uri": "en/administration/integrations/new-relic",
        "content": "Grid plan 1  license key Sign https   newrelic com license key  2  Add license key Add New Relic license key project level variable  platform variable create   visible build false php newrelic license   value    3  Enable New Relic extension Enable New Relic extension  platform app yaml follows  runtime  extensions  newrelic Push changes Platform sh environment enable New Relic follows  git add  platform app yaml git commit  m  Enable New Relic   git push That s it  need wait little bit New Relic dashboard generated  Dedicated cluster Sign https   newrelic com license key  open support ticket let us know key is  support team will install let know when complete  Troubleshoot Additionally  check application properly connected New Relic looking  var log app log file  platform log app 2017 04 19 14 00 16 706450  93  Info  Reporting to  https   rpm newrelic com accounts xxx applications xxx 2017 04 19 14 00 16 706668  93  Info  app  xxx master xxx app  connected run id  xxx",
        "objectID": "en/administration/integrations/new-relic",
        "weight": 4,
        "toc": true,
        "description": "Platform.sh supports <a href=\"https://newrelic.com/products/application-monitoring\">New Relic APM</a>.\n"
    },
    {
        "title": "Health notifications",
        "uri": "en/administration/integrations/notifications",
        "content": "note     Remember admin access project order add modify integration  User administration details  Available notifications Low disk warning notifications configured  Platform sh will monitor disk space usage applications services cluster  when available disk space drops below 20   warning notification generated  when available disk space drops below 10   critical notification generated  when available disk space goes back above 20  previously having lower  all clear notification generated  Notifications generated every 5 minutes  so may brief delay when threshold crossed when notification triggered  Configuring notifications Health notifications set via Platform sh CLI  number different channels  Email notifications notification trigger email sent  address choosing one addresses choosing  so  register health email integration follows  platform integration add   type health email   from address you example com   recipients them example com   recipients others example com from address whatever address want email appear from  specify one recipients  its own switch  completely fine use address from address recipients  Slack notifications notification trigger message sent Slack bot  First  create new custom  bot user  Slack group configure channels wish live in  Note API token  Bot User OAuth Access Token  provided Slack  register Slack bot Platform sh using health slack integration  platform integration add   type health slack   token YOURAPITOKEN   channel   channelname  will trigger corresponding bot post notification  channelname channel Slack group  PagerDuty notifications notification trigger message sent via PagerDuty  using service  First  create new PagerDuty  integration  uses Events API v2  Copy  Integration Key  known  routing key  integration  register health pagerduty integration follows  platform integration add   type health pagerduty   routing key YOURROUTINGKEY notification will trigger alert PagerDuty  Webhooks notifications notification trigger message sent web endpoint  so  register health webhook integration follows  platform integration add   type health webhook   url A URL THAT CAN RECEIVE THE POSTED JSON notification will posted health webhook URL  order let verify requests coming integration  use optional shared key parameter will add X JWS Signature request header containing JSON Web Token Signature JWS Compact Serialization Unencoded Detached Payload  RFC7797   platform integration add   type health webhook   url A URL THAT CAN RECEIVE THE POSTED JSON   shared key JWS SYMMETRIC KEY signature calculated using given shared key fixed header    alg   HS256   b64  false  crit    b64    simplified example payload corresponding signature look following snippet  POST  health notifications HTTP 1 0 Host  www example com Content Length  1495 Content Type  application json X JWS Signature  eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19  fYW9qrjShmEArV17Z1kH6yudoXzpBE3PzJXq_OqrIfM     request body     Signature verification simple 2 step process  1  Compute JWS Compact Serialization Unencoded Detached Payload jwcrypto import jws  jwk rfc7797uheader      alg   HS256   b64  false  crit    b64     jsonwebkey   jwk JWK kty  oct   k  JWS SYMMETRIC KEY   sig   jws JWS request body    sig addsignature jsonwebkey  protected rfc7797u_header  sig detach_payload   2  Verify signature assert sig serialize compact True     request headers  X JWS Signature   Please refer JOSE Cookbook examples protecting content using JavaScript Object Signing Encryption  JOSE   Validate integration verify integration functioning properly using CLI command   platform integration validate",
        "objectID": "en/administration/integrations/notifications",
        "weight": 3,
        "toc": true,
        "description": "Platform.sh can notify you when various events happen on your project, in any environment. At this time the only notification provided is a low disk space warning, but others may be added in the future.\n"
    },
    {
        "title": "Tideways",
        "uri": "en/administration/integrations/tideways",
        "content": "note     upstream maintains two versions Tideways  plugins available Platform sh      tideways_xhprof  open source version  therefore no licensing required  On downside  less integration services available   use combination xhprof UI      tideways  bundle proprietary full version product plugins  rest guide mostly aimed cover  Started 1  license key Sign https   tideways com license key  2  Add license key Add Tideways license key project level variable  platform variable create   visible build false php tideways api_key   value    3  Enable Tideways extension Enable Tideways extension  platform app yaml follows  runtime  extensions  tideways Enabling extension will activate Tideways background process  Push changes Platform sh environment enable Tideways follows  git add  platform app yaml git commit  m  Enable Tideways   git push Tideways enabled  Give few hours day decent set data checking Tideways dashboard  Deployment Integration Tideways integrates Platform sh deployment hooks provides performance comparisons deployments released  find Platform sh CLI command register hook application Tideways  Application Settings  screen section  Exports   Integrations   example  platform integration add   type webhook   url  https   app tideways io api events external 1234 abcdefghijklmnopqrstuvwxyz1234567890",
        "objectID": "en/administration/integrations/tideways",
        "weight": 8,
        "toc": true,
        "description": "Platform.sh supports <a href=\"https://tideways.com/\">Tideways APM</a> for PHP.  This functionality is only available on PHP 7.0 and later.\n"
    },
    {
        "title": "Generic Webhook",
        "uri": "en/administration/integrations/webhooks",
        "content": "Setup   platform integration add   type webhook   url A URL THAT CAN RECEIVE THE POSTED JSON webhook URL will receive POST message every  Activity  triggered  message will contain complete information entire state project time  practice message ignored available needed  commonly used values documented below  It s possible set integration send certain activity types  activities certain branches  CLI will prompt specify include exclude  Leave default values events environments project  Webhook schema id unique opaque value identify activity  project Project ID activity triggered  Use value want multiple projects POST URL  type type property specifies event happened  Its value one of  project modify title  human friendly title project changed  project create  project created  Although will appear activity feed exactly once  will not sent via webhook will always happen webhook configured  project domain create  new domain added project  project domain delete  domain associated project removed  project domain update  domain associated project updated  including modifying it s SSL certificate  environment access add  new user given access environment  environment access remove  user removed environment  environment backup  user triggered backup environment restore  user restored backup environment push  user pushed code branch  either existing new  environment branch  new branch created via management console   A branch created via push will show environment push   environment activate  branch  activated   environment created it  environment initialize  master branch project just initialized its first commit  environment deactivate  branch  deactivated   code environment destroyed  environment synchronize  environment its data and or code re copied its parent environment  environment merge  branch merged management console Platform sh API  basic Git merge will not trigger event  environment delete  branch deleted  environment route create  new route created management console  will not fire route edits made routes yaml file directly  environment route delete  route deleted management console  will not fire route edits made routes yaml file directly  environment route update  route modified management console  will not fire route edits made routes yaml file directly  environment variable create  new variable created  environment variable delete  variable deleted  environment variable update  variable modified  environment update http_access  HTTP access rules environment modified  environment update smtp  Sending emails enabled disabled environment  environment update restrict_robots  block all robots feature enabled disabled  environment subscription update  master environment resized subscription changed  no content changes  environments array listing environments involved activity  usually single value  result Whether activity completed successfully not  success went planned  createdat  startedat  completed_at values timestamps UTC  need point time when action happened  use completedat  combine startedat long activity took  log text description action happened  human friendly string may displayed user not parsed data its structure not guaranteed  payload environment block contains information environment itself  action taken place  notable properties key name  the name branch  machine_name  the name environment  head_commit  the Git commit ID triggered event  payload user Platform sh user triggered activity  deployment large block details information services environment  includes resulting configuration objects derived routes yaml  services yaml   platform app yaml  notably  deployment routes object s keys URLs made available environment  Note will redirects  find live URLs filter objects whose type property upstream  Example webhook payload following example webhook message  Specifically  one created  push  event     id    774 this is an example valuexzs4no    _links      self      href    https   eu platform sh api projects sx this is an example value hu activities 774 this is an example valuexzs4no    meta      get      responses      default      schema      properties      created_at      type    string    format    date time      updated_at      type    string    format    date time      type      type    string      parameters      properties         required           project      type    string      environments      items      type    string      type    array      state      type    string      result      type    string      started_at      type    string    format    date time      completed_at      type    string    format    date time      completion_percent      type    integer      log      type    string      payload      properties         required             required      created_at    updated_at    type    parameters    project    environments    state    result    started_at    completed_at    completion_percent    log    payload            parameters                 created_at    2017 12 07T10 45 30 870660 00 00    updated_at    2017 12 07T10 47 39 369761 00 00    type    environment push    parameters  ",
        "objectID": "en/administration/integrations/webhooks",
        "weight": 9,
        "toc": true,
        "sidebarTitle": "Webhooks",
        "description": "This hook allows you to capture any push events on platform and POST a JSON message describing the activity to the url of your choice. You can use this to further automate your Platform.sh workflow.\n"
    },
    {
        "title": "User administration",
        "uri": "en/administration/users",
        "content": "User roles Every Platform sh user role controls access improves security project  Different roles authorized different things applications  environments users  use collection Roles manage users interact Platform sh  project level  Project Administrator   project administrator change settings execute actions environment  Project Viewer   project reader view environments within project cannot execute actions them  Project Reader specific role different environments  environment level  Environment Administrator   environment administrator change settings execute actions environment  Environment Contributor   environment contributor push code environment branch environment  Environment Viewer   environment reader view environment    Important      new user added environment  needs rebuilt  Rebuilds triggered when push new commit environment question  able rebuild without new code changes issue command git commit   allow empty  m rebuild     git push create empty commit  force  rebuilding environment      When environment rebuild complete  allow minute routes update fully new user able use SSH access  When development team works project  team leader project administrator decide roles give team members  One team member contribute one environment  member administer different environment customer reader master environment  want users able everything  Reader   commit specific branch  change permission level environment  Contributor     SSH Access Control     environment contributor push code environment SSH access environment  change specifying user types SSH access    note     project owner   person licensed use Platform sh   doesn t special powers  project owner usually project administrator role  Manage user permissions project level list projects  select project want view edit user permissions  point  will not selected particular environment  Click Settings tab top page  click Access tab left show project level users roles  Access tab shows project level users roles  Selecting user will allow either edit user s permissions delete user s access project entirely  Add new user clicking Add button  select  Viewer  role user  you ll option adjusting user s permissions environment level  view  assign user s access  Selecting become  Project admin  will give  Admin  access every environment project  Alternatively  give user  Admin    Viewer    Contributor    No Access  environment separately  select  Viewer  role user  you ll option adjusting user s permissions environment level  Once done  user does not Platform sh account  will receive email asking confirm details register account name password  order push pull code  or SSH one project s environments  user will need add SSH key  user already account  will receive email link project  Manage user permissions environment level within project select environment ENVIRONMENT pull down menu  Click Settings tab top screen click Access tab left hand side  Access tab shows environment level users roles  Selecting user will allow either edit user s permissions delete user s access environment entirely  Add new user clicking Add button    note     Remember user will able access environment once rebuilt  after git push  Manage users CLI user Platform sh command line client fully manage users integrate automated system  Available commands  user add Add user project user delete Delete user user list  users  List project users user role View change user s role example  following command add  admin  role alice example com current project  platform user add will present interactive wizard will allow choose precisely rights want give new user    platform user add Email address  alice example com user s project role  viewer    v    admin    a    Project role  V a   user s environment level roles  viewer    contributor    admin   development environment role  V c a   sprint1 environment role  V c a   hot fix environment role  V c a   master environment role  V c a   pr 2 environment role  V c a   pr 3 environment role  V c a   Summary  Email address  alice example com Project role  viewer development  viewer sprint1  viewer hot fix  viewer pr 2  viewer pr 3  viewer Adding users result additional charges  sure want add user   Y n  User alice example com created Once done  user will receive email asking confirm details register account name password  give Alice  contributor  role environment  development   run  platform user role alice example com   level environment   environment development   role contributor Use platform list full list commands  Transfer ownership want transfer ownership project different user  first invite user project administrator submit support ticket current project owner ask transfer  action will automatically transfer subscription charges new owner",
        "objectID": "en/administration/users",
        "weight": 1,
        "sidebarTitle": "Users",
        "toc": true
    },
    {
        "title": "Management console",
        "uri": "en/administration/web",
        "content": "Everything management console achieve CLI  Command Line Interface     note     Platform sh recently launched new web management console  documentation refers new console  access legacy user interface select user drop down top right click Legacy  Console mode  option  Documentation legacy interface available until fully retired  Environment List project s main page  environments available pull down menu ENVIRONMENT top page  graphic view environments right hand side  view environments list project tree  name environment struck it s disabled  arrow next it  means environment children  Environments Once select environment  management console give great deal information it  Activity Feed management console displays activity happening environments  filter messages per type  Header Within project s environment  management console exposes 4 main actions 4 drop down command options use interface environments  Branch Branching environment means creating new branch Git repository  exact copy environment  new branch includes code  data stored disk  database  Solr indexes  uploaded files  etc    new copy running services  and configuration  application needs  means when branch environment  branch complete infrastructure  During branch  three things happen  new branch created Git  application rebuilt new branch  necessary  new branch deployed  clicking Branch dialog box will appear will provide commands execute future merges command line using Platform sh CLI  Merge Merging environment means introducing code changes branch its parent branch redeploying parent  During merge  code changes merged via Git parent branch  application rebuilt parent branch  necessary  parent branch deployed  Rebuilding application not necessary code already built  for environment   case will message Slug already built tree id  skipping  clicking Merge dialog box will appear will provide commands execute future merges command line using Platform sh CLI  Sync Synchronization performs merge parent child environment  redeploys environment  option performing Sync code  replacing data  i e  databases  environment its parent  both  options provided separate dialog box will appear when click Sync button  along Platform sh CLI commands perform action  aware sync uses Backup mechanism will caveats  Note Sync available branch no unmerged commits  fast forwarded  good practice backup environment performing synchronization  Backup Creating backup environment means saving copy database so restored  will backup activity feed environment Platform sh management console trigger restore clicking restore link  clicking Backup dialog box will appear will provide commands execute future merges command line using Platform sh CLI  use CLI with    platform environment backup create backup    platform environment restore restore existing backup  URLs URLs pull down exposes domains used access application environments web  GIT Git pull down displays commands use clone codebase via Git  CLI CLI pull down displays commands project set locally Platform sh CLI  SSH SSH pull down display commands access project SSH  Configuration settings management console view information routes  services  applications currently configured environment  top page  click  Services  tab  Applications Select application container left show detailed information right   Overview  tab gives metadata information regarding application  tells size container configured for  amount persistent disk  number active workers cron jobs  command ssh container  cron job associated application listed its frequency  last time run  it s status  its command   Configuration  tab provides overview application s configuration pulled its  platform app yaml file  Services service tab left  so select one interested in  overview tab gives metadata information regarding service  tells size container configured amount persistent disk given services yaml file   Configuration  tab provides overview service configuration pulled services yaml file  Routes route will appear when select Routes tab left describe its type whether caching SSI enabled it",
        "objectID": "en/administration/web",
        "weight": 4,
        "layout": "single",
        "toc": true,
        "description": "Platform.sh provides a responsive management console which allows you to interact with your projects and manage your environments."
    },
    {
        "title": "Environment configuration",
        "uri": "en/administration/web/configure-environment",
        "content": "General General screen allows extend behavior specific environment  Environment name first setting allows modify name environment view its parent environment  Status Status tab  activate deactivate environment  Deactivate   Delete Data action will Deactivate environment  Unless re activated  will no longer deploy will not accessible web via SSH  Destroy services running environment  Delete data specific environment  environment reactivated  will sync data its parent environment  Once environment deactivated  Git branch will remain Platform sh inactive environment  delete branch well  need execute following  git push origin  BRANCH NAME   note     Deleting Master environment forbidden  Outgoing emails tab  allow application send emails via SendGrid SMTP proxy  Changing setting will temporarily list environment s status  Building   project re builds new setting  Once re deployed  will appear once again  Active  settings  Search engine visibility tab  tell search engines ignore site entirely  even publicly visible  X Robots Tag default  Platform sh includes additional X Robots Tag header non production environments  X Robots Tag  noindex  nofollow tells search engines not index sites non production environments entirely nor traverse links sites  even publicly visible  keeps non production sites search engine indexes dilute SEO production site  disable feature non production environment  use Platform sh CLI command below  platform environment info restrict_robots false disable specific environment one currently checked out  execute following  platform environment info  e ENVNAME restrict_robots false ENVNAME name environment  production instance  the master branch  domain assigned  search blocker disabled application serve robots txt file normal  However  ensure file project s web root  the directory   location maps to  application configured serve it  location section  platform app yaml  HTTP access control not expose development environments whole wide world  Platform sh allows simply implement access control  either login password  the equivalent  htaccess  filtering IP addresses network using CIDR format  is  4 5 6 7 4 5 6 0 8 legal formats    note     Changing access control will trigger new deploy current environment  However  changes will not propagate child environments until manually redeployed  settings inherited branches below one on  means create staging environment  create branches one  will inherit authentication information set it once  setup authentication CLI using following command platform environment http access allows read current setup  eases integration CI jobs Platform sh will not need hardcode values CI  allow deny access specific IPs IP ranges  First switch access control section ON  add one IPs CIDR IP masks  followed allow deny  example below  Note allow entries deny entries case match  example  following configuration will allow 1 2 3 4 IP access website  1 2 3 4 32 allow 0 0 0 0 0 deny Access Access screen allows manage users  access project  invite new users specific environment clicking Add button entering email address  modify permissions existing users clicking Edit link when hovering user    note     Currently  permission changes grant revoke SSH access environment effect next time environment deployed  Selecting user will allow either edit remove access environment  manage access users multiple environments using project configuration screen  Variables Variables screen allows define variables will available specific environment  Routes Routes screen describes configuration features define routes application  Routes cannot edited here  provides simple routes configuration example project s  platform routes yaml file  Consult documentation information properly configuring Routes project",
        "objectID": "en/administration/web/configure-environment",
        "weight": 3,
        "toc": true,
        "sidebarTitle": "Configure environments",
        "description": "You can access an environment's settings by selecting that environment from the <b>Select Environments</b> pull-down menu at the top of the page or by clicking that environment within the Environments graphic on the right side. Click the `Settings` tab at the top of the screen.\n"
    },
    {
        "title": "Project configuration",
        "uri": "en/administration/web/configure-project",
        "content": "General first page project settings  General  update project name  navigate project settings options left side screen  Access Access screen allows manage users  access project  invite new users project clicking Add button entering email address  modify permissions existing users clicking Edit link when hovering user    note     Currently  permissions changes grant revoke SSH access environment effect next time environment deployed  Selecting user will allow either edit user s permissions delete user s access project entirely  check Project admin box  user will administrator project will fulll access environments  uncheck box  you ll option adjusting user s permissions environment    note     Account owner locked can t change its permissions  Domains Domains screen allows manage domains project will accessible at  information setup domain    note     Platform sh expects ASCII representation domain here  case want use internationalized domain name use conversion tool provided Verisign convert IDN domain ASCII  Certificates Certificates screen allows manage project s TLS certificates enable HTTPS  view current certificates hovering one list clicking View link appears  add new certificate clicking Add button top page  projects TLS certificates provided Let s Encrypt automatically  cases no user action required  will need add certificates page using TLS certificates provided third party  Deploy Key Deploy Key page provides SSH key Platform sh will use when trying access external private Git repository during build process  useful want reuse code components across multiple projects manage components dependencies project  Variables Variables screen allows define variables will available project wide   is  environment  allows define variables will available during build process",
        "objectID": "en/administration/web/configure-project",
        "weight": 1,
        "toc": true,
        "description": "You can access the project-wide configuration settings by selecting the project from your list of projects, then click the `Settings` tab at the top of the screen."
    },
    {
        "title": "Delete a project",
        "uri": "en/administration/web/delete",
        "content": "delete Platform sh project  including data  code  active environments  Go Account Settings  logging necessary  via link top right corner docs  via link  https   accounts platform sh user  Locate project wish delete project list  Hover gear icon project select  Delete   Confirm intent delete project  will billed portion month during project active  delete project part month cost project will prorated accordingly  user account no projects associated will no charges",
        "objectID": "en/administration/web/delete",
        "weight": 5,
        "sidebarTitle": "Deleting a project"
    },
    {
        "title": "Platform.sh Environments",
        "uri": "en/administration/web/environments",
        "content": "Master environment Every Platform sh project starts Master environment corresponds Master branch Git  subscribed production plan  environment live site mapped domain name custom SSL certificate    note     project master branch  will not function properly without one  Hierarchy Platform sh brings concept hierarchy environments  new environment create considered child parent environment branched  child environment sync code and or data down its parent  merge code its parent  used development  staging  testing  When create branch child environment Platform sh management console branch made will treated parent  create branch local Git checkout push Platform sh  synchronize branch 3rd party GitHub Bitbucket  its parent will default master branch  environment s parent changed using Platform sh CLI following command  platform environment info parent NEW_PARENT case  current environment  the branch you re on  will set NEW_PARENT its parent environment  environment reparent set explicitly  e option  platform environment info  e feature x parent NEW_PARENT Workflows organize environments want  complete flexibility create own workflows  no rules follow when branching master environment  simply need structure best fits workflow  Agile  child environment per sprint  story sprint its own environment child sprint environment  Developer centric  one QA environment few development environments  per developer  per task      Testing  operational test environment  user test environment few unit test environments  Hotfix  one environment every bug  security  hotfix needs deployment  example possible Agile workflow  administrator creates Sprint environment gives developers permission create new feature environments  approach administrator create environment developer  feature completed  administrator review work accessing website feature environment  new feature merged back Sprint environment  remaining features will sync Sprint environment ensure working environment up to date latest code  When objectives sprint complete  administrator backup live site  merge Sprint environment live  Master  environment  administrator synchronize next sprint s environment data live  Master  environment repeat continue development process  Naming conventions Platform sh provides great flexibility organize work development environments  improve readability productivity  it s important think carefully name structure environments  name represent purpose environment  Staging site show client  implementation new feature  hotfix  use Agile  example  create hierarchical environments name this  Sprint1 Feature1 Feature2 Feature3 Sprint2 Feature1 Feature2     prefer splitting environments per developer having specific environment per task per ticket  use something this  Staging Developer1 Ticket 526 Ticket 593 Developer2 Ticket 395",
        "objectID": "en/administration/web/environments",
        "weight": 2,
        "toc": true,
        "sidebarTitle": "Environments",
        "description": "Platform.sh helps a coder with the development workflow by making it easy to manage multiple environments, including the Master environment which runs the production website. It's precisely like a \"development\" or a \"staging\" server, except they are created on the fly, and they are absolutely identical copies of their parent environments.<br><br>\n\nAn environment is tied to a Git branch, plus all the services that are serving that branch. You can see that as a <b>complete working website</b>. With Bitbucket and GitHub integrations you can even get a \"development server\" for each and every pull request.<br><br>\n\nYou can have branches that are not tied to a running instance of your application; these are what we call \"inactive environments\".\n"
    },
    {
        "title": "Vouchers",
        "uri": "en/administration/web/vouchers",
        "content": "Applying voucher project receive Platform sh voucher code  redeem follows  Go Account Settings  logging necessary  via link top right corner docs  via link  https   accounts platform sh user  left navigation click  VOUCHERS  page click  Add voucher code  Enter code click  ADD CODE  button Et voil   account will credited additional dollars pounds euros  assessing Platform sh organization think benefit little oomf test project why not contact us request voucher  tell us at  https   platform sh contact",
        "objectID": "en/administration/web/vouchers",
        "weight": 4,
        "sidebarTitle": "Adding vouchers"
    },
    {
        "title": "Best Practices",
        "uri": "en/bestpractices",
        "content": "",
        "objectID": "en/bestpractices",
        "weight": -100,
        "description": "Here are some tips for getting the most out of Platform.sh's many features."
    },
    {
        "title": "HTTP Caching",
        "uri": "en/bestpractices/http-caching",
        "content": "Platform sh Router cache  Every project includes router instance  includes optional HTTP caching  reasonably configurable obeys HTTP cache directives  does not support push based clearing  uncertain caching tool use  start one  sufficient majority use cases  Content Delivery Network  CDN   Platform sh compatible commercial CDNs  Platform sh Enterprise project Dedicated production environment will typically Fastly CDN  CDN will generally offer best performance option includes multiple geographic locations  tends expensive  Functionality will vary widely depending CDN  Setup instructions Fastly Cloudflare available  will similar CDNs  Varnish  Platform sh offers Varnish service declare part application insert router application  Performance will roughly comparable Router cache  Varnish configurable Router cache able customize VCL file  sure comfortable Varnish configuration  Platform sh does not provide assistance VCL configuration misconfiguration may cause difficult debug behavior  Generally speaking  use Varnish application requires push based clearing relies Varnish specific business logic  Application specific caching  web applications frameworks include built in web cache layer mimics Varnish Router cache do  time will slower dedicated caching service require invoking application server  serve fallback users not dedicated caching service available  Generally speaking reason use application specific web cache includes application specific business logic depend on  application sensitive selective cache clearing partial page caching  Note refers HTTP level caching  applications internal application cache data objects similar  remain active regardless HTTP cache use  Cookies caching HTTP based caching systems generally default including cookie values cache keys so avoid serving authenticated content wrong user  safe default  side effect cookie will effectively disable cache  including mundane cookies analytics  solution whitelist cookies impact cache include application session cookie s   Router cache documentation  cache systems consult documentation",
        "objectID": "en/bestpractices/http-caching",
        "weight": 1,
        "description": "There are several different \"levels\" at which you could configure HTTP caching for your site on Platform.sh.  Which one you want to use depends on your specific use case.  You should use only one of these at a time and disable any others.  Mixing them together will most likely result in stale and unclearable caches.",
        "toc": true
    },
    {
        "title": "One site or many",
        "uri": "en/bestpractices/oneormany",
        "content": "determine setup appropriate use case think project collection services  you ve written yourself  is  put  your code   the database  level   That essentially true Platform sh perspective   Does project consist multiple  your code  pieces  parts project  discrete applications conceptually exist independently other  Discrete projects applications discrete systems incidentally related  such wrote them   separate projects  will provide flexible development workflow  will cheaper  running multiple applications single project requires least Medium plan  costs two Standard plans  Discrete projects appropriate if  want deploy new releases application independently others  projects different customers clients  projects not need deep internal knowledge other s data  Different teams will working different applications  want develop true microservices  microservice fully stand alone process its own data  uncertain needs map projects  probably means separate  discrete projects  Clustered applications clustered application one project requires multiple  app services   written you  part conceptual project  is  removing one app services render others broken  clustered application  either multiple  platform app yaml files different directories separate code bases deploy separately single application spawns one worker instances run background processes   See link details set up   Clustered application requires least Medium plan  clustered application  often will not need multiple service instances  MySQL  MariaDB  Solr services support defining multiple databases single service  significantly efficient defining multiple services  Redis  Memcached  Elasticsearch  RabbitMQ natively support multiple bins  queues  indexes  the terminology varies  defined client application part request so need no additional configuration Platform sh  although may need application configuration  Clustered applications appropriate if  want one user facing application entirely separate admin facing application operating data  want user facing application separate worker process  either code separate  handles background tasks  want single conceptual application written multiple programming languages  PHP frontend Node js background worker  Multi site applications Content Management Systems applications support running multiple logical  sites  off single code base  will usually work Platform sh depending configuration details application generally not recommended  Often multi site logic dependant domain name incoming request  Platform sh will vary branch  often recommend running multiple databases  supported just fine Platform sh makes setup process site difficult  Leveraging multi site capabilities application appropriate if  if  single team working  sites  involved   sites  updated simultaneously single unit  individual site relatively low traffic  aggregate traffic appropriate plan size  sites really use codebase no variation  just different data  not case  discrete projects will better long term plan",
        "objectID": "en/bestpractices/oneormany",
        "weight": 2,
        "description": "Platform.sh supports running multiple \"application containers\" in a single project.  That can be extremely powerful in some cases, but if misused can lead to unnecessary maintenance difficulty and excessive costs.",
        "toc": true
    },
    {
        "title": "Configuration",
        "uri": "en/configuration",
        "content": "",
        "objectID": "en/configuration",
        "weight": -110,
        "description": "Platform.sh projects are configured with three YAML files that define three types of containers in your virtual cluster: one <i>Router</i> container, one or more <i>Application</i> containers, and a number of optional <i>Service</i> containers. <br><br>See how each of their configuration files are defined below."
    },
    {
        "title": "Configure your application",
        "uri": "en/configuration/app",
        "content": "platform app yaml file extremely flexible  Depending needs less 10 lines long 100  required keys name  type  disk  least one  instance definition   either web worker block  others optional  application code generate one application instances  Web instances accessed outside world  workers cannot just run persistent background process  Otherwise similar  Different configuration properties applied individual web worker instances  globally them  typical case  one web instance no workers  it s common just list configuration directives below top level property  However  specified within web worker blocks apply just instances  following properties apply global level  cannot replicated inside instance definition  name  required    Sets unique name application container  type  required    Sets container base image use  including application language  timezone   Sets timezone cron tasks application container  build  dependencies  hooks   Control application gets compiled  Note compilation happens application copied different instances  so steps will apply web worker instances  cron   Defines scheduled tasks application  Cron tasks will  technically  run part web instance regardless workers defined  following properties set top level  platform app yaml file apply application instances  set within given instance definition apply just one  set places instance specific one will precedence  completely replace global one  is  want change just one sub property one following keys need replicate entire block  size   Sets explicit sizing hint application  relationships   Defines connections services applications  access   Restricts SSH access granularity management console  disk mounts  required    Defines writable file directories application  variables   Sets environment variables control application behavior   platform app yaml file needs least one following define instance  may define both  web   Controls web application served  worker   Defines alternate copies application run background processes  Available resources web worker instance its own running container  takes its own resources  size key allows control resources container gets omitted system will select one few fixed sizes container automatically  application service containers given resources common pool defined plan size  means containers define  fewer resources one will may need increase plan size  Compression Platform sh does not compress dynamic responses generated application due known security issue  application compress its own response  doing so when response includes user specific information  including session cookie  opens attack vector SSL TLS connections  reason recommend against compressing generated responses  Requests static files served directly Platform sh compressed automatically using either gzip brotli compression if  request headers file support gzip brotli  file served directly disk Platform sh  not passed application  file served cache expiration time future  file type one of  html  javascript  json  pdf  postscript  svg  css  csv  plain text  XML  Additionally  file   gz    br  extension exists will served instead appropriate compression type regardless file type  is  request styles css accepts gzipped file  according request headers  will automatically return contents styles css gz exists  approach supports file type offers CPU optimization  especially cache lifetime short  Example configuration example minimalist  platform app yaml file PHP  heavily commented  below   platform app yaml name application  unique within project  name   app  type key specifies language version application  type   php 7 0  PHP  multiple build flavors available  Pretty everyone except Drupal 7 users will want composer flavor  build  flavor  composer relationships application services applications  left hand side name relationship will exposed application PLATFORM_RELATIONSHIPS variable  right hand side form    relationships  database   mysqldb mysql  hooks will triggered when package deployed  hooks  Build hooks modify application files disk not access services databases  build    rm web app_dev php Deploy hooks access services file system read only  deploy    app console   env prod cache clear size persistent disk application  in MB   disk  2048  mounts  describe writable  persistent filesystem mounts application  keys directory paths relative application root  values mount definition  case  web files just unique name mount  mounts   web files   source  local source_path   web files  configuration application when exposed web  web  locations       public directory application relative its root  root   web  front controller script determines send non static requests  passthru    app php  Allow uploaded files served  not run scripts  Missing files mapped front controller above    files   root   web files  scripts  false allow  true passthru    app php    note     configuration file specific one application  multiple applications inside Git repository  such RESTful web service front end  main web site blog   need  platform app yaml root application  Multi app documentation  Up",
        "objectID": "en/configuration/app",
        "weight": 4,
        "description": "You control your application and the way it will be built and deployed on Platform.sh via a single configuration file, <code>.platform.app.yaml</code>, located at the root of your application folder inside your Git repository.",
        "toc": true,
        "sidebarTitle": "Apps (.platform.app.yaml)",
        "layout": "single"
    },
    {
        "title": "Access",
        "uri": "en/configuration/app/access",
        "content": "Access access key  platform app yaml defines user roles log via SSH environments permission access  specified role minimum  anyone access level role higher access container via SSH  Possible values admin  contributor  viewer  default contributor  restrict SSH access project administrators  following block  platform app yaml will restrict SSH access just users  admin  privileges project specific deployed environment  access  ssh  admin",
        "objectID": "en/configuration/app/access",
        "weight": 6
    },
    {
        "title": "Build and deploy",
        "uri": "en/configuration/app/build",
        "content": "Build deploy  platform app yaml file provides number ways control application gets turned directory Git running application  three blocks control different parts process  build flavor  dependencies  hooks  build process will run build flavor  install dependencies  run user provided build hook  deploy process will run deploy hook  Build build defines happens when building application  Its property flavor  specifies default set build tasks run  Flavors language specific  PHP  composer default  composer will run composer   no ansi   no interaction install   no progress   prefer dist   optimize autoloader composer json file detected  drupal will run drush automatically one few different ways  Drupal 7 documentation details  recommend using build mode Drupal 7  Node js  default default  default will run npm prune   userconfig  npmrc    npm install   userconfig  npmrc package json file detected  Note allows provide custom  npmrc file root application  as sibling  platform app yaml file   languages specify flavor none  which default language PHP Node js   name suggests will no action all  useful when want complete control build steps  run custom Composer command use alternate Node js package manager  build  flavor  composer Build dependencies possible install additional system level dependencies part build process  installed build hook runs using native package manager several web focused languages  Platform sh supports pulling dependencies following languages  PHP  via Composer  Python 2 3  via Pip  Ruby  via Bundler  Node js  via NPM  Java  via Apache Maven  Gradle  Apache Ant  Python dependencies Applications Python 2 Python 3 dependencies  using version packaged recent Debian distribution  format Python dependencies complies PEP 394  is  specifying dependency python python2 block will use pip2 Python 2  specifying dependency python3 block will use pip3 Python 3  suggest specify dependencies specific version Python wish use  i e  either python2 python3   rather generic python declaration  ensure application will function normally future Debian s default version Python changes  Specifying dependencies Build dependencies independent eventual dependencies application available PATH during build process runtime environment application  Note cases given package installed either global dependency part application s own dependencies  cases it s one use  specify dependencies shown below  dependencies  php    Specify one Composer package per line  drush drush   8 0 0  python    Specify one Python 2 package per line  behave      python2    Specify one Python 2 package per line  requests      python3    Specify one Python 3 package per line  numpy      ruby    Specify one Bundler package per line  sass   3 4 7  nodejs    Specify one NPM package per line  grunt cli    0 1 13  Note package name format language defined package manager used  similarly  version constraint string will interpreted package manager  Consult appropriate package manager s documentation supported formats  Hooks Platform sh supports three  hooks   points deployment new version application inject custom script into  runs different stage process  hook executed single script  so will considered failed final command fails  cause fail first failed command  add set  e beginning hook  build hook fails reason build aborted deploy will not happen   home  directory hook application root  scripts need run doc root application  will need cd first  e g   cd web  hooks  build    set  e cd web cp somefile php someother_file php deploy    update_schema sh post_deploy    set  e importnewcontent sh clear_cache sh   character tells YAML lines follow interpreted literally newline containing string rather multiple lines YAML properties  Hooks executed using dash shell  not bash shell used normal SSH logins  cases makes no difference may impact involved scripts  Build hook build hook run build flavor  if any   point no services  such database  available nor persistent file mounts  application not yet deployed  Environment variables exist runtime PLATFORMBRANCH  PLATFORMDOCUMENT_ROOT etc  not available during phase  full list build time runtime variables available variables page  three writeable directories time   PLATFORMAPPDIR   code checked out  working directory when build hook starts  contents directory build hook will  the application  gets deployed   This directory always  app  it s better use variable rely working directory hard code that   time  directory use   PLATFORMCACHEDIR   directory persists builds  NOT deployed part application  It s good place temporary build artifacts  downloaded  tar gz  zip files  reused builds  Note shared builds branches  so using cache directory sure build code accounts that   tmp   temp directory useful writing files not needed final application  will wiped build  no constraints downloaded during build hook except amount disk available time  Independent mounted disk size allocated deployment  build environments  the application plus cache directory  therefore application images limited 4 GB during build phase  exceed limit will receive No space left ",
        "objectID": "en/configuration/app/build",
        "weight": 9
    },
    {
        "title": "Cron and scheduled tasks",
        "uri": "en/configuration/app/cron",
        "content": "Cron jobs Cron jobs allow run scheduled tasks specified times intervals  crons section  platform app yaml describes tasks schedule when triggered  item list unique name identifying separate cron job  Crons started right build phase  few subkeys listed below  spec  cron specification  example   20       run every 20 minutes  cmd  command executed  example cd public   drush core cron minimum interval cron runs 5 minutes  even specified less  Additionally  variable delay added cron job project order prevent host overloading every project try run nightly tasks time  crons will not run exactly time specify  will delayed 0 300 seconds  single application container may number cron tasks configured  one may running time  is  cron task fires cron task running will pause continue normally once first completed  Cron runs executed using dash shell  not bash shell used normal SSH logins  cases makes no difference may impact involved cron scripts  application defines web instance worker instance  cron tasks will run web instance  setup Cron typical Drupal site  following example runs Drupal s normal cron hook every 20 minutes  using Drush  sets second cron task run Drupal s queue runner aggregator_feeds queue every 5 minutes  crons  Run Drupal s cron tasks every 20 minutes  drupal  spec    20        cmd   cd web   drush core cron  run pending queue tasks every 7 minutes  Use odd number avoid running time drupal cron  drush queue  spec    7        cmd   cd web   drush queue run aggregator_feeds",
        "objectID": "en/configuration/app/cron",
        "weight": 12
    },
    {
        "title": "Multiple applications",
        "uri": "en/configuration/app/multi-app",
        "content": "Multiple Applications Platform sh supports building multiple applications per project  for example RESTful web services front end  main website blog   resource allocation reasons  however  not supported Standard plan  Introduction File structure applications share common configuration files present  platform  folder root Git repository  application provides its own configuration via  platform app yaml file  When push via Git  Platform sh will build application separately  application s  modified will rebuilt  create multi application setup put application its own directory  platform app yaml file its root  example  Drupal back end AngularJS front end    ls  a  git   platform  drupal   platform app yaml     angular   platform app yaml Submodules Platform sh supports Git submodules  so application separate repository  powerful feature allows create Staging server different versions application single commit  However  currently notable limitation   platform app yaml files top level repository  now  you ll implement repository layout looks this   git   platform  routes yaml services yaml app1   platform app yaml app1 submodule  index php app2   platform app yaml app2 submodule  index php puts applications  files different path relative  platform app yaml files  so you ll update web configuration match  example  first application s  platform app yaml file include something this  web  locations       root   app1 submodule  app1 submodule path to webroot  appropriate  passthru    index php  Multi app Routes setup AngularJS  platform app yaml name  angular  Drupal one name  drupal  need configure  platform routes yaml following  names need match    https   backend  default     type  upstream upstream   drupal http   https    default     type  upstream upstream   angular http  will result  if consider http   example com domain   http   backend example com served Drupal instance http   example com  urls below served AngularJS one    note     Subdomain routes development environments will accessible using three dashes       instead dot      e g    http   backend   BRANCH MACHINE_NAME PROJECTID  REGION platformsh site SSH application SSH application deployed  not sure construct SSH URL  use generic one provided Platform sh management console  ssh 3bdcrrivykjsm master git eu 2 platform sh user name  3bdcrrivykjsm master  resolves multiple services  use one specific names  3bdcrrivykjsm master  angular 3bdcrrivykjsm master  drupal Received disconnect 54 76 137 151  14  No auth methods available Disconnected 54 76 137 151 Example micro service multi app detailed complete example project designed micro service architecture  Setup Imagine front end  front  application depends two REST services connect PostgreSQL database  User API  user  Content API  content  front does not connect directly database does everything APIs  uses Redis Cache  directory structure may look something this    ls  a  git   platform  routes yaml services yaml user_api   platform app yaml public  index php       content_api   platform app yaml public  index php       front_end   platform app yaml public  index php assets          note     no relationship directory names application   names  defined configuration files  Routes use case User API accessible URL https   api example com v1 users  Content API accessible https   api example com v1 content  case not doing HTTP caching two APIs  caching front application   platform routes yaml may look like   https   api  default  v1 users   type  upstream upstream   user http  cache  enabled  false  https   api  default  v1 content   type  upstream upstream   content http  cache  enabled  false  https    default     type  upstream upstream   front http  cache  enabled  true later  simply tell router connect  service called front route HTTP traffic application service running there    note     upstream virtually always ends   http  Platform sh supports   HTTP based applications exposed outside world  Routing section Services  platform services yaml may look like  commondb  type  postgresql 9 3 disk  4096 cache  type  redis 2 8 define two services available application project  keys commondb cache names  need alphanumeric no special characters  describe role theses services will project  use names application s  platform app yaml link service application  User API user_api  platform app yaml will look following  only putting relevant parts       representing stuff cut out   name  user       relationships   database    commondb postgresql  Content API content_api  platform app yaml will  case  similar  name  content       relationships   database    commondb postgresql  commondb comes name put services yaml   postgresql suffix  required  future Platform sh will support multiple endpoints per service  for services support multiple protocols   Services section    note     name database freely chosen us will exposed   environment variable PLATFORM_RELATIONSHIPS application  it different different application project   front front_end  platform app yaml will look like  name  front       relationships   database    cache redis   user_",
        "objectID": "en/configuration/app/multi-app",
        "weight": 13
    },
    {
        "title": "Name",
        "uri": "en/configuration/app/name",
        "content": "Name name unique identifier application  Platform sh supports multiple applications within project  so application unique name within project  name may composed lower case alpha numeric characters  a z0 9     warning     Changing name application deployed will destroy storage volumes result loss persistent data  typically Bad Thing do  useful certain circumstances early stages development almost certainly don t want change live project  name used  platform routes yaml file define HTTP upstream  by default php http   instance  called application app will need use app http upstream field  use name multi application relationships",
        "objectID": "en/configuration/app/name",
        "weight": 1
    },
    {
        "title": "Relationships",
        "uri": "en/configuration/app/relationships",
        "content": "Relationships relationships block defines services mapped within application  default  application may not talk container within project  access container define relationship it  relationship arbitrary name  although convention primary SQL database application  if any  usually database  name relationship will known PLATFORM_RELATIONSHIPS environment variable  will include credentials accessing service  relationship specified form servicename endpointname   service name  name service given  platform services yaml  name application project  that is  name property  platform app yaml file application    endpoint  exposed functionality service use  services simply service type  MySQL  example  different service running multiple databases  Services documentation full list currently supported service types service endpoints  access multiple services  following example  single MySQL service named mysqldb offering two databases  Redis cache service named rediscache  Elasticsearch service named searchserver  relationships  database   mysqldb db1  database2   mysqldb db2  cache   rediscache redis  search   searchserver elasticsearch",
        "objectID": "en/configuration/app/relationships",
        "weight": 5
    },
    {
        "title": "Size",
        "uri": "en/configuration/app/size",
        "content": "Custom sizing default  Platform sh will automatically select appropriate resource sizes  CPU memory  container when it s deployed  based plan size number containers cluster  containers project fewer resources one gets  vice versa  similar containers getting similar resources  Usually that s fine  sometimes it s undesirable  may  instance  want queue worker container know low memory CPU needs  so it s helpful give one fewer resources container more  given service may heavily used architecture so needs resources take  cases provide sizing hints system per service basis  Every application container every service  platform services yaml supports size key  instructs system resources allocate it  exact CPU memory allocated will depend application service type  may adjust values time better optimize resource usage  Legal values size key AUTO  the default   S  M  L  XL  2XL  4XL  Note development environment value ignored always set S  will effect production deployment  a master branch associated domain   total resources requested apps services larger plan size allows production deployment will fail error  background processing container smaller save resources  Simply set size key S ensure container gets fewer resources  leaving allocated containers  name  processing type  nodejs 6 11 size  S",
        "objectID": "en/configuration/app/size",
        "weight": 3
    },
    {
        "title": "Source Operations",
        "uri": "en/configuration/app/source-operations",
        "content": "Source operations   note     Source Operations currently Beta  syntax not expected change  behavior future      aware Source Operations not compatible 3rd party repository integrations time  use 3rd party repository changes Source Operations will overwritten integration  application define number operations apply its source code automated  basic  common source operation automatically update Composer dependencies this  source  operations  update  command    set  e composer update git add composer lock git commit  m  Update Composer dependencies   update key name operation  arbitrary  multiple source operations defined   You may wish include robust error handling example   environment resource gets new source operation action triggered CLI  platform source operation run update source operation run command takes command name run  Additional variables added inject environment source operation  will interpreted variable set UI CLI  means need env  prefix expose Unix environment variable  referenced source operation variable  variable platform source operation run update   variable env FOO bar   variable env BAZ beep When operation triggered  clean Git checkout current environment HEAD commit created  checkout doesn t remotes  tags defined project  current environment branch  Sequentially  application defined operation  operation command launched container image application  environment will variables available during build phase  optionally overridden variables specified operation payload  end process  commits created  new commits pushed repository normal build process environment triggered  Note operations run isolated container  not part runtime cluster environment  doesn t require environment running  aware multiple applications single project result new commit  will appear two distinct commits Git history single new build deploy cycle will occur  Automated Source Operations using cron use cron automatically run source operations    note     Automated source operations using cron requires API token install CLI application container  Once CLI installed application container API token configured  add cron task run source operations once day  not recommend triggering source operations master production environment  rather dedicated environment use testing deployment  example below synchronizes update dependencies environment its parent running update source operation  crons  update  Run  update  source operation every day midnight  spec   0 0        cmd    set  e     PLATFORM_BRANCH    update dependencies    platform environment sync code data   no wait   yes platform source operation run update   no wait   yes fi",
        "objectID": "en/configuration/app/source-operations",
        "weight": 13
    },
    {
        "title": "Storage",
        "uri": "en/configuration/app/storage",
        "content": "Storage built file system image results build process mounted read only  means cannot edited production  even accident  applications require ability write store files  however  that  applications specify one mount points  is  directories will mounted writable network file system cluster  may mounted anywhere within file system application  specified directory already exists contents will masked writable mount inaccessible runtime  Disk plan storage size specifies maximum total space available applications services  When deploying project  sum disk keys defined  platform app yaml  platform services yaml equal less plan storage size  example  plan storage size 5 GB  assign  2 GB application  3 GB database 1 GB application  4 GB database 1 GB application  1 GB database  3 GB Elasticsearch service etc  receive error git push mentioning total disk space configured application its services exceeds plan storage size  need either increase disk space reserved project project setup page lower storage assigned service application  disk key required  defines size persistent disk application  in MB   Its minimum value 256 MB validation error will occur try set lower  Mounts mounts key object whose keys paths relative root application  that is   platform app yaml file lives   values 2 line mount definition  section optional  application doesn t need writable local file storage  omit mounts section set disk minimum value 256  Note whether mounted directory web accessible not depends configuration web locations block  platform app yaml  Depending application s needs  it s possible publish files writable mounts  leave private  rules different paths file types desired  Basic mounts following block defines single writable directory  web uploads  mounts   web uploads   source  local source_path  uploads source specifies writable mount is  source_path specifies subdirectory within source mount point at  often easiest match name mount point itself not required  local mounts local source indicates mount point will point local directory application container  source_path subpath that  means may overlap  local mounts not shared different application containers workers  aware entire local space single app container common directory  directory not wiped  means create mount point source_path  uploads   write files there  remove mount point  files will exist disk indefinitely until manually removed  service mounts service mount refers network storage service  defined services yaml  function essentially local mount  two important differences  1  disk size service mount controlled services yaml  separate value disk key  platform app yaml  2  Multiple application containers may refer service mount share files  service mount works so  mounts   web uploads   source  service service  files source_path  uploads assumes network storage service named files already defined  Network Storage page details examples  Multi instance disk mounts multiple application instances defined  using web workers   instance will its own local disk mounts  That s case even named same  even single top level mounts directive  case  every instance will identical configuration  separate  independent file spaces  want multiple application instances share file storage  will need use service mount  set public private file uploads  following example sets two file mounts  One mounted  private within application container   web uploads  two file mounts together limit 1024 MB storage  disk  1024 mounts   private   source  local source_path  private  web uploads   source  local source_path  uploads web locations block  you d specify web uploads path accessible  example  fragment specify  web path docroot provide locked down access  web uploads path  web  locations       public directory application relative its root  root   web  front controller script determines send non static requests  passthru    app php  Allow uploaded files served  not run scripts    web uploads   root   web uploads  expires  300s scripts  false allow  true web locations documentation details  setup overlapping mount paths  not recommended possible setup multiple mount points whose source paths overlap  Consider following example  mounts   private   source  local source_path  stuff  secret   source  local source_path  stuff secret configuration  will two mount points seen application    private   secret  However  secret mount will point directory mount point private  is  secret path private secret path will exact directory  Although configuration won t cause technical issues  may quite confusing so generally not recommended  Checking size mounts use standard commands df  ah find total disk usage mounts  which usually filesystem  du  hs  path to dir check size individual directories  CLI provides command combines checks    platform mount size Checking disk usage mounts application  app                                                                                            Mount s    Size s    Disk   Used   Available   Capacity                                                                                          priv",
        "objectID": "en/configuration/app/storage",
        "weight": 7
    },
    {
        "title": "Timezone",
        "uri": "en/configuration/app/timezone",
        "content": "Cron timezone Platform sh containers default running UTC time  Applications application runtimes may elect use different timezone container itself runs UTC  includes spec parameter cron tasks defined application  generally fine sometimes it s necessary run cron tasks different timezone  Setting system timezone cron tasks timezone property sets timezone spec property cron tasks defined application will interpreted  Its value one tz database region codes Europe Paris America New_York  key will apply cron tasks defined file  entry meaningful cron specs specify particular time day  rather  time past hour   example  25 1       run every day 1 25 timezone specified  Setting application runtime timezone application runtime timezone set  although mechanism varies bit runtime  PHP runtime   change timezone providing custom php ini  Node js runtime   change timezone starting server env TZ    node server js  Python runtime   change timezone starting server env TZ    python server py  Setting application timezone will affect application itself  not system operations log files    note     vast majority cases it s best leave timezones UTC store user data associated timezone instead",
        "objectID": "en/configuration/app/timezone",
        "weight": 4
    },
    {
        "title": "Type",
        "uri": "en/configuration/app/type",
        "content": "Type type key defines base container image will used run application  separate base container image primary language application  often multiple versions  Supported types Available languages supported versions include       Example configuration                Runtime  platform app yaml file supports runtime key allows selected customizations language runtime  possibilities vary language  please appropriate language documentation  PHP",
        "objectID": "en/configuration/app/type",
        "weight": 2
    },
    {
        "title": "Upgrading",
        "uri": "en/configuration/app/upgrading",
        "content": "Upgrading Changes version 2019 05  archive tag YAML un deprecated  favored  include option   include available include types  yaml  binary  string   Changes version 2017 11  2017 11 09   archive tag YAML files deprecated favor generic  include  example  following services yaml snippet  mysearch  type  solr 6 3 disk  1024 configuration  core_config   archive  myconfdir  written as  mysearch  type  solr 6 3 disk  1024 configuration  core_config   include type  archive path   myconfdir  syntax mounts key  platform app yaml changed  Rather parsed string  value mount multi key definition  is  following example  mounts   tmp    shared files tmp   logs    shared files logs  written as  mounts  tmp  source  local source_path  tmp logs  source  local source_path  logs Changes version 2016 6  2016 11 18  Application containers include latest LTS version Node js  6 9 1  previously included version 4 6 1  Composer briefly called   no dev  2016 11 21 change reverted  unintended effect projects using Symfony framework  Changes version 2016 5 October 2016  default behaviour expires key  controls client side caching static files  changed  Previously  key unset  Expires Cache Control HTTP headers left unset response  meant client side caching behaviour left undefined  ensure consistent behaviour doesn t depend browser client using  new default behaviour set headers values disable client side caching  change affects static files served directly web server  Responses served passthru URLs continue use whatever caching headers set application   enable caching static files  sure include expires key web configuration  shown below  web  locations       root   public  passthru    index php  index  index php expires  300 scripts  true allow  true rules    mp4   allow  false expires   1   sites default files   expires  300 passthru  true allow  true Changes version 2016 4 July 2016  no longer create default configuration files one not provided  defaults used provide tailored specifically Drupal 7  legacy support version release Drupal 8 not especially useful non Drupal non PHP sites  defaulted software versions no longer current recommended  Instead  provide own  platform app yaml   platform routes yaml   platform services yaml files  Additionally  version language service always specified well  allows control when upgrade one version without relying network default  previous default files  reference  are   platform app yaml name  php type   php 5 4  build  flavor   drupal  access  ssh  contributor relationships  database   mysql mysql  solr   solr solr  redis   redis redis  web  document_root      passthru    index php  disk  2048 mounts   public sites default files    shared files files   tmp    shared files tmp   private    shared files private  crons  drupal  spec    20        cmd   cd public   drush core cron   platform routes yaml  http    default     type  upstream upstream   php http  cache  enabled  true ssi  enabled  false  http   www  default     type  redirect to   http    default     platform services yaml mysql  type  mysql 5 5 disk  2048 redis  type  redis 2 8 solr  type  solr 3 6 disk  1024 Changes version 2016 3 aiming always provide control flexibility deploy applications   platform app yaml format greatly improved  flexible  explicit describe want do  web key set locations define precisely behavior URL prefix  Note  no longer move application      public   automatically new format adopted  using Drupal  move Drupal files  public   Git repository  Old format  web  document_root      passthru    index php  index_files   index php  expires  300 whitelist    html  New format  web  locations       root   public  passthru    index php  index  index php expires  300 scripts  true allow  true rules    mp4   allow  false expires   1   sites default files   expires  300 passthru  true allow  true Backward compatibility course  alway keep backward compatibility previous configuration format  happens don t upgrade configuration  following parameters automatically moved     block  locations  object  invalid valid  locations  block  document_root    public    Converted locations root  passthru    index php    Converted locations passthru  index_files  index php   Converted locations index  whitelist      Converted  locations rules  blacklist      Converted  locations rules  expires  3d   Converted locations expires  Changes version 2015 7  platform app yaml configuration file allows clearer syntax   and should  start using now  old format single string identify  toolstack  use  toolstack   php drupal  new syntax allows separate concerns language running build process going happen deployment  type  php build  flavor  drupal Currently support php  type  key  Current supported build flavors drupal  composer symfony  Changes version 2014 9 version introduces changes configuration files format  old configuration format supported  customers invited move new format  example upgrade path  Drupal 7 template GitHub  Configuration items PHP previously part  platform services yaml moved  platform app yaml  gains following top level items  name   php  relatio",
        "objectID": "en/configuration/app/upgrading",
        "weight": 14
    },
    {
        "title": "Variables",
        "uri": "en/configuration/app/variables",
        "content": "Variables Platform sh provides number ways set variables  either globally specific single environment  values consistent different environments  because they re configuring application runtime itself  generally  easiest control set  platform app yaml file  prefixed variables may set  platform app yaml file  prefixes specific meaning others significant particular application  Nested variables will automatically converted nested array list structure appropriate language  example  following section  platform app yaml will set single variable named env AUTHOR value Juan  variables  env  AUTHOR   Juan  will exact runtime effect setting project variable via CLI follows  except will versioned along code    platform variable create env AUTHOR   level project   value Juan variable name may itself punctuation it  example  set Drupal 8 configuration override  assuming you re using recommended settings platformsh php file  following  variables  d8config   system site name    My site rocks  will create Platform sh variable  is  item  PLATFORM_VARIABLES environment variable  named d8config system site name value  My site rocks   Complex values value variable may just string  may nested structure  variable env namespace  will mapped Unix environment variable JSON string  not  will included PLATFORM_VARIABLES environment variable  example  following variable definitions  variables  env  BASIC   a string  INGREDIENTS   peanut butter   jelly  QUANTITIES   milk    1 liter   cookies    1 kg  stuff  STEPS    un    deux    trois   COLORS  red    FF0000  green    00FF00  blue    0000FF  appear various languages                 string 2   un   1    string 4   deux   2    string 5   trois       print_r  variables  stuff COLORS        array 3      red     string 7    FF0000    green     string 7    00FF00    blue     string 7    0000FF                           import os import json import base64 print os getenv  BASIC      string print os getenv  INGREDIENTS        peanut butter    jelly   print os getenv  QUANTITIES        milk    1 liter    cookies    1 kg   variables   json loads base64 b64decode os getenv  PLATFORM_VARIABLES    decode  utf 8    print variables  stuff STEPS       u un   u deux   u trois   print variables  stuff COLORS       u blue   u  0000FF   u green   u  00FF00   u red   u  FF0000",
        "objectID": "en/configuration/app/variables",
        "weight": 8
    },
    {
        "title": "Web configuration",
        "uri": "en/configuration/app/web",
        "content": "Web web key defines single web instance container running single web server process  currently Nginx   behind runs application  web key configures web server  including requests served directly  such static files  passed application  server extremely flexible  means configurations will involved others  Additionally  defaults may vary somewhat different language base images  specified type key  platform app yaml   first section page explains various options file supports  prefer  later sections include various example configurations demonstrate common patterns configurations  examine  platform app yaml files provided project templates various common Free Software applications  various language pages index available examples  web key defines application exposed web  in HTTP   tell web application serve content  including static files  front controller scripts  index files  index scripts  so on  support directory structure  so static files subdirectory index php file further down  Commands commands key defines command launch application  single command  start  will added future  start key specifies command use launch application  running uwsgi command Python application unicorn command Ruby application  simply running compiled Go application  command specified start key terminates will restarted automatically  web  commands  start   uwsgi   ini conf server ini    note      background  start process using    will interpreted command terminating supervisor process will start second copy  creating infinite loop until container crashes  Just run normal allow Platform sh supervisor manage it  PHP containers value optional will default starting PHP FPM  i e   usr sbin php fpm7 0 PHP7  usr sbin php5 fpm PHP5   containers treated required  set explicitly PHP container order run dedicated process React PHP Amp  Upstream upstream specifies front server will connect application  the process started commands start above   two keys  socket_family  Default  tcp  Describes whether application will listen Unix socket  unix  TCP socket  tcp   protocol  Specifies whether application going receive incoming requests HTTP  http  FastCGI  fastcgi   default varies depending application runtime you re using  values will supported future  PHP container FPM almost reason set upstream explicitly  defaults already configured properly PHP FPM  containers default tcp http  web  upstream  socket_family  tcp protocol  http above configuration  which default non PHP containers  will forward connections process started commands start raw HTTP request TCP port  though process listening incoming request directly  Socket family socket_family set tcp  application listen port specified PORT environment variable   In practice almost always 8888  checking variable preferred   socket_family set unix  application open unix socket file specified SOCKET environment variable  application isn t listening place runtime sending requests  you ll 502 Bad Gateway errors when try connect web site  Locations locations block powerful  potentially involved  section  platform app yaml file  allows control application container responds incoming requests fine grained level  Common patterns vary language containers due PHP FPM handles incoming requests  entry locations block absolute URI path  with leading    its value includes configuration directives web server handle matching requests  is  domain example com     means  requests example com      admin  means  requests example com admin   multiple blocks match incoming request most specific will apply  web  locations       Rules requests don t otherwise match        sites default files   Rules requests begin  sites default files      simplest possible locations configuration one simply passes requests application unconditionally  web  locations       passthru  true is  requests    forwarded process started web commands start above  Note PHP containers passthru key specify PHP file request forwarded to  specify docroot file lives  example  web  locations       root   web  passthru    app php  block will serve requests   web directory application  file doesn t exist disk request will forwarded  app php script  full list possible subkeys locations below  root  folder serve static assets location relative application root  application root directory  platform app yaml file located  Typical values property include public web  Setting    not recommended  its behavior may vary depending type application  Absolute paths not supported  passthru  Whether forward disallowed missing resources location application true  false absolute URI path  with leading     default value false  non PHP applications will generally just true false  PHP application will typically front controller  index php  app php  entry works similar mod_rewrite Apache  Note  value passthru does not begin value location key under  passthru may evaluate entry  may useful when want different cache settings different paths  instance  want missing files map back front controller  example block below  index  files consider when serving request directory  array file names null   typ",
        "objectID": "en/configuration/app/web",
        "weight": 10
    },
    {
        "title": "Worker configuration",
        "uri": "en/configuration/app/workers",
        "content": "Workers Every application may define zero worker instances  worker instance runs its own container independently web instance no Nginx instance running  router service cannot direct public requests it  either  so running own web server worker  using Node js Go  not useful  worker instance exact code compilation output web instance  container image built once  deployed multiple times needed  is  build hook dependencies may not vary one instance another  may vary container configured resources allocated  Worker instances suited background tasks queue workers  updating indexes  running periodic reporting tasks long sense cron job   Although often broken queue tasks   basic  common worker configuration look this  workers  queue  size  S commands  start    php worker php defines single worker named queue  will  small  container  wil run command php worker php startup  worker php ever exits will automatically restarted  number workers may defined own distinct name  subject available resources plan  resource allocation reasons  using workers project requires Medium plan larger  Accessing Worker Container application container Platform sh allows connect worker instance SSH inspect logs interact it  Using Platform CLI use   worker switch  so  platform ssh   worker queue output SSH command use  platform ssh   worker queue   pipe will url name worker added user name application name part SSH url preceded double dash       example given project id 3seb7f2j6ogbm connect its master environment app called app url as  ssh 3seb7f2j6ogbm master 7rqtwti  app ssh us 2 platform sh connect worker called queue  as example above  use SSH url look follows  ssh 3seb7f2j6ogbm master 7rqtwti  app  queue ssh us 2 platform sh Workers vs Cron worker instances cron tasks address similar use cases  address out of band work application needs not cannot done part normal web request  so different ways  however  so fit different use cases  Cron job suited tasks when  need happen fixed schedule  not continually  task itself not especially long  running cron job will block new deployment  long  easily divided small queued tasks  delay when task registered when actually happens acceptable  dedicated worker instance better fit if  Tasks happen  now   not block web request  Tasks large enough risk blocking deploy  even subdivided  task question continually running process rather stream discrete units work  appropriateness one approach varies language  single threaded languages benefit either cron workers language native multi threading  instance  given task seems run equally worker cron  cron will generally efficient does not require its own container  Commands commands key defines command launch worker application  single command  start  will added future  commands start property required  start key specifies command use launch worker application  may valid shell command  although often will run command application language application  command specified start key terminates will restarted automatically  Note deploy post_deploy hooks  cron commands  will run web container  not workers  Inheritance top level definitions size  relationships  access  disk mount  variables will inherited every worker  unless overridden explicitly  means  example  following two  platform app yaml definitions produce identical workers  name  app type  python 3 5 disk  256 mounts  test  source  local source_path  test relationships  database   mysqldb mysql  workers  queue  commands  start    python queue worker py mail  commands  start    python mail worker py name  app type  python 3 5 workers  queue  commands  start    python queue worker py disk  256 mounts  test  source  local source_path  test relationships  database   mysqldb mysql  mail  commands  start    python mail worker py disk  256 mounts  test  source  local source_path  test relationships  database   mysqldb mysql  cases  will two worker instances named queue mail  will access MySQL MariaDB service defined services yaml named mysqldb database relationship  will own separate  independent local disk mount  app test 256 MB allowed space  Customizing worker common properties set worker override top level settings size variables  size lets allocate fewer resources container will running single background process  unlike web site will handling requests once   variables lets instruct application run differently worker web site  example  consider  platform app yaml  name  app type   python 3 7  disk  2048 hooks  build    pip install  r requirements txt pip install  e   pip install gunicorn relationships  database   mysqldb mysql  messages   rabbitqueue rabbitmq  variables  env  type   none  web  commands  start   gunicorn  b  PORT project wsgi application  variables  env  type   web  mounts  uploads  source  local source_path  uploads locations       root     passthru  true allow  false   static   root   static   allow  true workers  queue  size   M  commands  start    python queue worker py variables  env  type   worker  disk  512 mounts  scratch  source  local source_path  scratch mail  size   S  commands  start    python mail w",
        "objectID": "en/configuration/app/workers",
        "weight": 11
    },
    {
        "title": "Configure Routes",
        "uri": "en/configuration/routes",
        "content": "don t  platform folder already  use commands below create it    mkdir  platform   touch  platform routes yaml Route templates YAML file composed list routes configuration  route either absolute URL URL template looks like  http   www  default   https    default  blog  default  will substituted default fully qualified domain name configured project  So default domain example com  routes will resolved http   www example com  https   example com blog master environment  Platform sh will generate domain every active development environment  will receive domain name based region  project ID  branch name  per environment random string  domain name itself not guaranteed stable  although pattern consistent    note     Platform sh supports running multiple applications per environment   platform routes yaml file defines route requests different applications  Route configuration route configured separately  following properties type be  upstream serves application will upstream property will name application  as defined  platform app yaml   followed   http   see examples below   redirect redirects route will followed property  defines HTTP 301 redirect URL route  see examples below   cache controls caching behavior route  ssi controls whether Server Side Includes enabled  information  SSI  redirects controls redirect rules associated route    note     moment  value upstream always form   http    name defined  platform app yaml file   php deprecated application endpoint  use  http  instead  future  Platform sh will support multiple endpoints per application  Route limits Although no fixed limit number routes defined  cap size generated route information  limitation comes Linux kernel  caps size environment variables  kernel limit environment variables 32 pages  page 4k x86 processors  resulting maximum environment variable length 131072 bytes  routes yaml file result large route information value will rejected  full list generated route information often larger literally specified routes yaml file  example  default HTTPS routes will duplicated create HTTP redirect route  Also   all  placeholder will create two routes  one HTTP  one HTTPS  domain configured  general rule recommend keeping defined routes 100  find routes yaml file rejected due excessive size best alternative move redirect routes application rather relying router  collapsing regular expression based redirect within route definition  Let s Encrypt limits environment 100 configured domains  try add will fail SSL certificate  Routes examples example basic  platform routes yaml file   https    default     type  upstream upstream   app http   https   www  default     type  redirect to   https    default    example  will route apex domain www subdomain application called  app   www subdomain redirected apex domain using HTTP 301 Moved Permanently response  following example  not redirecting www subdomain apex domain serving both   https    default     type  upstream upstream   app http   https   www  default     type  upstream upstream   app http  Route placeholders configure number domains project when ready live  one may set  default  domain  routes yaml file route defined either literally using one two special placeholders   default   all   magic value  default  will replaced production domain name configured default account production branch  non production branch will replaced project ID environment ID so always unique  magic value  all  will replaced domain names configured account  is  two domains example1 com example2 com configured  route named https   www  all   will result two routes production  https   www example1 com https   www example2 com  useful cases when single application serving two different websites simultaneously  non production branch will replaced project ID environment ID domain  fashion static route below  no domains defined project  as typical development launch   all  placeholder will behave exactly  default  placeholder  It s entirely possible use absolute URL route  case  will used as is production environment  development environment will mangled include project ID environment name  example   https   www example com    type  upstream upstream   app http   https   blog example com    type  upstream upstream   blog http  case  two application containers app blog  production environment  accessible www example com blog example com  respectively  development branch named sprint  however  accessible URLs something like  https   www example com sprint 7onpvba tvh56f275i3um eu 2 platformsh site  https   blog example com sprint 7onpvba tvh56f275i3um eu 2 platformsh site  project involves single apex domain one app multiple apps subdomains  it s generally best use  default  placeholder  running multiple applications different apex domains will need use static domain one them  Please note when two routes sharing HTTP scheme  domain  path  first route using  default  placeholder using  all  placeholder  route using  default  takes precedence  Route identifiers routes defined environment available application its PLATFORM_ROUTES environment variable  conta",
        "objectID": "en/configuration/routes",
        "weight": 2,
        "description": "Platform.sh allows you to define the routes used in your environments.<br><br>A route describes how an incoming HTTP request is going to be processed by Platform.sh. The routes are defined using <code>.platform/routes.yaml</code> file in your Git repository.",
        "toc": true,
        "sidebarTitle": "Routes (routes.yaml)",
        "layout": "single"
    },
    {
        "title": "HTTP Cache",
        "uri": "en/configuration/routes/cache",
        "content": "request cacheable  Platform sh builds cache key several request properties stores response associated key  When request comes cache key  cached response reused  When caching on    configure cache behaviour different location blocks  platform app yaml  router will respect whatever cache headers sent application  cookies will bypass cache  responses Cache Control header set Private  No Cache  No Store not cached  Basic usage HTTP cache enabled default  however may wish override behaviour  configure HTTP cache  add cache key route  platform routes yaml  may start defaults  https    default    type  upstream upstream  app http cache  enabled  true default_ttl  0 cookies        headers    Accept    Accept Language   Example example  requests will cached based URI  Accept header  Accept Language header  X Language Locale header  response lacks Cache Control header will cached 60 seconds  presence cookie request will disable caching response  https    default    type  upstream upstream  app http cache  enabled  true headers    Accept    Accept Language    X Language Locale   cookies        default_ttl  60 works cache key request cacheable  Platform sh builds cache key several request properties stores response associated key  When request comes cache key  cached response reused  two parameters let control key  headers cookies  default value keys following  cache  enabled  true cookies        headers    Accept    Accept Language   Duration cache duration decided based Cache Control response header value  no Cache Control header response  value default_ttl key used  Conditional requests Conditional requests using If Modified Since If None Match supported  web server does not honor Pragma request header  Cache revalidation When cache expired  indicated Last Modified header response  web server will send request application If Modified Since header  If None Match header sent conditional request when Etag header set cached response  application extend validity cache replying HTTP 304 Not Modified  Flushing HTTP cache does not support complete cache flush  however  invalidate cache setting cache false  Cache configuration properties enabled Turns cache off route    Type  Boolean     Required  Yes     Values     true  enable cache route  default  cache key not actually specified      false  disable cache route headers Adds specific header fields cache key  enabling caching separate responses headers  example  headers key following  Platform sh will cache different response value Accept HTTP request header only  cache  enabled  true headers    Accept     Type  List     Values        Accept    Accept Language    Cache Accept   Accept Language  default  Header behaviors cache applied HEAD requests  headers trigger specific behaviours cache  Header field   Cache behavior                                Cache Control Responses Cache Control header set Private  No Cache  No Store not cached  values override default_ttl  Vary A list header fields taken account when constructing cache key  Multiple header fields listed  separted commas  Cache key union values Header fields listed Vary header  whatever s listed routes yaml file  Set Cookie Not cached Accept Encoding  Connection  Proxy Authorization  TE  Upgrade Not allowed  will throw error Cookie Not allowed  will throw error  Use cookies value  instead  Pragma Ignored full list HTTP headers available Wikipedia  cookies whitelist cookie names include values cache key  cookies will bypass cache when using default         Set Cookie header present  example  cache key depend value foo cookie request  cookies will ignored  cache  enabled  true cookies    foo     Type  List     Values             request cookie will bypass cache  default          Ignore cookies       cookie1   cookie2    whitelist cookies include cache key  cookies ignored  cookie value may regular expression  entry begins ends   will interpreted PCRE regular expression match cookie name  example  cache  enabled  true cookies      SS ESS    Will cause cookies beginning SESS SSESS part cache key  single value  cookies will ignored caching  site uses session cookie 3rd party cookies  say analytics service  recommended approach  default_ttl Defines default time to live cache  seconds  non static responses  when response does not specify one  cache duration decided based Cache Control response header value  no Cache Control header response  value default_ttl used  application code returns Cache Control header  platform app yaml file configured set cache lifetime  value ignored favor application headers  default_ttl applies non static responses  is  generated application  set cache lifetime static resources configure  platform app yaml file  static assets will Cache Control header max age defaulting 0  which default expires  platform app yaml     Type  integer     Values      0  not cache  default   prevents caching  unless response specifies Cache Control header value  Debugging Platform sh adds X Platform Cache header request show whether request cache HIT  MISS BYPASS  useful when trying determine whether application  HTTP cache  proxy C",
        "objectID": "en/configuration/routes/cache",
        "weight": 2,
        "description": "Platform.sh supports HTTP caching at the server level. Caching is enabled by default, but is only applied to <code>GET</code> and <code>HEAD</code> requests.<br><br>The cache can be controlled using the <code>cache</code> key in your <code>.platform/routes.yaml</code> file.",
        "toc": true
    },
    {
        "title": "HTTPS",
        "uri": "en/configuration/routes/https",
        "content": "Let s Encrypt environments Platform sh support HTTP HTTPS automatically  Production SSL certificates provided Let s Encrypt  may alternatively provide own SSL certificate 3rd party issuer choice no charge us    note     Let s Encrypt certificate renewals attempted time environment deployed  project does not receive regular code commits  will need manually issue re deployment ensure certificate remains valid  suggest so when project doesn t receive updates 1 month  done pushing code change via git issuing following command local environment      platform redeploy       Alternatively  section below automatically redeploying site order renew certificate  Platform sh recommends using HTTPS requests sites exclusively  Doing so provides better security  access certain features web browsers permit HTTPS  access HTTP 2 connections sites greatly improve performance  HTTPS redirection handled depends routes defined  Platform sh recommends specifying HTTPS routes routes yaml file  will result pages served SSL  requests HTTP URL will automatically redirected HTTPS   https    default     type  upstream upstream   app http   https   www  default     type  redirect to   https    default    Specifying HTTP routes will result duplicate HTTPS routes created automatically  allowing site served HTTP HTTPS without redirects  Although Platform sh does not recommend it  redirect HTTPS requests HTTP explicitly serve site HTTP only  use cases configuration few   http    default     type  upstream upstream   app http   http   www  default     type  redirect to   http    default     https    default     type  redirect to   http    default     https   www  default     type  redirect to   http    default    course  complex routing logic possible situation calls it  However  recommend defining HTTPS routes exclusively  TLS configuration Optionally  it s possible further refine secure TLS connections handled cluster via tls route property  https    default    type  upstream upstream  app http tls      min_version   note     directive put place when Platform sh supported older versions TLS customers    Currently TLS v1 2 supported  Support TLS v1 3 will added near future  Setting minimum version TLS will cause server automatically reject connections using older version TLS  Rejecting older versions known security vulnerabilities necessary security compliance processes  tls  min_version  TLSv1 2 above configuration will result requests using older TLS versions rejected  Legal values TLSv1 2  Note multiple routes domain different min_versions specified  highest specified will used whole domain  stricttransportsecurity HTTP Strict Transport Security  HSTS  mechanism telling browsers use HTTPS exclusively particular website  toggle site router level without having touch application  configure it s behavior routes yaml  tls  stricttransportsecurity  enabled  true include_subdomains  true preload  true three sub properties stricttransportsecurity property  enabled  true  false  null  Defaults null  false  properties wil ignored  include_subdomains  true false  Defaults false  true  browsers will instructed apply HSTS restrictions subdomains well  preload  true false  Defaults false  true  Google others may add site lookup reference sites ever connected HTTPS  although not browsers will consult list connecting site HTTP switch HTTPS instructed  Although not part HSTS specification supported browsers  enabled  Strict Transport Security header will always sent lifetime 1 year  Mozilla Developer Network detailed information HSTS  Note  multiple routes domain specify different HSTS settings  entire domain will use shared configuration  Specifically  route domain stricttransportsecurity enabled set false  HSTS will disabled whole domain  Otherwise  will enabled whole domain least one route enabled set true  logic may tricky configure correctly strongly recommend picking single configuration whole domain adding single route  Client authenticated TLS non browser applications  such mobile applications  IoT devices  restricted client list use cases   beneficial restrict access selected devices using TLS  process known client authenticated TLS  functions effectively secure alternative HTTP Basic Auth  default  valid SSL cert issued one common certificate issuing authorities will accepted  Alternatively  restrict access SSL certs issued just certificate authorities specify  including custom authority   The latter generally applicable building mass market IoT device similar   so  set client_authentication required provide list certificates certificate authorities wish allow  tls  client_authentication   require  clientcertificateauthorities   include type  string path  root ca1 crt  include type  string path  root ca2 crt case  certificate files resolved relative  platform directory  Alternatively  certificates specified inline file  tls  client_authentication   require  clientcertificateauthorities         BEGIN CERTIFICATE      Several lines random characters      END CERTIFICATE             BEGIN CERTIFICATE      Several lines different random characters      END CERTIFIC",
        "objectID": "en/configuration/routes/https",
        "weight": 1,
        "toc": true
    },
    {
        "title": "Redirects",
        "uri": "en/configuration/routes/redirects",
        "content": "Whole route redirects Using whole route redirects  define basic routes  platform routes yaml file whose sole purpose redirect  typical use case type route adding removing www  prefix domain  following example shows  https    default    type  redirect to  https   www  default   Partial redirects  platform routes yaml file add partial redirect rules existing routes  https    default          redirects  expires  1d paths    from   to   https   example com      foo      bar   to   https   example com  1  regexp  true format rich works type route  including routes served directly application  Two keys available redirects  expires  optional  duration redirect will cached  Examples valid values include 3600s  1d  2w  3m  paths  paths apply redirections to  rule paths defined its key describing expression match against request path value object describing destination redirect detail handle redirection  value object defined following keys  to  required  relative URL     destination   absolute URL    https   example com    regexp  optional  defaults false  Specifies whether path key interpreted PCRE regular expression  following example  request https   example com foo a b c bar redirect https   example com a b c  https    default    type  upstream redirects  paths     foo      bar   to   https   example com  1  regexp  true Note special arguments statement valid when regexp set true   is_args will evaluate   empty string  args will evaluate full query string  arg_foo will evaluate value query parameter foo  uri will evaluate full URI request  prefix  optional  specifies whether redirect path its children just path itself  Defaults true  not supported regexp true  example  https    default    type  upstream redirects  paths    from   to   https    default  to  prefix  true prefix set true   from will redirect  to  from another path will redirect  to another path  prefix set false  from will trigger redirect   from another path will not  append_suffix  optional  determines suffix carried redirect  Defaults true  not supported regexp true prefix false  redirect append_suffix set false  example  following https    default    type  upstream redirects  paths    from   to   https    default  to  append_suffix  false result  from path suffix redirecting just  to  append_suffix left its default value true   from path suffix redirected  to path suffix  code  optional  HTTP status code  Valid status codes 301  302  307  308  Defaults 302  https    default    type  upstream redirects  paths    from   to   https   example com   code  308   here   to   https   example com there  example  redirects  from use 308 HTTP status code  redirects  here default 302  expires  optional  duration redirect will cached for  Defaults expires value defined directly redirects key  level fine tune expiration individual partial redirects  https    default    type  upstream redirects  expires  1d paths    from   to   https   example com     here   to   https   example com there  expires  2w example  redirects  from set expire one day  redirects  here expire two weeks  Application driven redirects neither above options satisfy redirection needs  implement redirects directly application  sent appropriate caching headers  nearly efficient implementing redirect one two configurations described above  Implementing application driven redirects depends own code framework beyond scope documentation",
        "objectID": "en/configuration/routes/redirects",
        "weight": 3,
        "description": "Managing redirection rules is a common requirement for web applications, especially in cases where you do not want to lose incoming links that have changed or been removed over time. You can manage redirection rules on your Platform.sh projects in two different ways, which we describe here. <br><br>If neither of these options satisfy your redirection needs, you can still implement redirects directly from within your application, which if implemented with the appropriate caching headers would be almost as efficient as using the configuration options provided by Platform.sh.",
        "toc": true
    },
    {
        "title": "Server Side Includes",
        "uri": "en/configuration/routes/ssi",
        "content": "activate deactivate SSI per route basis  platform routes yaml example   https    default     type  upstream upstream   app http  cache  enabled  false ssi  enabled  true  https    default  time php   type  upstream upstream   app http  cache  enabled  true allows include HTML response directives will server  fill in  parts HTML respecting caching setup  example dynamic non cached page include block cached example  index php page have  time php",
        "objectID": "en/configuration/routes/ssi",
        "weight": 4,
        "description": "Server side includes is a powerful mechanism by which you can at the same time leverage caching and serve dynamic content."
    },
    {
        "title": "Configure Services",
        "uri": "en/configuration/services",
        "content": "don t  platform folder  need create one  mkdir  platform touch  platform services yaml example services yaml file  database1  type  mysql 10 1 disk  2048 database2  type  postgresql 9 6 disk  1024 Configuration Name name want give service  free name service wish  lowercase alphanumeric only     warning     support multiple services type  you 3 different MySQL instances   changing name service  services yaml  will interpreted destroying existing service creating new one  will data service disappear forever  Remember always back environment important data modifying file  Type type service  It s using format type version  specify version number not available  you ll error when pushing changes  Validating configuration files  E  Error parsing configuration files  services mysql type   mysql 5 6  not valid service type  Service types supported versions include       Disk disk attribute size persistent disk  in MB  allocated service  example  current default storage amount per project 5GB  meaning 5120MB  distribute application  as defined  platform app yaml  its services  memory resident only services memcache redis  disk key not available will generate error present    note     Currently not support downsizing persistent disk service  Size default  Platform sh will allocate CPU memory resources container automatically  services optimized high CPU load  high memory load  default  Platform sh will try allocate largest  fair  size possible services  given available resources plan  not always optimal  however  customize behavior service application container  application sizing page details  Service timezones services system timezone set UTC default  cases best option  applications it s possible change application timezone  will affect running application itself  MySQL   change per connection timezone running SQL SET time_zone      PostgreSQL   change timezone current session running SQL SET TIME ZONE    Using services order service available application project  Platform sh supports not multiple backends multiple applications project  will need refer  platform app yaml file configures relationships applications services  Endpoints services offer one endpoints  endpoint simply named set credentials used access service applications services project  services support multiple user defined endpoints  not specify one one will created standard defined name  generally name service type  e g   mysql solr   application container  defined  platform app yaml file  always exposes endpoint named http allow router forward requests it  When defining relationships configuration file will always address service      appropriate service page details configure multiple endpoints service supports it  Connecting service Once service running exposed relationship  its appropriate credentials  host name  username appropriate  etc   will exposed PLATFORM_RELATIONSHIPS environment variable  structure documented appropriate service s page  along sample code connect application  Note different applications manage configuration differently so exact code will vary one application another  aware keys PLATFORM_RELATIONSHIPS structure fixed values hold may change deployment restart  hard code connection credentials service application  re check environment variable every time script application starts  Access database services available within cluster  security reasons cannot accessed directly  However  accessed SSH tunnel  two ways so   The example uses MariaDB process largely identical service   Obtaining service credentials either case  will need service credentials  that  run platform relationships  will give output similar following  redis  service  rediscache ip  246 0 82 19 cluster  jyu7waly36ncj master 7rqtwti host  redis internal rel  redis scheme  redis port  6379 database  username  user scheme  mysql service  mysqldb ip  246 0 80 37 cluster  jyu7waly36ncj master 7rqtwti host  database internal rel  mysql path  main query  is_master  true password     port  3306 indicates database relationship accessed host database internal  user user  empty password  path key contains database name  main  values ignored    note     When using default endpoint MySQL MariaDB  password usually empty  will filled define custom endpoints  one user port access tightly restricted anyway lack password does not create security risk  Open SSH tunnel directly first option open SSH tunnel services  so Platform sh CLI  so    platform tunnel open SSH tunnel opened port 30000 relationship  redis SSH tunnel opened port 30001 relationship  database Logs written to     platformsh tunnels log List tunnels with  platform tunnels View tunnel details with  platform tunnel info Close tunnels with  platform tunnel close tunnel open command will connect relationships defined  platform app yaml file local ports  starting 30000  connect ports localhost using program choice  example  connect localhost 30001  database name main  username user empty password  platform tunnels command will list open tunnels                                                                       Port   Project   Envir",
        "objectID": "en/configuration/services",
        "weight": 3,
        "description": "Platform.sh allows you to completely define and configure the topology and services you want to use on your project.<br><br>Unlike other PaaS services, Platform.sh is <b>batteries included</b> which means that you don't need to subscribe to an external service to get a cache or a search engine. And that those services are managed. When you back up your project, all of the services are backed-up. <br><br>Services are configured through the <code>.platform/services.yaml</code> file you will need to commit to your Git repository. This section describes specifics you might want to know about for each service.",
        "toc": true,
        "sidebarTitle": "Services (services.yaml)",
        "layout": "single"
    },
    {
        "title": "Elasticsearch (Search Service)",
        "uri": "en/configuration/services/elasticsearch",
        "content": "Supported versions      Deprecated versions following versions available not receiving security updates upstream  so use not recommended  will removed point future       Relationship format exposed  PLATFORM_RELATIONSHIPS environment variable                 Usage example  platform services yaml                  platform app yaml                 use service configuration file application something like                                                                                                                 note     When create index Elasticsearch  not specify numberofshards numberofreplicas settings Elasticsearch API call  values will set automatically based available resources  Plugins Elasticsearch 2 4 later services offer number plugins  enable them  list configuration plugins key services yaml file  so  search  type   elasticsearch 7 2  disk  1024 configuration  plugins  analysis icu lang python example you d ICU analysis plugin Python script support plugin  publicly available plugin need not listed here  please contact support team  Available plugins complete list official Elasticsearch plugins enabled    Plugin   Description   2 4   5 2   5 4   6 5   7 2                                                                                                                                                         analysis icu   Support ICU Unicode text analysis                         analysis nori   Integrates Lucene nori analysis module Elasticsearch                   analysis kuromoji   Japanese language support                         analysis smartcn   Smart Chinese Analysis Plugins                         analysis stempel   Stempel Polish Analysis Plugin                         analysis phonetic   Phonetic analysis                         analysis ukrainian   Ukrainian language support                       cloud aws   AWS Cloud plugin  allows storing indices AWS S3                 delete by query   Support deleting documents matching given query                 discovery multicast   Ability form cluster using TCP IP multicast messages                 ingest attachment   Extract file attachments common formats  such PPT  XLS  PDF                        ingest user agent   Extracts details user agent string browser sends its web requests                       lang javascript   Javascript language plugin  allows use Javascript Elasticsearch scripts                   lang python   Python language plugin  allows use Python Elasticsearch scripts                     mapper annotated text   Adds support text fields markup used inject annotation tokens index                   mapper attachments   Mapper attachments plugin indexing common file types                     mapper murmur3   Murmur3 mapper plugin computing hashes index time                         mapper size   Size mapper plugin  enables _size meta field                         repository s3   Support using S3 repository Snapshot Restore                     Upgrading Elasticsearch data format sometimes changes versions incompatible ways  Elasticsearch does not include data upgrade mechanism expected indexes regenerated stable data needed  upgrade  or downgrade  Elasticsearch will need use new service scratch  two ways doing that  Destructive services yaml file  change version Elasticsearch service its name  update name  platform app yaml relationships block  When push Platform sh  old service will deleted new one name name created  no data  application reindex data appropriate  approach simple downside temporarily having empty Elasticsearch instance  application may may not handle gracefully  needing rebuild index afterward  Depending size data while  Transitional transitional approach will temporarily two Elasticsearch services  Add second Elasticsearch service new version new name give new relationship  platform app yaml  optionally run configuration allow application populate indexes new service well  Once you re ready cut over  remove old Elasticsearch service relationship  may optionally new Elasticsearch service use old relationship name that s easier application handle  application using new Elasticsearch service  approach benefit without working Elasticsearch instance  downside  requires two running Elasticsearch servers temporarily  will consume resources need adequate disk space  Depending size data may lot disk space",
        "objectID": "en/configuration/services/elasticsearch",
        "weight": 1,
        "description": "Elasticsearch is a distributed RESTful search engine built for the cloud. <br><br>See the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\">Elasticsearch documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "Elasticsearch"
    },
    {
        "title": "Headless Chrome",
        "uri": "en/configuration/services/headless-chrome",
        "content": "Supported versions      Relationship format exposed  PLATFORM_RELATIONSHIPS environment variable     service    headless    ip    169 254 73 96    hostname    3rxha4e2w4yv36lqlypy7qlkza headless service _ eu 3 platformsh site    cluster    moqwtrvgc63mo master 7rqtwti    host    headless internal    rel    http    scheme    http    type    chrome headless 73    port   9222   Requirements Puppeteer requires least Node js version 6 4 0  using async await examples below requires Node 7 6 0 greater  Using Platform sh Config Reader library requires Node js 10 later  languages will necessary upgrade version Node js language containers using Puppeteer  use Node Version Manager NVM change update version available application container following instructions Alternate Node js install documentation  Usage example  platform services yaml                  platform app yaml                 configuration  include Puppeteer dependency package json     dependencies      puppeteer     1 14 0      Using Node js Config Reader library  retrieve formatted credentials connecting headless Chrome Puppeteer  const platformsh   require  platformsh config    let config   platformsh config    const credentials   config credentials  chromeheadlessbrowser    use define browserURL parameter puppeteer connect   within async function  exports takeScreenshot   async function  url    try      Connect chrome headless using pre formatted puppeteer credentials const formattedURL   config formattedCredentials  chromeheadlessbrowser    puppeteer    const browser   await puppeteer connect  browserURL  formattedURL        return browser   catch  e    return Promise reject e        Puppeteer allows application create screenshots  emulate mobile device  generate PDFs  more  find useful examples using headless Chrome Puppeteer Platform sh Community Portal  screenshots using Puppeteer Headless Chrome generate PDFs using Puppeteer Headless Chrome",
        "objectID": "en/configuration/services/headless-chrome",
        "weight": 2,
        "description": "Headless Chrome is a headless browser that can be configured on projects like any other service on Platform.sh. You can interact with the <code>headless-chrome</code> service container using Puppeteer, a Node.js library that provides an API to control Chrome over the DevTools Protocol.<br><br>Puppeteer can be used to generate PDFs and screenshots of web pages, automate form submission, and test your project's UI. You can find out more information about using Puppeteer on <a href=\"https://github.com/GoogleChrome/puppeteer\">GitHub<a> or in their <a href=\"https://pptr.dev/\">documentation<a>.",
        "toc": true
    },
    {
        "title": "InfluxDB (Database service)",
        "uri": "en/configuration/services/influxdb",
        "content": "Supported versions      Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example  platform services yaml                  platform app yaml                 use service configuration file application something like",
        "objectID": "en/configuration/services/influxdb",
        "weight": 3,
        "description": "InfluxDB is a time series database optimized for high-write-volume use cases such as logs, sensor data, and real-time analytics.  It exposes an HTTP API for client interaction.<br><br>See the <a href=\"https://docs.influxdata.com/influxdb/\">InfluxDB documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "InfluxDB"
    },
    {
        "title": "Kafka (Message Queue service)",
        "uri": "en/configuration/services/kafka",
        "content": "Supported versions      Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example   platform services yaml                    platform app yaml                  use service configuration file application something like                                                                   ruby kafka gem Producer require  kafka  kafka   Kafka new   kafka internal 9092    client_id   my application   kafka deliver_message  Hello  World    topic   greetings   Consumer kafka each_message topic   greetings    message  puts message offset  message key  message value end                 The specific inject configuration application will vary  Consult application framework s documentation",
        "objectID": "en/configuration/services/kafka",
        "weight": 4,
        "description": "Apache Kafka is an open-source stream-processing software platform. It is a framework for storing, reading and analyzing streaming data.<br><br>See the <a href\"https://kafka.apache.org/documentation/\">Kafka documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "Kafka"
    },
    {
        "title": "Memcached (Object cache)",
        "uri": "en/configuration/services/memcached",
        "content": "Supported versions      Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example   platform services yaml                  add relationship  platform app yaml file                 using PHP  configure relationship enable PHP memcached extension  platform app yaml   Note memcached extension requires igbinary msgpack well  will enabled automatically   runtime  extensions  memcached Python will need include dependency Memcached library  either via requirements txt file global dependency  global dependency add following  platform app yaml  dependencies  python  python memcached      use service configuration file application something like     codetabs name  Go   type  go   url  https   examples docs platform sh golang memcached          language name  Java   type  java   url  https   examples docs platform sh java memcached          language name  Node js   type  js   url  https   examples docs platform sh nodejs memcached          language name  PHP   type  php   url  https   examples docs platform sh php memcached          language name  Python   type  py   url  https   examples docs platform sh python memcached          endcodetabs                                                                                                                                           Accessing Memcached directly access Memcached service directly simply use netcat Memcached does not dedicated client tool  Assuming Memcached relationship named cache  host name port number obtained PLATFORM_RELATIONSHIPS cache internal 11211  Open SSH session access Memcached server follows  netcat cache internal 11211",
        "objectID": "en/configuration/services/memcached",
        "weight": 5,
        "description": "Memcached is a simple in-memory object store well-suited for application level caching.<br><br>See the <a href=\"https://memcached.org/\">Memcached documentation</a> for more information.<br><br>Both Memcached and Redis can be used for application caching.  As a general rule, Memcached is simpler and thus more widely supported while Redis is more robust.  Platform.sh recommends using Redis if possible but Memcached is fully supported if an application favors that cache service.",
        "toc": true,
        "sidebarTitle": "Memcached"
    },
    {
        "title": "MongoDB (Database service)",
        "uri": "en/configuration/services/mongodb",
        "content": "Supported versions        note     Downgrades MongoDB not supported  MongoDB will update its own datafiles new version automatically cannot downgrade them  want experiment later version without committing use non master environment  Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example  platform services yaml                 minimum disk size MongoDB 512  MB                  PHP   platform app yaml add  runtime  extensions  mongodb  Before PHP 7  use mongo instead   use service configuration file application something like                                                                                                                                        Exporting data straightforward export data MongoDB database open SSH tunnel simply export data directly using MongoDB s tools  First  open SSH tunnel Platform sh CLI  platform tunnel open will open SSH tunnel services current environment  produce output something following  SSH tunnel opened port 30000 relationship  database SSH tunnel opened port 30001 relationship  redis port may vary case  will need obtain user  password  database name relationships array  above  Then  simply connect port locally using mongodump  or favorite MongoDB tools  export data server  mongodump   port 30000  u main  p main   authenticationDatabase main   db main  If necessary  vary  u   p    authenticationDatabase   db flags   shell command piped command compress output redirect specific file  further references please official mongodump documentation  Upgrading upgrade 3 6 version earlier 3 4  successively upgrade major releases until upgraded 3 4  example  running 3 0 image  upgrade first 3 2 upgrade 3 4 upgrade 3 6  details upgrading handle potential application backward compatibility issues  please Release Notes MongoDB",
        "objectID": "en/configuration/services/mongodb",
        "weight": 6,
        "description": "MongoDB is a cross-platform, document-oriented database.<br><br>For more information on using MongoDB, see <a href=\"https://docs.mongodb.com/manual/\">MongoDB's own documentation</a>.",
        "toc": true,
        "sidebarTitle": "MongoDB"
    },
    {
        "title": "MariaDB/MySQL (Database service)",
        "uri": "en/configuration/services/mysql",
        "content": "Supported versions service types mariadb mysql refer MariaDB compatibility reasons  service type oracle mysql refers MySQL released Oracle  Inc  type  MySQL MariaDB otherwise identical rest page refers equally    mariadb   mysql   oracle mysql                                                                                                           note     Downgrades MySQL MariaDB not supported  will update own datafiles new version automatically cannot downgrade them  want experiment later version without committing use non master environment  Deprecated versions following versions available not receiving security updates upstream  so use not recommended  will removed point future    mariadb   mysql   oracle mysql                                                                                                         Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example MariaDB  platform services yaml use mysql service type                 mariadb service type                 Oracle mysql uses oracle mysql service type                 Note minimum disk size mysql oracle mysql 256MB  Despite service type differences  MariaDB Oracle MySQL use mysql endpoint configuration  MariaDB  endpoint does not change whether used mysql mariadb service type                 goes using oracle mysql service type well                 use service configuration file application something like                                                                                                                                          note     MySQL schema names not use system reserved namespace   mysql  information_schema  etc  Multiple databases using version 10 0 later service possible define multiple databases multiple users different permissions  so requires defining multiple endpoints  configuration key service two additional keys  schemas  YAML array listing databases created  not specified  single database named main will created  endpoints  nested YAML array defining different credentials  endpoint may access one schemas  databases   may different levels permission each  valid permission levels are  ro  Using endpoint SELECT queries allowed  rw  Using endpoint SELECT queries INSERT UPDATE DELETE queries allowed  admin  Using endpoint queries allowed  including DDL queries  CREATE TABLE  DROP TABLE  etc    Consider following illustrative example  db  type  mariadb 10 4 disk  2048 configuration  schemas  main legacy endpoints  admin  default_schema  main privileges  main  admin legacy  admin reporter  privileges  main  ro importer  default_schema  legacy privileges  legacy  rw example creates single MySQL MariaDB service named mysqldb  server will two databases  main legacy  will three endpoints created  first  named admin  will full access databases  second  reporter  will SELECT query access main DB no access legacy all  importer user will SELECT INSERT UPDATE DELETE access  but not DDL access  legacy database no access main  given endpoint access multiple databases specify will listed default relationships array  one isn t specified path property relationship will null  may acceptable application knows name database connect to  mean automated tools Platform CLI will not able access database relationship  reason default_schema property always recommended  Once endpoints defined  need expose application relationship  Continuing example  possible corresponding block  platform app yaml  relationships  database   db admin  reports   db reporter  imports   db importer  block defines three relationships  database  reports  imports  They ll available PLATFORM_RELATIONSHIPS environment variable structure documented above  different credentials  use connect appropriate database specified restrictions using whatever SQL access tools language application  no configuration block specified all  equivalent following default  configuration  schemas  main endpoints  mysql  default_schema  main privileges  main  admin either schemas endpoints defined  no default will applied specify full configuration  Adjusting MariaDB configuration version 10 2 later  select few MariaDB configuration properties my cnf file available adjustment  time  maxallowedpacket size available  defaults 16  in MB   Legal values 1 100  db  type  mariadb 10 4 disk  2048 configuration  properties  maxallowedpacket  64 above code will increase maximum allowed packet size  the size query response  64 MB  However  increasing size maximum packet will automatically decrease max_connections value  number connections allowed will depend packet size memory available service  cases leaving value default recommended  Access MariaDB service Assuming MariaDB relationship named database  host name port number obtained PLATFORM_RELATIONSHIPS database internal 3306  Open SSH session run MySQL command line client  mysql  h database internal  P 3306  u user main Outside application container  use Platform CLI platform sql  Exporting data easiest download data MariaDB instance Platform sh CLI  single SQL database  following command will export data using mys",
        "objectID": "en/configuration/services/mysql",
        "weight": 7,
        "toc": true,
        "description": "Platform.sh supports both MariaDB and Oracle MySQL.  While there are some differences at the application level for developers, they function nearly identically from an infrastructure point of view.<br><br>See the <a href=\"https://mariadb.org/learn/\">MariaDB documentation</a> or <a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">MySQL documentation</a> for more information.",
        "sidebarTitle": "MariaDB/MySQL"
    },
    {
        "title": "Network Storage",
        "uri": "en/configuration/services/network-storage",
        "content": "Supported versions       This reference version network storage implementation  not version 3rd party application   Supported regions Network storage service available regions except  eu platform sh us platform sh one require service suggest migrate project one newer regions  such eu 2  us 2  ca  au  fr 1 de 2   Define service First  declare new service services yaml file so                 example creates service named files type network storage  gives 256 MB storage total  Declare mount Second  add following entry mounts list                 block will declare writeable mount application container path my files  will provided files service defined above  source_path specifies path within network service mount points to  often easiest match name mount point itself not required  Note not need add relationship point files service  handled automatically system  application container read write my files path just local writeable mount    note     small performance hit using network mount local mount  cases not noticeable  However  high volume sequential file creation  that is  creating large number small files rapid succession  may significant performance hit  something application does regularly local mount will effective  Multi application usage project contains one application  that is  multiple directories own  platform app yaml files   use network mounts desired  source_path  platform app yaml files files will shared applications  even mount location different  possible one application mount source_path subdirectory application s mount  example  app1                 app2  mounts   process   source  service service  files source_path  uploads incoming  done   source  service service  files source_path  uploads done example  app1 will access entire uploads directory writing web uploads  app2  contrast  will two mounts write to  process done  process mount will refer directory web uploads incoming directory does app1  done mount will refer directory web uploads done directory app1  Worker instances When defining Worker instance important keep mind mount behavior desired  Unless mounts block defined within web workers sections separately  top level mounts block will apply instances  However  local mounts will separate storage area instance service mounts will refer file system  example  name  app type  php 7 2 disk  1024 mounts   network_dir   source  service service  files sourcepath  ourstuff  local_dir   source  local sourcepath  mystuff web  locations       root   public  passthru    index php  workers  queue  commands  start    php worker php case  web instance queue worker will two mount points  networkdir localdir  local_dir mount will independent not connected all  will 1024 MB space  network_dir mount will point network storage space files service  will able read write simultaneously  amount space available will depend disk key specified services yaml  give workers access main application s files  common use case network storage allow CMS driven site use worker access file mounts web serving application  case  needed set necessary file mounts service mounts  example  following  platform app yaml file  fragment  will keep Drupal files directories shared web worker instances keeping Drush backup directory web only  as no need shared    This assumes service named files already defined services yaml   name   app  type   php 7 2  relationships  database   db mysql  hooks      web  locations           disk  1024 mounts  public private files directories network mounts shared web workers   web sites default files   source  service service  files source_path  files  private   source  service service  files source_path  private backup  temp  cache directories Drupal s CLI tools don t need shared  wouldn t hurt anything network shares  however     drush   source  local source_path  drush  tmp   source  local source_path  tmp  drush backups   source  local source_path  drush backups    console   source  local source_path  console Crons run web container  so mounts web container  crons  drupal  spec    20        cmd   cd web   drush core cron  worker defined will 6 mounts  2 will shared web container  4 will local worker  workers  queue  commands  start    cd web    drush queue run myqueue migrate local storage network storage  no automated transferring data one storage type another  However  process fundamentally  just  moving files around disk  so reasonably straightforward  Suppose mount configuration  mounts  web uploads  source  local source_path  uploads want move network storage mount  following approximate steps will so minimum service interruption  1  Add new network storage service  named files  least enough space existing files buffer  may need increase plan s disk size accommodate it  2  Add new mount network storage service non public directory  mounts  new uploads  source  service service  files source_path  uploads  Remember source_path they re different storage services   3  Deploy changes  use rsync copy files local mount network mount   Be careful trailing     rsync  avz web uploads   new uploads  4  Reverse moun",
        "objectID": "en/configuration/services/network-storage",
        "weight": 8,
        "description": "Platform.sh supports internal \"storage as a service\" to provide a file store that can be shared between different application containers.<br><br>The network storage service enables a new kind of <code>mount</code> that refers to a shared service rather than to a local directory.  Any application can use both <code>local</code> and/or <code>service</code> mounts, or neither.",
        "toc": true
    },
    {
        "title": "PostgreSQL (Database service)",
        "uri": "en/configuration/services/postgresql",
        "content": "Supported versions      Deprecated versions following versions available not receiving security updates upstream  so use not recommended  will removed point future       Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example  platform services yaml add                 Add relationship service   platform app yaml                  PHP   platform app yaml add  runtime  extensions  pdo_pgsql use service configuration file application something like                                                                                                                                        Exporting data easiest download data PostgreSQL instance Platform CLI  single SQL database  following command will export data using pg_dump command local file  platform db dump multiple SQL databases will prompt one export  specify one relationship name explicitly  platform db dump   relationship database default file will uncompressed  want compress it  use   gzip   z  option  platform db dump   gzip use   stdout option pipe result command  example  want create bzip2 compressed file  run  platform db dump   stdout   bzip2   dump sql bz2 Importing data easiest load data database pipe SQL dump platform sql command  so  platform sql note     Importing database backup destructive operation  will overwrite data already database    Taking backup database export doing so strongly recommended  Extensions Platform sh supports number PostgreSQL extensions  enable them  list configuration extensions key services yaml file  so  db  type  postgresql 11 disk  1025 configuration  extensions  pg_trgm hstore case will pg_trgm installed  providing functions determine similarity text based trigram matching  hstore providing key value store  Available extensions following extensive list supported extensions  Note cannot currently add custom extensions not listed here  address_standardizer   Used parse address constituent elements  Generally used support geocoding address normalization step  addressstandardizerdata_us   Address Standardizer US dataset example adminpack   administrative functions PostgreSQL autoinc   functions autoincrementing fields bloom   bloom access method   signature file based index  requires 9 6 higher  btree_gin   support indexing common datatypes GIN btree_gist   support indexing common datatypes GiST chkpass   data type auto encrypted passwords citext   data type case insensitive character strings cube   data type multidimensional cubes dblink   connect PostgreSQL databases within database dict_int   text search dictionary template integers dict_xsyn   text search dictionary template extended synonym processing earthdistance   calculate great circle distances surface Earth file_fdw   foreign data wrapper flat file access fuzzystrmatch   determine similarities distance strings hstore   data type storing sets  key  value  pairs insert_username   functions tracking changed table intagg   integer aggregator enumerator  obsolete  intarray   functions  operators  index support 1 D arrays integers isn   data types international product numbering standards lo   Large Object maintenance ltree   data type hierarchical tree like structures moddatetime   functions tracking last modification time pageinspect   inspect contents database pages low level pg_buffercache   examine shared buffer cache pg_freespacemap   examine free space map  FSM  pg_prewarm   prewarm relation data  requires 9 6 higher  pgstatstatements   track execution statistics SQL statements executed pg_trgm   text similarity measurement index searching based trigrams pg_visibility   examine visibility map  VM  page level visibility info  requires 9 6 higher  pgcrypto   cryptographic functions pgrouting   pgRouting Extension  requires 9 6 higher  pgrowlocks   show row level locking information pgstattuple   show tuple level statistics plpgsql   PL pgSQL procedural language postgis   PostGIS geometry  geography  raster spatial types functions postgis_sfcgal   PostGIS SFCGAL functions postgistigergeocoder   PostGIS tiger geocoder reverse geocoder postgis_topology   PostGIS topology spatial types functions postgres_fdw   foreign data wrapper remote PostgreSQL servers refint   functions implementing referential integrity  obsolete  seg   data type representing line segments floating point intervals sslinfo   information SSL certificates tablefunc   functions manipulate whole tables  including crosstab tcn   Triggered change notifications timetravel   functions implementing time travel tsearch2   compatibility package pre 8 3 text search functions  obsolete  available 9 6 9 3  tsmsystemrows   TABLESAMPLE method accepts number rows limit  requires 9 6 higher  tsmsystemtime   TABLESAMPLE method accepts time milliseconds limit  requires 9 6 higher  unaccent   text search dictionary removes accents uuid ossp   generate universally unique identifiers  UUIDs  xml2   XPath querying XSLT Notes not find driver error  Fatal error  Uncaught exception  PDOException  message  could not find driver   means missing pdo_pgsql PHP extension  simply need enable  pl",
        "objectID": "en/configuration/services/postgresql",
        "weight": 9,
        "description": "PostgreSQL is a high-performance, standards-compliant relational SQL database.<br><br>See the <a href=\"https://www.postgresql.org/docs/9.6/index.html\">PostgreSQL documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "PostgreSQL"
    },
    {
        "title": "RabbitMQ (Message Queue service)",
        "uri": "en/configuration/services/rabbitmq",
        "content": "Supported versions 3 5 3 6 3 7 Relationship format exposed  PLATFORM_RELATIONSHIPS environment variable                 Usage example  platform services yaml                  platform app yaml                 use service configuration file application something like                                                                                                                The specific inject configuration application will vary  Consult application framework s documentation   Connecting RabbitMQ local development environment debugging purposes  it s sometimes useful able directly connect service instance  using SSH tunneling  open tunnel  log application container usual  extra flag enable local port forwarding  ssh  L 5672 mq internal 5672   ssh eu platform sh Within SSH session  use following command pretty print relationships  lets username password use  double check remote service s port 5672  php  r  printr jsondecode base64decode  ENV  PLATFORM_RELATIONSHIPS        service running different port  re open SSH session correct port modifying  L flag   L 5672 mq internal   Finally  session open  launch RabbitMQ client choice local workstation  configured connect localhost 5672 using username password found relationship variable  Access management plugin  Web UI  case want access browser based UI  use SSH tunnel  open tunnel  log application container usual  extra flag enable local port forwarding  ssh  L 15672 mq internal 15672   ssh eu platform sh successfully established connection  able open http   localhost 15672 browser  You ll find credentials mentioned above  application container application container currently doesn t include useful utilities connect RabbitMQ with  However  install own adding client dependency  platform app yaml file  example  use amqp utils adding this  dependencies  ruby  amqp utils   0 5 1  Then  when SSH container  simply type amqp  command available manage queues",
        "objectID": "en/configuration/services/rabbitmq",
        "weight": 10,
        "description": "RabbitMQ is an open source message broker software (sometimes called message-oriented middleware) that implements the Advanced Message Queuing Protocol (AMQP).<br><br>See the <a href=\"http://www.rabbitmq.com/documentation.html\">RabbitMQ documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "RabbitMQ"
    },
    {
        "title": "Redis (Object cache)",
        "uri": "en/configuration/services/redis",
        "content": "Supported versions      Deprecated versions following versions available not receiving security updates upstream  so use not recommended  will removed point future         note     Versions 3 0 higher support 64 different databases per instance service  Redis 2 8 configured support single database  Ephemeral Redis redis service type configured serve LRU cache  its storage not persistent  not suitable use except disposable cache  add Ephemeral Redis service  specify  platform services yaml file so                 Data Ephemeral Redis instance stored memory  thus requires no disk space  When service hits its memory limit will automatically evict old cache items according configured eviction rule room new ones  Persistent Redis redis persistent service type configured persistent storage  makes good choice fast application level key value storage  add Persistent Redis service  specify  platform services yaml file so                 disk key required redis persistent tell Platform sh disk space reserve Redis  persistent data  Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 format identical regardless whether it s persistent ephemeral service  Usage example   platform services yaml                  using PHP  configure relationship enable PHP redis extension  platform app yaml  runtime  extensions  redis relationships  rediscache   cache redis  use service configuration file application something like                                                                                                               Multiple databases Redis 3 0 above configured support 64 databases  Redis does not support distinct users different databases so relationship connection gives access databases  use particular database  use Redis select command API library  instance  PHP write   redis  select 0      switch DB 0  redis  set  x    42       write 42 x  redis  move  x   1      move DB 1  redis  select 1      switch DB 1  redis  get  x       will return 42 Consult documentation connection library Redis itself further details  Eviction policy Ephemeral redis service possible select key eviction policy  will control Redis behaves when runs memory cached items needs clear old items room  cache  type  redis 5 0 configuration  maxmemory_policy  allkeys lru default value not specified allkeys lru  will simply remove oldest cache item first  Legal values are  noeviction allkeys lru volatile lru allkeys random volatile random volatile ttl Redis documentation description option  Using redis cli access Redis service Assuming Redis relationship named applicationcache defined  platform app yaml                services yaml                host name port number obtained PLATFORM_RELATIONSHIPS applicationcache internal 6379  Open SSH session access Redis server using redis cli tool follows  redis cli  h applicationcache internal  p 6379 Using Redis handler native PHP sessions Using configuration Redis relationship named sessionstorage   platform services yaml                 platform app yaml relationships  sessionstorage   cache redis  variables  php  session save_handler  redis session save_path   tcp   sessionstorage internal 6379",
        "objectID": "en/configuration/services/redis",
        "weight": 11,
        "toc": true,
        "description": "Redis is a high-performance in-memory object store, well-suited for application level caching.<br><br>See the <a href=\"https://redis.io/documentation\">Redis documentation</a> for more information.<br><br>Platform.sh supports two different Redis configurations: One persistent (useful for key-value application data) and one ephemeral (in-memory only, useful for application caching).  Aside from that distinction they are identical.",
        "sidebarTitle": "Redis"
    },
    {
        "title": "Solr (Search service)",
        "uri": "en/configuration/services/solr",
        "content": "Supported versions      Relationship format exposed   PLATFORM_RELATIONSHIPS  environment variable                 Usage example  platform services yaml                  platform app yaml                 use service configuration file application something like                                                                                                                                        Configuration Solr 4 Solr 4  Platform sh supports single core per server called collection1  want provide own Solr configuration  add core_config key   platform services yaml   search  type  solr 4 10 disk  1024 configuration  core_config   archive    directory parameter points directory Git repository  below  platform  folder  directory needs contain everything Solr needs start core  minimum  solrconfig xml schema xml  example  place  platform solr conf  schema xml file located  platform solr conf schema xml  reference path   search  type  solr 4 10 disk  1024 configuration  core_config   archive  solr conf   Solr 6 later Solr 6 later Platform sh supports multiple cores via different endpoints  Cores endpoints defined separately  endpoints referencing cores  core may its own configuration share configuration  best illustrated example  search  type  solr 8 0 disk  1024 configuration  cores  mainindex  conf_dir   archive  core1 conf  extraindex  conf_dir   archive  core2 conf  endpoints  main  core  mainindex extra  core  extraindex above definition defines single Solr 8 0 server  server 2 cores defined  mainindex  mdash  configuration  platform core1 conf directory  mdash  extraindex  mdash  configuration  platform core2 conf directory  defines two endpoints  main connected mainindex core extra connected extraindex core  Two endpoints may connected core time no reason so  Additional options may defined future  endpoint available relationships definition  platform app yaml  example  allow application talk cores defined above its  platform app yaml file contain following  relationships  solrsearch1   search main  solrsearch2   search extra  is  application s environment include solr1 relationship connects main endpoint  mainindex core  solr2 relationship connects extra endpoint  extraindex core  relationships array look something following     solr1        path    solr mainindex    host    248 0 65 197    scheme    solr    port   8080       solr2        path    solr extraindex    host    248 0 65 197    scheme    solr    port   8080       Configsets even customizability  it s possible define Solr configsets  example  following snippet define one configset  used cores  Specific details overriden individual cores using core_properties  equivalent Solr core properties file  search  type  solr 8 0 disk  1024 configuration  configsets  mainconfig   archive  configsets solr8  cores  english_index  core_properties    configSet mainconfig schema english schema xml arabic_index  core_properties    configSet mainconfig schema arabic schema xml endpoints  english  core  english_index arabic  core  arabic_index example  directory  platform configsets solr8 contains configuration definition multiple cores  two cores created  englishindex uses defined configset  specifically  platform configsets solr6 english schema xml file  arabicindex identical except using  platform configsets solr6 arabic schema xml file  cores exposed its own endpoint  Note not core properties features sense specify core_properties  keys  name dataDir  not supported  may result solrconfig fails work intended  all  Default configuration no configuration specified  default configuration equivalent to  search  type  solr 8 0 configuration  cores  collection1  conf_dir       will pick default Drupal 8 configuration endpoints  solr  core  collection1 Solr 6 x Drupal 8 configuration files reasonably generic work circumstances  explicitly defining core  configuration  endpoint generally recommended  Limitations recommended maximum size configuration directories  zipped  2MB  need monitored ensure don t grow beyond that  zipped configuration directories grow beyond this  performance will decline deploys will become longer  directory archives will compressed string encoded  use bash pipeline echo      tar czf       base64   wc  c    1024 1024    Megabytes inside directory idea archive size  configuration directory collection configuration data  data dictionary  e g  small collections key value sets  best keep size small restrict directory context plain configurations  Including binary data plugin  jar files will inflate archive size  not recommended  Accessing Solr server administrative interface Solr uses HTTP its API admin interface it s possible access admin interface SSH tunnel  platform tunnel open will open SSH tunnel services current environment  give output similar to  SSH tunnel opened port 30000 relationship  solr SSH tunnel opened port 30001 relationship  database Logs written to   home myuser  platformsh tunnels log List tunnels with  platform tunnels View tunnel details with  platform tunnel info Close tunnels with  platform tunnel close example  open http   localhost 30000 ",
        "objectID": "en/configuration/services/solr",
        "weight": 12,
        "description": "Apache Solr is a scalable and fault-tolerant search index.<br><br>Solr search with generic schemas provided, and a custom schema is also supported.<br><br>See the <a href=\"https://lucene.apache.org/solr/6_3_0/index.html\">Solr documentation</a> for more information.",
        "toc": true,
        "sidebarTitle": "Solr"
    },
    {
        "title": "Varnish",
        "uri": "en/configuration/services/varnish",
        "content": "Supported versions      works incoming requests go environment s router first  When using Varnish  Varnish service sits router application server servers       graph LR   classDef classDef nodePrimary fill  145CC6 color white stroke width 1px stroke  145CC6  classDef nodeSecondary fill  EEEDE4 color  171719 stroke width 1px stroke  EEEDE4    chart A web      B router  B     C Varnish  C     D application 1  C     E application 2    style class nodePrimary  class B nodePrimary  class C nodePrimary  class D nodeSecondary  class E nodeSecondary       Configuration Add Varnish service Add following  platform services yaml file                 relationships block  define relationship  application  application container  app  using http endpoint  allows Varnish talk application container  configuration block required  reference VCL file  here config vcl   file name relative  platform directory  Create VCL template file VCL file provide three specific requirements above VCL syntax itself  NOT define vcl_init   function  Platform sh will auto generate function based relationships define  particular  will define  backend  relationship defined services yaml  named relationship  NOT include preamble beginning file  specifying VCL version  will auto generated well  add imports  not std directors  specify backend use vclrecv    single app container relationship backend  it s just single line  want split requests different relationships backends based rule logic doing so incorporated vclrecv   function  absolute bare minimum VCL file is  sub vcl_recv   set req backend_hint   application backend      application name relationship defined services yaml   If relationship named differently  use name instead   multiple applications fronted Varnish instance will need include logic determine application request forwarded  example  varnish  type  varnish 6 0 relationships  blog   blog http  main   app http  configuration  vcl   include type  string path  config vcl config vcl sub vcl_recv    req url      blog      set req backend_hint   blog backend      else   set req backend_hint   main backend        configuration will direct requests URL beginning  blog  path application relationship blog  requests application relationship main  Besides that  VCL file  including vcl_recv   function  arbitrarily complex suit needs project  includes additional include directives appropriate  Varnish documentation details functionality offered Varnish    note     misconfigured VCL file result incorrect  often mysterious confusing behavior  Platform sh does not provide support VCL configuration options beyond basic connection logic documented here  Route incoming requests Varnish enable Varnish now  edit  platform routes yaml file point Varnish service just created  need disable router cache entirely redundant Varnish  example     codesnippet   registry images examples full varnish routes yaml   language  yaml       endcodesnippet                   will map incoming requests Varnish service rather application  Varnish will then  based VCL file  forward requests application appropriate  Modules Platform sh supports number optional modules include VCLs  namely  cookie header saintmode softpurge tcp var vsthrottle xkey use VCL  add import as  import xkey  Circular relationships time Platform sh does not support circular relationships services applications  means cannot add relationship  platform app yaml points Varnish service  so one relationships will skipped connection will not work  limitation may lifted future  Stats endpoint Varnish service offers http stats endpoint  provides access Varnish analysis debugging tools  access it  dedicated app container add following  platform app yaml     codesnippet   registry images examples full varnish app yaml   language  yaml       endcodesnippet    access varnishstats relationship HTTP following paths diagnostic information     returns error generating VCL failed error  config  returns generated VCL  stats  returns output varnishstat  logs  returns streaming response varnishlog Note circular relationship issue noted above cannot done application Varnish forwarding to  will need run separate application container",
        "objectID": "en/configuration/services/varnish",
        "weight": 13,
        "description": "Varnish is a popular HTTP proxy server, often used for caching.  It is usually not needed on Platform.sh, as each project's router provides an HTTP cache already and most more advanced use cases will use a CDN instead, both of which render Varnish redundant.<br><br>However, it is possible to configure a Varnish instance as part of an application if Varnish-specific functionality is needed.",
        "toc": true
    },
    {
        "title": "YAML",
        "uri": "en/configuration/yaml",
        "content": "YAML whitespace sensitive format especially good key value type configuration  used Platform sh  good YAML tutorials online format reasonably self documenting  especially recommend  GravCMS s YAML tutorial Learn YAML Y Minutes following cursory look YAML itself  tutorials above will provide in depth introduction  Basic YAML YAML file text file ends  yaml   Some systems use alternative  yml extension  Platform sh uses four letter extension   consists primarily key value pairs  supports nesting  example  name   app  type   php 7 1  build  flavor   composer  disk  1024 example defines key name value app  key type value php 7 1  key disk value 1024  key build itself nested set key value pairs  one  flavor  whose value composer  Informally  nested values often referenced using dotted syntax  build flavor  format used documentation various places  Keys always strings  may quoted not  Values may strings  numbers  booleans  further nested key value pairs  Alphanumeric strings may quoted not  complex strings  with punctuation  etc   quoted  Numbers not quoted  boolean values true false quoted  quoted values  single quotes     double quotes     valid  Double quotes  however  will interpolate common escape characters  n so forth  reason using single quotes generally recommended unless want escape characters processed rather taken literally  general order keys YAML file does not matter  Neither blank lines  Indentation may number spaces  long consistent throughout file  Platform sh examples convention use four space indentation  Multi line strings case long  multi line strings    character tells YAML parser following  indented lines part string  is  this  hooks  build    set  e cp a txt b txt creates nested property hooks build  value set  e ncp a txt b txt   That is  string line break it   useful primarily hooks  allow user enter small shell scripts within YAML file  Includes YAML allows special  tags  values change meaning  tags may customized individual applications so may vary one system another  main Platform sh  local tag   include  allows external files logically embedded within YAML file  referenced file always relative YAML file s directory  string string type allows external file inlined YAML file though entered multi line string  example  given file disk named build sh  set  e cp a txt b txt following two YAML fragments exactly equivalent  hooks  build    set  e cp a txt b txt hooks  build   include type  string path  build sh primarily useful breaking longer build scripts inlined configuration files separate file easier maintenance  binary binary type allows external binary file inlined YAML file  file will base64 encoded  example  properties  favicon   include type  binary path  favicon ico will reference favicon ico file  will provided Platform sh s management system  yaml Finally  yaml type allows external YAML file inlined file though typed directly  help simplify complex files   platform app yaml file highly customized web locations blocks  yaml type default  meaning may reference file inline without specifying type  example  given file disk named main yaml  root   web  expires  5m passthru    index php  allow  false rules      jpe g png gif svgz  css js map ico bmp eot woff2  otf ttf     allow  true    robots  txt    allow  true    sitemap  xml    allow  true following three location definitions exactly equivalent  web  locations        include  main yaml  web  locations        include type  yaml path   main yaml  web  locations       root   web  expires  5m passthru    index php  allow  false rules      jpe g png gif svgz  css js map ico bmp eot woff2  otf ttf     allow  true    robots  txt    allow  true    sitemap  xml    allow  true  archive custom tag available  archive  specifies value reference directory disk  relative location YAML file  Essentially defines value key  this entire directory   Consider services yaml fragment  mysearch  type  solr 8 0 disk  1024 configuration  conf_dir   archive  solr conf  case  mysearch configuration conf_dir value not string  solr conf   contents solr conf directory  relative services yaml file   Platform sh  used primarily service definitions services yaml provide directory configuration files service  such Solr case   Platform sh will use directive copy entire specified directory management system so deployed specified service",
        "objectID": "en/configuration/yaml",
        "weight": 1,
        "description": "<a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> (YAML Ain't Markup Language) is a human-readable data file format, well suited to human-edited configuration files. Nearly all aspects of your project's build and deploy pipeline are controlled via YAML files.",
        "toc": true
    },
    {
        "title": "Dedicated",
        "uri": "en/dedicated",
        "content": "",
        "objectID": "en/dedicated",
        "weight": -20,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Platform.sh Dedicated cluster specifications",
        "uri": "en/dedicated/architecture",
        "content": "Storage Dedicated cluster comes 50GB storage per environment default  storage intended customer data   databases  search indexes  user uploaded files  etc    subdivided customer wishes  50GB default amount  storage added easily line item contract added anytime project requires  contract renewal point term  Default storage based default SSD block storage offering cloud  Extra provisioned IOPS discussed sales representative  Compatible services   Service   Versions                                                   PHP   5 6  7 0  7 1  ZTS   7 2  ZTS   7 3  ZTS      NodeJS   9 8     MariaDB   10 0 Galera  10 1 Galera  10 2 Galera     RabbitMQ   3 6     Solr   4 10  6 3     ElasticSearch   1 7  2 4  5 2  6 5     Redis   3 2     Memcached   1 4   application will able connect service referencing exact environment variables Grid environment  configuration service will performed team  application configuration code same  services documentation service specific details  Additional information",
        "objectID": "en/dedicated/architecture",
        "weight": 2,
        "toc": true,
        "sidebarTitle": "Architecture",
        "description": "Platform.sh Dedicated clusters are launched into a Triple Redundant configuration consisting of 3 virtual machines (VMs).  This is an N+1 configuration that is sized to withstand the total loss of any one of the 3 members of the cluster without incurring any downtime.<br><br>\n\nEach instance hosts the entire application stack, allowing this architecture superior fault tolerance to traditional N-Tier installations. Moreover, the Cores assigned to production are solely for production.\n"
    },
    {
        "title": "Deployment",
        "uri": "en/dedicated/architecture/deploying",
        "content": "Deploying Production Staging production branch Git repository designated production  staging branch designated staging  code merged branches will automatically trigger rebuild production staging environments  respectively  Dedicated Cluster  defined users environment variables will propagated Dedicated Cluster well  Note no automatic cloning data Dedicated Cluster Development Environment branches Development Environment  Production data may replicated Development Environment manually  master branch available will no impact either production staging environments  Deploys master branch will not trigger rebuild Dedicated Cluster environments  common model use master branch pre integration branch merging code staging  end sprint  Deployment process When deploying Dedicated Cluster process slightly different when working Platform sh Grid  new application image built exact fashion Platform sh Professional  active background tasks cluster  including cron tasks  terminated  cluster  production staging  closed  meaning does not accept new requests  Incoming requests will receive HTTP 500 error  application image three servers replaced new image  deploy hook run one  one  three servers  cluster opened allow new requests  deploy usually takes approximately 30 90 seconds  although highly dependent long deploy hook takes run  During deploy process cluster unavailable  However  nearly Platform sh Dedicated instances fronted Content Delivery Network  CDN   CDNs configured allow  grace period   is  requests origin fail will served existing cache  even cache item stale  strongly recommend configuring CDN grace period longer typical deployment  means anonymous users no interruption service all  Authenticated traffic cannot served CDN will brief interruption  Deployment philosophy Platform sh values consistency availability  acknowledging nearly impossible both  deploy hook may database changes incompatible previous code version unsafe old new code running parallel  on different servers   result data loss  believe minute planned downtime authenticated users preferable risk race conditions resulting data corruption  especially CDN continuing serve anonymous traffic uninterrupted  brief downtime applies changes pushed production branch  Deployments staging development branch no impact production environment will cause no downtime",
        "objectID": "en/dedicated/architecture/deploying",
        "weight": 3,
        "toc": true,
        "sidebarTitle": "Deploying"
    },
    {
        "title": "Platform.sh Development environments",
        "uri": "en/dedicated/architecture/development",
        "content": "Architecture  Development Environments  Default limits Development Environment Dedicated project provides production staging branch linked Dedicated Cluster  master branch  ten  10  additional active environments  number increased needed additional fee  default storage Dedicated contracts 50GB per environment  production  staging  development environment    comprises total storage project inclusive databases  uploaded files  writable application logging directories  search index cores  so on  storage amount development environment will reflect amount Enterprise contract  project may six  6  users associated no additional charge  Additional users may added additional fee  users will access Development Environment Dedicated Cluster  Larger developments environments default  containers development environments  Small  sized  limited traffic needs  resource intensive applications size increased additional fee",
        "objectID": "en/dedicated/architecture/development",
        "weight": 3,
        "sidebarTitle": "Dev Environments",
        "toc": true,
        "description": "Platform.sh Dedicated customers will have a development environment for their project that consists of a Platform.sh Grid project, typically provisioned by the Platform.sh team to reflect the amount of storage in your contract. This environment will provide you with all the DevOps, Continuous Integration, Continuous Deployment, and other workflow tooling of the professional product, but will segregate the performance impacts from your production hardware.\n"
    },
    {
        "title": "Options",
        "uri": "en/dedicated/architecture/options",
        "content": "Staging environments default  staging instance production instance run trio virtual machines  ensures identical configuration incur performance penalty production load generated during QA UAT staging appreciable size  dedicated single node staging machine provisioned application identical software configuration production hardware  reduced hardware specs  gives advantages isolating staging load production hardware having identical software configuration perform UAT  option does not provide bed performance testing physical hardware configuration not production  Multiple applications application deployed Dedicated Cluster corresponds single Git repository Development Environment  Multiple  platform app yaml files not supported  possible host multiple application code bases separate subdirectories subpaths application  such  drupal   api   symfony  etc   controlled single  platform app yaml  not recommended requires additional configuration  One domains may mapped application  experience shown hosting multiple applications common resource pool often bad applications cluster  therefore limit number applications may hosted single Dedicated Cluster  D6 instance  one application supported  D12 larger Dedicated plans multiple applications supported extra cost  application correspond different Development Environment Git repository cannot share data files applications  configuration discouraged  Multiple AZ default configuration Platform sh Dedicated clusters launch single Availability Zone  AZ   few reasons  members cluster communicate via TCP perform DB replication  cache lookup  associated tasks  latency data centers AZs become significant performance liability  Having entire cluster within one AZ ensures latency cluster members minimal  having direct effect perceived end user performance  Network traffic AZs billed  whereas intra AZ traffic not  leads higher costs decreased performance  clients prefer peace mind hosting across multiple AZs  noted multiple AZ configurations not improve contractual 99 99  uptime SLA  nor does standard  single AZ configuration decrease 99 99  uptime SLA  responsible meeting 99 99  uptime SLA no matter what  so multiple AZ deployments considered cases truly appropriate  Multi AZ deployments available select AWS regions  Additional application servers especially high traffic sites add additional application only servers  servers will contain just application code  data storage services  SQL  Solr  Redis  etc   limited standard three  cluster begins look standard N Tier architecture point  horizontal line web application servers front 3 node  N 1  cluster Galera database servers  Speak sales representative costs associated adding additional application servers  configuration requires separate setup default so advanced planning required  SFTP accounts addition SSH accounts  SFTP accounts created custom user password restricted certain directories  directories one writeable mounts  or rather  there s no point assigning read only code directory   no cost configuration  requested time via support ticket  SSH public key based authentication supported SFTP account  Error handling Platform sh Professional  incoming requests held edge router temporarily during deploy  allows site simply  respond slowly  rather offline during deploy  provided deploy time short  a few seconds   Platform sh Dedicated  incoming requests not held during deploy receive 503 error  Dedicated Cluster almost always fronted CDN  CDN will continue serve cached pages during few seconds deploy  so vast majority users no downtime even slowdown  request does pass CDN during deploy not counted downtime covered Service Level Agreement  default  Platform sh will serve generic Platform sh branded error pages errors generated request reaches application   500 errors  400 errors  etc   Alternatively may provide static error page desired error code via ticket us configure CDN  file may static HTML file limited 64 KB size  IP restrictions Platform sh supports project level IP restrictions  whitelisting  HTTP Basic authentication  may configured Development Environment will automatically replicated production staging branches production staging environments  respectively    note     Changing access control will trigger new deploy current environment  However  changes will not propagate child environments until manually redeployed  Remote logging Platform sh Dedicated supports sending logs remote logging service Loggly  Papertrail  Logz io using rsyslog service  optional feature request enabled via support ticket  Once enabled configured application direct log output system syslog facility will replicated remote service configured  When contacting support enable rsyslog  will need  name remote logging service will using  message template format used logging service  specific log files want forwarded logging service  no cost functionality",
        "objectID": "en/dedicated/architecture/options",
        "weight": 5,
        "toc": true
    },
    {
        "title": "Scalability",
        "uri": "en/dedicated/architecture/scalability",
        "content": "Scaling Process Procedure scaling process not automatic requires manual effort  may initiated two ways  customer request via ticket  strongly recommend notifying us ahead time know large traffic event coming  a major product launch  Black Friday  etc   cannot guarantee turnaround time resizing unless given prior notice  High load incidents detected monitoring system  load diagnosed due bot crawler able block  will attempt block it  prevents unnecessary scaling  prevents unnecessary costs you  not bot not blockable  will begin upscaling process detailed above  advised process may 60 90 minutes depending diagnostic steps needed  will open support ticket notify changes  will not wait response upscaling cluster  uptime application top priority reactive scaling events part ensure meet obligations Service Level Agreement  may opt out upsizing service wish  outages caused high traffic will not considered violate Service Level Agreement",
        "objectID": "en/dedicated/architecture/scalability",
        "weight": 4,
        "description": "Part of the original design goal of Platform.sh’s Triple Redundant Architecture was to ensure scalability in times of load spikes outside of the bounds of the original traffic specs.  Because the cluster is configured as an N+1 architecture, we can respond to legitimate traffic events by removing a node from the cluster, upsizing it, returning it into rotation, and then repeating the process on the next node in turn.\n"
    },
    {
        "title": "Platform.sh Dedicated",
        "uri": "en/dedicated/overview",
        "content": "Overview Development Environment Development Environment normal Platform sh Grid account  capabilities workflows Platform sh Professional  one difference master branch will not associated domain thus will  production   Dedicated Cluster Dedicated Cluster three Virtual Machine redundant configuration provisioned Platform sh customer  Every service replicated across three virtual machines failover configuration  as opposed sharding   allowing site remain even one VMs lost entirely  build process application identical Development Environment Dedicated Cluster  However  VMs provisioned Platform sh  not container  service configuration done Platform sh s Customer Success team  large flexibility available via filing support ticket  Additional information",
        "objectID": "en/dedicated/overview",
        "weight": 1,
        "toc": true,
        "sidebarTitle": "Overview",
        "description": "Platform.sh Dedicated is a robust, redundant layer on top of Platform.sh Professional.  It is well-suited for those who like the Platform.sh development experience but need more resources and redundancy for their production environment.  It is available only with an Enterprise contract.<br><br>\n\nPlatform.sh Dedicated consists of two parts: The Development Environment and the Dedicated Cluster.\n"
    },
    {
        "title": "Backups",
        "uri": "en/dedicated/overview/backups",
        "content": "Time frame   Backup retention                                           Days 1 3   Every backup     Days 4 6   One backup per day     Weeks 2 6   One backup per week     Weeks 8 12   One bi weekly backup     Weeks 12 22  One backup per month   Platform sh Dedicated creates backup using snapshots encrypted elastic block storage  EBS  volumes  EBS snapshot immediate  time takes write simple storage service  S3  depends volume changes  Recovery Point Objective  RPO  6 hours  maximum time last backup   Recovery Time Objective  RTO  depends size storage  Large EBS volumes time restore  backups used cases catastrophic failure restored Platform sh  ticket opened customer request restoration  restoration process may few hours  depending infrastructure provider use  ticket  specify want backups files  MySQL  both  Uploaded files will placed SSH accessible directory Dedicated Cluster  MySQL will provided MySQL dump file server  may restore site leisure   We will not proactively overwrite production site backup  responsible determining  safe  time restore backup  selectively restoring individual files desired   Customers welcome own backups using standard tools  mysqldump  rsync  etc   own leisure",
        "objectID": "en/dedicated/overview/backups",
        "weight": 4,
        "description": "Platform.sh takes a byte-for-byte snapshot of Dedicated production environments every six (6) hours.  They are retained on a sliding scale, so more recent time frames have more frequent backups.\n"
    },
    {
        "title": "Differences from Platform.sh on the Grid",
        "uri": "en/dedicated/overview/grid",
        "content": "PHP Platform sh Dedicated comes pdo  apcu  curl  gd  imagick  ldap  mcrypt  mysqli  redis  soap  opcache extensions enabled default  addition  enable enchant  gearman  geoip  gmp  http  pgsql  pinba  pspell  recode  tidy  xdebug  oci8  PHP5 6 only   extension pre existing package Debian Apt repository desired  Please request extensions via ticket  Custom php ini files not supported Platform sh Dedicated  However  PHP options changed runtime available  example memory limit changed using iniset  memorylimit   1024M    PHP options change via support ticket include  maxexecutiontime maxinputtime maxinputvars memory_limit postmaxsize request_order uploadmaxfilesize Xdebug Platform sh runs second PHP FPM process Dedicated clusters Xdebug enabled  used request includes appropriate Xdebug header  means it s safe Xdebug  always on   will ignored requests  obtain key will need file ticket support team provide you  Staging Production separate keys  Set key Xdebug helper browser  whenever Xdebug enabled request will use alternate development PHP FPM process Xdebug  Cron tasks may interrupted deploys Platform sh Grid projects  running cron task will block deployment until complete  Platform sh Dedicated  however  deploy will terminate running cron task  Specifically  when deploy either Production Staging begins  active cron tasks sent SIGTERM message so terminate gracefully needed  running 2 seconds later SIGKILL message will sent forcibly terminate process  reason  it s best ensure cron tasks receive SIGTERM message terminate gracefully  Configuration   change management configuration parameters Dedicated clusters cannot managed via YAML configuration files  parameters will need open support ticket change applied  Further   platform routes yaml  platform services yaml files not automatically apply  will apply development environments not staging production instances  existing service upgrades new service additions staging production will require support ticket  possible run different configurations  but not all  options staging production  cron tasks  default will configuration changes instances unless request otherwise  Specifically  Cron commands Worker instances Service versions configuration  everything  platform services yaml  Route  domain  redirect configuration  everything  platform routes yaml  Application container version Additional PHP extensions Web server configuration  the web locations section  platform app yaml  Cron Cron tasks may run once per minute   They limited once every 5 minutes Platform sh Grid   Cron tasks always interpreted UTC time  Logs Logs available Dedicated Cluster different path Platform sh Grid  Specifically  found in   var log platform   folder contains application  cron  error deployment logs",
        "objectID": "en/dedicated/overview/grid",
        "weight": 5,
        "toc": true,
        "sidebarTitle": "Differences from the Grid",
        "description": "When using Platform.sh Dedicated, a few configuration options and tools function differently from Platform.sh on the Grid, aka the Development Environment.\n"
    },
    {
        "title": "Resource and incident monitoring",
        "uri": "en/dedicated/overview/monitoring",
        "content": "Monitoring systems use known open source tooling collect metrics alert staff metrics goes bounds  use Munin collecting time series data server metrics  dashboarding metrics so monitor trends time  use Nagios point time alerting system operations staff  tools internal Platform sh tools only  third party availability monitoring system configured every Dedicated project  customer subscribed email alerts upon request  Application performance monitoring Platform sh does not provide application level performance monitoring  However  strongly recommend customers leverage application monitoring themselves  Platform sh New Relic reseller New Relic APM available Platform sh Dedicated accounts via partnership New Relic  offer 10  discount off standard list price whatever size cluster running application  New Relic infrastructure monitoring not supported  Blackfire io available model  Availability incident handling procedure Automated monitoring may trigger alerts will page on call engineer  end user may file urgent high priority ticket  PagerDuty will page on call using several methods  on call engineer responds alerts begins triage issue  Cloud infrastructure issues handled customer success team  Application problems escalated application support specialist agreement part customer subscription  Otherwise  returned user may downgraded  When Urgent High issue escalated will page on call application support specialist  Application support may escalate infrastructure issues back Urgent High",
        "objectID": "en/dedicated/overview/monitoring",
        "weight": 2,
        "toc": true,
        "sidebarTitle": "Incident Monitoring",
        "description": "All of our Dedicated clusters are monitored 24/7 to ensure uptime and to measure server metrics such as available disk space, memory and disk usage, and several dozen other metrics that give us a complete picture of the health of your application’s infrastructure.  Alerting is set up on these metrics, so if any of them goes outside of normal bounds an operations engineer can react accordingly to maintain the uptime and performance of your cluster.<br><br>\n\nThese alerts are sent to our support and operations teams, and are not directly accessible to the customer.\n"
    },
    {
        "title": "Onboarding process",
        "uri": "en/dedicated/overview/onboarding",
        "content": "On Boarding new Dedicated client three phase process begins moment contract closed sales representative  part onboarding service  will continue work Solutions Engineer present during technical discovery analysis during pre sales phase  During entire on boarding process  Solutions Engineer available assist questions prioritize tickets may submitted help desk",
        "objectID": "en/dedicated/overview/onboarding",
        "weight": 3,
        "sidebarTitle": "Onboarding"
    },
    {
        "title": "Security & Data privacy",
        "uri": "en/dedicated/overview/security",
        "content": "Updates  amp  upgrades Platform sh updates core software Dedicated Cluster  operating system  web server  PHP  MySQL  etc   periodically  significant security vulnerability disclosed  updates deployed automatically no additional work required user  attempt maintain parity development environment  not guarantee absolute parity point versions Dedicated environments corresponding development environments  I e  development environment may PHP container running 5 6 30  production environment may lag behind 5 6 22  upgrade point releases request will always upgrade underlying software event security release  Updates application software  PHP code  Javascript  etc   responsibility customer  Project isolation Dedicated Clusters single tenant  three VMs exclusively used single customer Dedicated cluster launched its own isolated network  VPC AWS  equivalent providers   network firewalled incoming connections  ports 22  SSH   80  HTTP   443  HTTPS   2221  SFTP  opened incoming traffic  no exceptions rule  so incoming web service requests  ETL jobs  otherwise will need transact one protocols  Outgoing TCP traffic not firewalled  Outgoing UDP traffic disallowed  Development Environment deploys branch series containers hosted shared underlying VM  customers will generally share VM  However  containers whitelisted connect containers environment  even explicit  relationship  defined user via configuration file  Security incident handling procedure Platform sh become aware security incident  mdash  active past hacking attempt  virus worm  data breach  mdash  senior personnel including CTO will promptly notified  security incident procedures include isolating affected systems  collecting forensic evidence later analysis including byte for byte copy affected system  finally restoring normal operations  Once normal service restored perform root cause analysis determine exactly happened  Reason Outage report may provided customer upon request summarizes incident  cause  steps taken  Platform sh will cooperate relevant law enforcement  inform law enforcement event attempted malicious intrusion  Depending type incident root cause analysis may conducted law enforcement rather Platform sh personnel  Platform sh will endeavor notify affected customers within 24 hours case personal data breach 72 hours case project data breach  European General Data Protection Regulation  GPDR   Platform sh required notify supervising authority within 72 hours discovered breach may result risk rights freedoms individuals  supervising authority French Commission Nationale de l Informatique et des Libert s  Audit trail part security incident process record log steps taken identify  isolate  respond incident  log may include  byte for byte copy affected systems intrusion detected steps taken contain intrusion contact 3rd parties  including law enforcement conclusions reached regarding root cause Encryption AWS AWS EBS Volumes encrypted Platform sh Dedicated sites fully encrypted  Keys managed AWS s KMS  Key Management Service   AWS automatically rotates keys every three years  cases  temporary storage  eg swap  stored unencrypted local storage volumes  Azure default  data encrypted using Microsoft Managed Keys Azure Blobs  Tables  Files Queues",
        "objectID": "en/dedicated/overview/security",
        "weight": 2,
        "toc": true,
        "sidebarTitle": "Security and Privacy"
    },
    {
        "title": "Development",
        "uri": "en/development",
        "content": "",
        "objectID": "en/development",
        "weight": -80,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Accessing your site",
        "uri": "en/development/access-site",
        "content": "Visiting site web web URL s  site listed management console  Access site   found command line  using Platform sh CLI  platform url Generally will two URLs created per route routes yaml file  One HTTPS one HTTP route just redirects HTTPS  using  all  placeholder routes yaml file will more  depending domains configured project  Accessing application SSH interactions Platform sh require SSH key authentication  will need set SSH keys working site  Once that s done  easily access command line application SSH  log environment corresponds current branch  simply type  platform ssh log environment  use  e flag specify environment  application container fully working Linux environment using bash shell  system consists read only file system  either underlying container image built application image   so cannot edit code live  otherwise full system available read peruse  file mounts declared  platform app yaml will writable  Additionally  will logged user web server runs as  means needn t worry common problem editing file command line application resulting inconsistent broken file ownership permissions  Uploading downloading files writable static files application   including uploads  temporary private files   stored mounts  Platform sh CLI list mounts inside application    platform mounts Mounts app drupal  environment master                                                        Path   Definition                                                        web sites default files   shared files files     private   shared files private     tmp   shared files tmp                                                      CLI helps transferring files mount  using mount upload mount download commands  commands use rsync utility  turn uses SSH  example  download files  private  mount    platform mount download   mount private   target   private will add  replace  delete files local directory  private   sure want continue   Y n  Downloading files remote mount  app private  Users alice Projects foo private receiving file list     done sent 16 bytes received 3 73K bytes 2 50K bytes sec total size 1 77M speedup 471 78 time  0 91s download completed successfully  Uploading files mount similar    platform mount upload   mount private   source   private will add  replace  delete files remote mount  private   sure want continue   Y n  Uploading files  Users alice Projects foo private remote mount  app private building file list     done sent 2 35K bytes received 20 bytes 1 58K bytes sec total size 1 77M speedup 745 09 time  0 72s upload completed successfully  Using SSH clients applications protocols run top SSH  including SFTP  scp  rsync  obtain SSH connection details environment either copy Platform sh management console  under  Access site  dropdown  run  platform ssh   pipe will output connection string SSH  including username host current project environment  will look something    app ssh us platform sh  part   username  part host  Enter SSH SFTP client  No password necessary  client will need access SSH private key corresponds public key Platform sh  SFTP SFTP upload download files remote environment  SFTP clients available every operating system  use whichever one works you  SCP SCP simple command line utility copy files remote environment  example  command  scp    platform ssh   pipe   web uploads diagram png   will copy file named diagram png web uploads directory  relative application root  current local directory  Reversing order parameters will copy files Platform sh environment  Consult SCP documentation possible options  Rsync copying files remote environment  rsync best tool available  little complicated use scp  lot efficient  especially simply updating files already partially copied  Platform sh CLI mount upload mount download commands  described above  helpful wrappers around rsync little easier use  However  possible use rsync its own  example  rsync  az    platform ssh   pipe   web uploads    uploads  command will copy files web uploads directory remote environment uploads directory locally  Note rsync sensitive trailing   characters  so may change meaning command  Consult rsync documentation details  migrating exporting guides examples using rsync",
        "objectID": "en/development/access-site",
        "weight": 6,
        "description": "Once you have an environment running, there are many ways to access it to perform needed tasks. The most obvious of course is to view it in a web browser; the available URLs are shown in the Platform.sh management console and on the command line after every Git push.<br><br>By design, the only way to deploy new code is to push to the corresponding branch.  That ensures a consistent, repeatable, auditable application instance at all times.",
        "toc": true
    },
    {
        "title": "CLI (Command Line Interface)",
        "uri": "en/development/cli",
        "content": "Find detailed information setting local development environment  Installation install CLI easily using command  curl  sS https   platform sh cli installer   php find system requirements information installation instructions GitHub  Authentication Platform sh CLI will authenticate Platform sh show projects  Just type command start  platform will asked log via browser  When logged in  list projects appears  along tips getting started  command line tools ready use Platform sh    note     Please consult full documentation CLI Authentication public CLI Github repository further details  Usage CLI uses Platform sh API trigger commands  Branch  Merge     projects  It s useful when work locally simulate local build codebase pushing change Platform sh  Once CLI installed  run platform list available commands  preface command help information use command    platform help domain add Command  domain add Description  Add new domain project Usage  domain add    project             cert           key           chain         name  Arguments  name name domain Options    project project ID   cert path certificate file domain    key path private key file provided certificate    chain path certificate chain file files provided certificate   multiple values allowed    help   h  Display help message   quiet   q  not output message   verbose   v vv vvv  Increase verbosity messages   version   V  Display application version   yes   y  Answer  yes  prompts   no   n  Answer  no  prompts   shell   s  Launch shell CLI features Additional settings control operation Platform sh CLI managed configuration file   platform local project yaml  environment variables  README CLI details  Auto selecting project When shell s working directory inside local checkout project repository  CLI will autodetect project ID environment so don t need list parameters time  home directory  example  need provide project ID argument time    platform project info   project acdefghijkl   environment staging instead result just    cd myproject   platform project info set preferred project ID environment variables PLATFORMPROJECT  PLATFORMBRANCH PLATFORMAPPLICATIONNAME  export PLATFORM_PROJECT acdefghijkl  export PLATFORM_BRANCH staging  platform project info Autocomplete command line Once installed  platform CLI tool provides tab auto completion commands  options  even values  your projects  valid regions     note     system include bash completion package equivalent  not available default OSX  installed via brew  Check home directory ensure file    platformsh autocompletion sh included shell  platform self install will attempt reinstall utility it s needed  Installing CLI Windows 10 multiple ways install CLI Windows 10  Platform sh recommends using Bash Windows  Windows Subsystem Linux   Installing Bash Windows install Bash use CLI Windows 10  64 bit machine  Windows 10 Anniversary Update needed support Git  install Bash Windows 10 Anniversary Edition need to  Activate Developer Mode  Update   Security  Windows Settings  will prompt restart computer  Activate  Windows Subsystem Linux  Beta     Turn Windows features off  Programs Features section Control Panel  Once again  will need restart computer  Start Menu  search program  bash exe   will prompt install Windows Store  Bash installed  read WindowsCentral  Upon starting Bash  will asked choose username  According article  doesn t current username  However  username don t exist  Linux system not able create Linux directory  depending permissions level   therefore recommended use username Linux Windows machine  provided Windows user name isn t  Admin   will not allowed   Once Bash Windows installed  install Platform sh CLI command above  curl  sS https   platform sh cli installer   php",
        "objectID": "en/development/cli",
        "weight": 3,
        "description": "The CLI is the official tool to use and manage your Platform.sh projects directly from your terminal. Anything you can do within the management console can be done with the CLI. Behinds the scenes it uses both the Git interface and our REST API.<br><br>The source code of the CLI is hosted on <a href=\"https://github.com/platformsh/platformsh-cli\">GitHub</a>.",
        "sidebarTitle": "CLI",
        "toc": true,
        "layout": "single"
    },
    {
        "title": "API Tokens",
        "uri": "en/development/cli/api-tokens",
        "content": "Obtaining token Platform sh CLI used CI services automation tools  supports API Token authentication option purpose  API token created management console  Go  User  page account drop down  select  Account Settings  tab   API Tokens   Click  Create API Token  link  may asked reverify password  enter unique application name identify token  creating token will displayed once top page green banner  may view later clicking  view  link next token name  will asked reverify password when viewing token  set token environment variable named PLATFORMSHCLITOKEN system CLI will run  Consult documentation CI system that    note     running CLI commands automated system  including Platform sh cron task  urge use   no wait flag commands may second two avoid blocking process  Machine users security reasons recommend creating dedicated machine user run automation tasks taking backups  renewing SSL certificates triggering source operations  recommend creating unique machine user project automated  human users  every machine user account needs its own unique email address  machine user given restrictive set permissions limited just its needed tasks  Backups  instance  require Admin access no SSH key  checking code CI server run tests require SSH key Reader access  will show logs activity streams separate entry human users  Consult Users documentation information differences access levels  Install CLI Platform sh environment common use case API token allow Platform sh CLI run app container  often via cron hook  API token necessary authentication  CLI will able auto detect current project environment  First  create machine user  see above  invite project  Then  log machine user obtain API token  Set token top level environment variable env PLATFORMSHCLITOKEN either management console via CLI  so  platform variable create  e master   level environment   name env PLATFORMSHCLITOKEN   sensitive true   value  your API token    note     important include env  so expose  PLATFORMSHCLITOKEN its own top level Unix environment variable  rather part  PLATFORM_VARIABLES normal environment variables  Second  add build hook  platform app yaml file download CLI part build process  hooks  build    curl  sS https   platform sh cli installer   php will download CLI known directory   platformsh bin  will added PATH runtime  via  environment file   API token available  CLI will able run authenticated commands  acting user created token  call CLI within shell app container  via cron hook  Note want cron run production environment will need wrap if check  PLATFORM_BRANCH variable  so  crons  backup  spec   0 5        cmd        PLATFORM_BRANCH    master    platform backup create   yes   no wait fi   note     Seriously  please use   no wait CLI commands placed cron hook  Failure so may result long deploy times site downtime",
        "objectID": "en/development/cli/api-tokens",
        "weight": 1,
        "toc": true
    },
    {
        "title": "Sending E-mail",
        "uri": "en/development/email",
        "content": "Sending E Mail default master environment send emails  non master environments  configure outgoing emails via management console  Emails Platform sh sent via SendGrid based SMTP proxy  Platform sh project provisioned SendGrid sub account  SendGrid sub accounts capped 12k emails per month  use  usr sbin sendmail application container send emails assigned SendGrid sub account  Alternatively  use PLATFORMSMTPHOST environment variable use SMTP configuration  not guarantee deliverability emails  not support white labeling them  SMTP proxy intended zero configuration  best effort service  needed  instead use own SMTP server email delivery service provider  case  please bear mind TCP port 25 blocked security reasons  use TCP port 465 587 instead    note     may follow SPF setup guidelines SendGrid improve email deliverability SMTP proxy  However  not support white labeling emails  DKIM not provided standard email handling  meaning DMARC can t set either   Thus  maximum deliverability own mail host engaged  Enabling disabling email Email support enabled disabled per environment  default  enabled master environment disabled elsewhere  toggled management console via command line  so  platform environment info enable_smtp true platform environment info enable_smtp false When SMTP support enabled environment variable PLATFORMSMTPHOST will populated address SMTP host used  When SMTP support disabled environment variable will empty    note     Changing SMTP status will not effect immediately  will need issue new build  not just new deploy  changes effect  Sending email PHP When send email  simply use built in mail   function PHP  PHP runtime configured send email automatically via assigned SendGrid sub account  Note header required  email will not send header missing  Beware potential security problems when using mail   function  arise when using user supplied input fifth   additional_parameters  argument  PHP mail   documentation information  SwiftMailer Symfony  use default SwiftMailer service  recommend following settings app config parameters yaml  parameters  mailer_transport  smtp mailerhost    env PLATFORMSMTP_HOST    mailer_user  null mailer_password  null using file spool facility  will probably need setup read write mount  platform app yaml  example  mounts   app spool   source  local source_path  spool",
        "objectID": "en/development/email",
        "weight": 8,
        "sidebarTitle": "E-mail",
        "toc": true,
        "description": "By default only the master environment can send emails.  For the non-master environments, you can configure outgoing emails via the <a href=\"/administration/web/configure-environment.html#settings\">management console</a>.<br><br>Emails from Platform.sh are sent via a SendGrid-based SMTP proxy.  Each Platform.sh project is provisioned as a SendGrid sub-account. These SendGrid sub-accounts are capped at 12k emails per month.  You can use <code>/usr/sbin/sendmail</code> on your application container to send emails with the assigned SendGrid sub-account. Alternatively, you can use the <code>PLATFORM_SMTP_HOST</code> environment variable to use in your SMTP configuration."
    },
    {
        "title": "Frequently Asked Questions (FAQ)",
        "uri": "en/development/faq",
        "content": "difference Platform  Project Environment  Platform Platform sh infrastructure running projects  project site you re working on  project contain multiple applications deployed own environments  environment standalone copy site  complete code  data  running services  master branch production environment  branch setup otherwise identical testing environment  cancel subscription  want delete project cancel subscription  simply go user profile click  Edit plan  project want delete  click link   delete Platform sh plan   will delete project stop invoicing project  multiple projects  subscription will continue until don t projects left  support MySQL  Platform sh uses MariaDB manage store databases  It s fork MySQL stable interesting features  Does branching environment duplicate services  Yes  Branching environment creates exact copy  snapshot  parent environment  containing files  database  services    local writable file system  Yes  Unlike PaaS providers Platform sh supports non ephemeral storage  When configure application tell us directories want read write  these called mounts   will mounted distributed file system  which transparent you   When back up environment will backed well  When create new staging environment    will cloned rest data  happens push local branch project  push local branch created Git  create call inactive environment  ie  environment not deployed  means won t services attached branch  able convert inactive environment active environment vice versa back environment configuration page using CLI  does Master  the live site  scale  Master gets resources divided service  PHP 40   MySQL 30   Redis 10   Solr 20     Development environment gets Development plan resources  exactly SSHing into  You re logged PHP service  It s read only file system  edit quick fix Platform environment without triggering rebuild  No   PHP service access via SSH read only file system  you ll push fix able test it  when push code  try log self explanatory possible  so Git output output drush make    find back clicking status activity Platform sh management console  Linux distribution Platform sh using  Platform sh built Debian  choose Development plan  use plan production  Development plan provides tools build website  create development profiles wish yourself team  Once project built ready production  choose plan go live  plans listed pricing page  please use tabs YAML files  No  getting weird errors when push  something paramiko    Please validate syntax YAML file  Don t use tabs  fails  contact support  geographic zones does Platform sh cover  Platform leverages power public cloud infrastructures AWS  Microsoft Azure  Huawei Orange  deploy site region close target audience  Why choose  sh extension domain   sh  short version shell  According Wikipedia   computing  shell  user interface access operating system s services  Generally  operating system shells use either command line interface  CLI  graphical user interface  GUI   exactly Platform sh about  Giving developers tools build  test  deploy  run great websites    sh  TLD Saint Helena looks lovely island  whose motto is   Loyal Unshakeable  strive be  IDE Specific Tips MAMP pro  order MAMP work symlinks created Platform sh CLI  add following section Hosts    Advanced called  Customized virtual host general settings   details visit MAMP Pro documentation page  Options FollowSymLinks AllowOverride   note     When specify document root  MAMP will follow symlink substitute actual build folder path  means when rebuild project locally  will need repoint docroot symlink again so will refresh build path  support two factor authentication  Yes do  easy enable  so please go Account Settings Account site  click left tab called Security will propose enable TFA Application",
        "objectID": "en/development/faq",
        "weight": 15,
        "sidebarTitle": "FAQ",
        "toc": true
    },
    {
        "title": "HTTP Headers",
        "uri": "en/development/headers",
        "content": "Request headers Platform sh adds following HTTP headers router give application information connection  stable may examined application necessary  X Forwarded Proto  protocol forwarded application  e g   http    https   X Client IP  remote IP address request  X Client SSL  Set  on  client using SSL connection  otherwise header not added  X Original Route  route  platform routes yaml used currently  e g  https    default    Response headers Platform sh adds number response headers automatically assist debugging connections  headers treated semi private API  not code against them  may inspected help determine Platform sh handled request aid debugging  X Platform Cache  Either HIT MISS indicate router cluster served response its own cache request passed application  X Platform Cluster  ID cluster received request  cluster name formed project ID environment ID  X Platform Processor  ID container generated response  container ID cluster ID plus container name  X Platform Router  ID router served request  router ID processor ID router container  specifically",
        "objectID": "en/development/headers",
        "weight": 7,
        "description": "Platform.sh adds a number of HTTP headers to both inbound and outbound messages.  We do not, however, modify or block existing headers on either request or response.",
        "toc": true,
        "sidebarTitle": "Headers"
    },
    {
        "title": "Set up your local development environment",
        "uri": "en/development/local",
        "content": "Set local development environment Platform sh great tool hosting application during development production  it s naturally not ideal place edit code  can t  fact  file system read only  as be   proper place edit code computer  SSH key already configured account  Git Platform sh CLI installed continuing  Download code don t already local copy project s code  run platform download one  run platform projects list projects account    htdocs   platform projects projects are                                                                                                    ID   Name   URL                                                                                                      project id    New Platform Project   https   eu platform sh   projects  project id                                                                                                    project running platform  id   List project s environments running platform environments  download code using platform  project id   folder name     htdocs   platform  project id  my project Cloning  my project repository     remote  counting objects  11  done  Receiving objects  100   11 11   1 36 KiB   0 bytes s  done  Checking connectivity    done  repository folder  based used  folder name  platform command above  will notice new directory project   platform local  excluded Git  directory contains builds local metadata project needed CLI  Building site locally Run platform build command run build process run Platform sh  will produce _www directory project root symlink currently active build  platform local builds folder  used document root local web server    htdocs my project   platform build Building application myapp  runtime type  php  Beginning build   htdocs my project project make  drupal 7 38 downloaded  drupal patched install redirect on empty database 728702 36 patch  Generated PATCHES txt file drupal platform 7 x 1 3 downloaded  Running post build hooks Symlinking files  shared  directory sites default Build complete application myapp Web root    htdocs my project _www   htdocs my project   aware  course  platform build command will run locally  so require whatever appropriate runtime tools specify  may result packages referenced dependendencies block installed local computer  undesireable  local virtual machine will let create enclosed local development environment won t affect main system  Running code Platform sh supports whatever local development environment wish use  no dependency particular tool so already local development workflow you re comfortable keep using without changes  That s  untethered  option  quick changes  run code locally use services hosted Platform sh  is  site  tethered  Platform sh  approach requires installing less system quite slow communication database cache server will need travel computer Platform sh s servers  Specific documentation available local development tools Lando Docksal  support applications Platform sh supports",
        "objectID": "en/development/local",
        "weight": 4,
        "description": "While Platform.sh is great as a tool for hosting an application during both development and production, it's naturally not the ideal place to edit code.  You can't, in fact, as the file system is read-only (as it should be).  The proper place to edit your code is on your computer.<br><br>You must have an <a href=\"/development/tools.html#ssh\">SSH key</a> already configured on your account, and have both <a href=\"/development/tools.html#git\">Git</a> and the <a href=\"/development/cli.html\">Platform.sh CLI</a> installed before continuing.",
        "toc": true,
        "sidebarTitle": "Local development",
        "layout": "single"
    },
    {
        "title": "Docksal",
        "uri": "en/development/local/docksal",
        "content": "Using Docksal local development Docksal docker based local development tool plays nicely Platform sh  maintained community developers viable option Platform sh projects  Docksal documentation installing setting Docksal system  Docksal will ask create  docksal directory application root  functions similarly  platform app yaml file  safe check directory Git repository Platform sh will simply ignore it  Docksal Fin  fin  command line tool controlling Docksal used interacting Docksal project  information use fin command  type help subcommand available commands options  fin help Using Platform sh CLI within Docksal SECRETPLATFORMSHCLI_TOKEN set use Platform sh CLI within Docksal project  API Token found Platform sh account generated going API Tokens page clicking Create API Token link  will allow interact Platform sh account within CLI container  fin config set   global SECRETPLATFORMSHCLI_TOKEN XXX Pulling Platform sh project Docksal CLI ships Platform sh CLI tool  use tool pull project locally  sure uploaded SSH key Platform sh account  Once done SECRETPLATFORMSHCLI_TOKEN added using above step  set project following instructions  Note  Replace PROJECTID project s ID  found within Platform sh dashboard  Replace PROJECTDIRECTORY name local directory you d project cloned into  not already Platform sh CLI installed locally  use one CLI image  advantage mean tool installed locally therefore one less dependency  fin run cli  platform PROJECTID  e master PROJECTDIRECTORY  already Platform sh CLI installed locally  use instead  platform PROJECTID  e master PROJECTDIRECTORY Initializing Platform sh project start new Docksal project  initialize configuration fin config generate command specify docroot flag  fin config generate   docroot web fin project start web directory one different items set document  different changes time running following will fix this  fin config set docroot XXX   Replacing XXX new document root  Customizing Platform sh project default  Docksal comes configured PHP 7 1 container  Apache 2 4 web container  MySQL 5 6 database container  Additional versions available images set desired versions setting following variables within  docksal docksal env file  Apache Versions 2 2   2 4  WEB_IMAGE  docksal web 2 1 apache 2 2  WEB_IMAGE  docksal web 2 1 apache 2 4  MySQL Version  5 6   5 7   8 0  DB_IMAGE  docksal db 1 2 mysql 5 6  DB_IMAGE  docksal db 1 2 mysql 5 7   DB_IMAGE  docksal db 1 2 mysql 8 0  PHP Versions Available 5 6   7 0   7 1   7 2  CLI_IMAGE  docksal cli 2 5 php5 6   CLI_IMAGE  docksal cli 2 5 php7 0  CLI_IMAGE  docksal cli 2 5 php7 1   CLI_IMAGE  docksal cli 2 5 php7 2  further create customize  docksal docksal yml file within project  docker compose file customized needed application  customizations specific certain applications  Docksal documentation extending stock images  Downloading MySQL data Platform sh Docksal cases  downloading data Platform sh loading project straightforward  following commands  run application root  will download compressed database backup load local Docksal database container  fin platform db dump   gzip  f  tmp database sql gz fin exec  zcat    tmp database sql gz   mysql  u user  puser  h db default  Connecting Projects Database importing database project next step connecting database server  following information used setting connection application  Key   Value            DB Name   default Username   user Password   user Host   db Port   3306 exporting tutorial information use rsync",
        "objectID": "en/development/local/docksal",
        "weight": 4
    },
    {
        "title": "Lando",
        "uri": "en/development/local/lando",
        "content": "Using Lando local development Lando container based local development toolchain plays nicely Platform sh  maintained Tandem  3rd party agency  viable option Platform sh projects  Lando documentation installing setting Lando system  Lando will ask create  lando yml file application root  functions similarly  platform app yaml file   Note different file extension   safe check file Git repository Platform sh will simply ignore it  application one specific  recipe  available Lando  use directly  lando yml file  customized further needed application  customizations specific certain applications   lando yml configuration particular  recommend  Name application  platform app yaml  name  app Use recipe appropriate application  recipe  drupal8 config  Lando defaults Apache  Switch nginx match Platform sh  via  nginx Set webroot match  platform app yaml  webroot  web Lando defaults latest MySQL release  Platform sh uses MariaDB  Specify version match what s services yaml  database  mariadb 10 1 Downloading data Platform sh Lando cases downloading data Platform sh loading Lando straightforward  single MySQL database following two commands  run application root  will download compressed database backup load local Lando database container  platform db dump   gzip  f database sql gz lando db import database sql gz Rsync download user files easily efficiently  exporting tutorial information use rsync",
        "objectID": "en/development/local/lando",
        "weight": 3
    },
    {
        "title": "Tethered",
        "uri": "en/development/local/tethered",
        "content": "Tethered Local simplest run project locally use local web server  keep services Platform sh connect SSH tunnel  approach requires little setup  depending speed connection I O intensive application may not performant enough use regularly  will require active Internet connection  course  Quick Start application directory run platform tunnel open    export PLATFORM_RELATIONSHIPS    platform tunnel info   encode    will open SSH tunnel current Platform sh environment expose local environment variable mimics relationships array Platform sh  run application locally  for example running php  d variables_order EGPCS  S localhost 8001 PHP   assuming configured read its configuration Platform sh environment variables  Note Platform sh environment configuration routes application secret value will not available  aware environment variable exists current shell  starting multiple local command shells will need rerun export command above them  Local web server local web server approach will vary depending language  self serving language  Go Node js   simply run program locally  PHP  may install own copy Nginx  or Apache  PHP FPM  simply use built in PHP web server  aware however default PHP web server will ignore environment variables default  will need explicitly instruct read them  so  php  S  d variables_order EGPCS localhost 8001  will start basic web server capable running PHP  serving current directory  port 8001  using available environment variables  PHP manual information  languages recommended install own copy Nginx Apache  virtual machine Docker image viable option  SSH tunneling code running  needs connect its services  that  open SSH tunnel current project    platform tunnel open SSH tunnel opened port 30000 relationship  redis SSH tunnel opened port 30001 relationship  database Logs written to     platformsh tunnels log List tunnels with  platform tunnels View tunnel details with  platform tunnel info Close tunnels with  platform tunnel close connect remote database normally  local    mysql   host 127 0 0 1   port 30001   user  user    password      database  main  specific port service uses not guaranteed  unlikely change unless add additional service connect multiple projects once  cases it s safe add local configuration file application connects to  case  localhost 30001 SQL database localhost 30000 Redis  tunnel s  opened  confirm presence  platform tunnel list show information open tunnel s  with  platform tunnel info close tunnels with  platform tunnel close   note   platform tunnel open command requires pcntl posix PHP extensions  Run php  m   grep  E  posix pcntl  check they re there      don t extensions installed  use platform tunnel single command open one tunnel time  command lets specify local port number  Local environment variables Alternatively  read relationship information directly Platform sh expose locally form  command line  run  export PLATFORM_RELATIONSHIPS    platform tunnel info   encode   will create PLATFORM_RELATIONSHIPS environment variable locally looks exactly one you d Platform sh  pointing locally mapped SSH tunnels  Whatever code looks decodes relationship information variable  which runs Platform sh  will detect use just running Platform sh  Note environment variable set globally so cannot use mechanism load mutiple tethered Platform sh projects time  need run multiple tethered environments once will read relationships information one application code  so     codetabs name  PHP   type  php",
        "objectID": "en/development/local/tethered",
        "weight": 1
    },
    {
        "title": "Untethered",
        "uri": "en/development/local/untethered",
        "content": "Untethered Local It s possible run entire site locally computer  performant there s no extra latency connect remote database doesn t require active Internet connection work  However  does require running necessary services  databases  search servers  etc   locally  set however prefer  although Platform sh recommends using virtual machine easier share configuration developers  already development workflow place works you  keep using virtually no changes  synchronize data environment Platform sh  consult documentation service  service type its own native data import export process Platform sh does not that  It s straightforward download user files application using rsync",
        "objectID": "en/development/local/untethered",
        "weight": 2
    },
    {
        "title": "Accessing logs",
        "uri": "en/development/logs",
        "content": "number different log files available depending application container use  Although  var log directory writable  not written directly  write via standard logging mechanisms  application s logging facility  log files trimmed 100 MB automatically  need complete logs  set cron will upload third party storage  Contextual Code made simple well described example achieve it  access log raw access log nginx instance running application container  is  does not include requests return redirect cache hit router  app log log messages generated application will sent file  includes language errors PHP Errors  Warnings  Notices  uncaught exceptions  cron log cron log contains output recent cron executions  no cron hook specified container configuration file will absent  will not exist until first time cron run  deploy log deploy log contains output recent run deploy hook container  no deploy hook file will absent  nginx error log nginx startup log messages will recorded file  rarely needed except when debugging possible nginx configuration errors  file not currently available using platform log command  error log nginx level errors occur once nginx fully started will recorded here  will include HTTP 500 errors missing directories  file types excluded based  platform app yaml file  etc  php access log PHP container  php access log contains record requests PHP service  post_deploy log postdeploy log contains output recent run postdeploy hook container  no post_deploy hook file will absent",
        "objectID": "en/development/logs",
        "weight": 9,
        "toc": true,
        "description": "Logs for various tasks on an application container are available in the <code>/var/log</code> directory. They can be accessed on the normal shell after logging in with <code>platform ssh</code>. Alternatively, they may also be accessed remotely using the <code>platform log</code> command.  The CLI lets you specify which log file to access (the name of the file below minus the <code>.log` extension</code>, as well as view the entire file in a pager, only the most recent lines, and so forth.<br><br>Run <code>platform log --help</code> for complete documentation."
    },
    {
        "title": "Use a private Git repository",
        "uri": "en/development/private-repository",
        "content": "Pull code private Git repository Let s say you re building module  or theme  library     stored private Git repository access to  want use project  Platform sh allows include code dependencies stored external private Git repositories  e g  Drupal  make file  PHP composer json file   grant Platform sh access private Git repository  need add project public SSH key deploy keys Git repository  copy project s public key going Settings tab management console clicking Deploy Key tab left hand side  private repository GitHub  go target repository s settings page  Go Deploy Keys click Add deploy key  Paste public SSH key submit  default  github  deploy keys read only  so don t need worry system pushing code private repository  you re using Drupal example  use private module adding file    Add private repository GitHub projectsmodule_private   module projectsmodule_private    contrib  projectsmodule_private type    git projectsmodule_private branch    dev projectsmoduleprivate url     git github com guguss moduleprivate git    note     file use    git format  ssh       git using non standard port  Using multiple private Git repositories complex projects may repositories want include  GitHub allows associate deploy key single repository  project needs access multiple repositories  choose attach SSH key automated user account  account won t used human  it s called machine user  add machine account collaborator add machine user team access repositories needs manipulate  information available GitHub",
        "objectID": "en/development/private-repository",
        "weight": 10,
        "toc": true,
        "sidebarTitle": "Private repositories"
    },
    {
        "title": "Public IP addresses",
        "uri": "en/development/public-ips",
        "content": "note     IP addresses stable  not guaranteed change  Prior future change  affected customers will receive ample warning  Europe West  eu platform sh  Outbound IPs  54 72 94 105 54 76 137 67 54 76 137 94 Inbound IPs  gw eu platform sh   54 76 137 79 54 76 137 151 54 76 136 188 West 2  eu 2 platform sh  Outbound IPs  52 208 123 9 52 214 63 84 52 30 200 164 Inbound IPs  gw eu 2 platformsh site   34 248 104 12 34 241 191 143 52 210 208 94 West 4  eu 4 platform sh  Outbound IPs  18 200 158 188 18 200 157 200 18 200 184 206 Inbound IPs  gw eu 4 platformsh site   52 215 88 119 52 208 179 40 18 200 179 139 Germany 2  de 2 platform sh   Data Location Guarantee  Outbound IPs  35 246 248 138 35 246 184 45 35 242 229 239 Inbound IP  gw de 2 platformsh site   35 246 248 138 35 246 184 45 35 242 229 239 France 1  fr 1 platform sh  Outbound IPs  90 84 47 148 90 84 46 222 90 84 46 40 Inbound IPs  gw fr 1 platformsh site   90 84 47 148 90 84 46 222 90 84 46 40 United States East  us platform sh  Outbound IPs  54 88 149 31 54 209 114 37 54 210 53 51 Inbound IPs  gw us platform sh   54 210 49 244 54 210 55 162 54 88 225 116 East 2  us 2 platform sh  Outbound IPs  34 238 64 193 52 4 246 137 54 157 66 30 Inbound IPs  gw us 2 platformsh site   34 226 46 235 34 238 11 122 54 89 106 200 Canada Outbound IPs  35 182 24 224 52 60 213 255 35 182 220 113 Inbound IPs  35 182 174 169 35 182 59 77 52 60 219 22 Australia  au platform sh  Outbound IPs  13 55 135 0 13 54 121 225 13 55 215 151 Inbound IPs  gw au platformsh site   13 54 88 239 13 55 140 143 13 54 222 56",
        "objectID": "en/development/public-ips",
        "weight": 14,
        "sidebarTitle": "Public IPs",
        "toc": true,
        "description": "Platform.sh regions reach the outside through a limited number of IP addresses.<br><br>Use the inbound IP addresses if you have a corporate firewall which blocks outgoing SSH connections.  In that case, simply add our IP addresses for inbound traffic below to your whitelist."
    },
    {
        "title": "Using SSH keys",
        "uri": "en/development/ssh",
        "content": "Find Public Private keypair use Linux  probably already keys  private key usually file named    ssh idrsa public key    ssh idrsa pub  Searching public key file  Open command prompt  Run following commands    cd    ssh   ls  a id_rsa id_rsa pub known_hosts authorized_keys find file named id_rsa pub  use Platform sh  don t find existing key  steps create new one next section  Create New Public Private Keypair   note     already SSH keypair  skip step  Create public private keypair    ssh keygen  t rsa  C  youremailaddress example com  ssh keygen generates key pair will ask want save file  Generating public private rsa key pair  Enter file save key   Users yourusername  ssh idrsa   default location fine cases  it s time create passphrase  good  strong passphrase highly recommended  key less useful falls wrong hands  Enter passphrase  empty no passphrase    Type passphrase  Enter passphrase again   Type passphrase again  That s it  Keys generated  results  identification saved  Users yourusername  ssh idrsa  public key saved  Users yourusername  ssh idrsa pub  key fingerprint is  55 c5 d7 a9 1f dc 7a 67 31 70 fd 87 5a a6 d0 69 youremailaddress example com   note     note location public key  you re going need next section  Add SSH key Platform account SSH keys  if not  look section above   need sure Platform copy public key  It s pretty easy add account  First off  you ll need copy public key clipboard  Head user account page Platform sh Accounts page navigate SSH Keys tab  Click Add public key link  Paste key copied earlier  Key  text box  add title like  otherwise will auto generated  Click  Save   That s it  You re set  you ll able use Git command shells Platform sh environment user account authorized work with  SSH Web Server management console header top right screen  click SSH drop down button  Copy SSH URL environment past link terminal  something this    ssh wk5fqz6qoo123 master ssh eu platform sh _ _ _   _    _    _    _ _ _ __               _    _                        _  Welcome Platform  environment master project wk5fqz6qoo123  web wk5fqz6qoo123 master  php    Troubleshoot SSH trying log via SSH  happen    ssh  SSH URL  Permission denied  publickey   Don t panic  It s issue happen following reasons  environment inactive haven t redeployed  i e  git push  environment adding new public key didn t upload public key user profile SSH private key not added ssh agent SSH key files incorrect permissions Check public key sure public key uploaded user account  Check ssh agent Check key properly added SSH agent  authentication agent manages private key  Check SSH agent  Run command ssh add  l terminal    ssh add  l 2048 12 b0 13 83 7f 56 18 9b 78 ca 54 90 a7 ff 12 69  Users nick  ssh id_rsa  RSA  Check file name right   ssh id_rsa example above   Does match private key file  don t private key file  add private key    ssh add path to your key Try again  Specify identity file identity  SSH key  associated Platform sh not default file name  as may explained SSH software manual  example  may append specification one below so SSH software finds correct key  Host platform sh IdentityFile    ssh id_platformsh aware that  above  platform sh stands hostname  different hostname connect Platform sh may specified host line  separated spaces  having trouble  followed steps above  may notice error message similar below attempting SSH platform sh  Hello Name  successfully connected  not access service  xxxxxxxxxxxxxx master   check permissions  Received disconnect 54 210 49 244  14  No auth methods available usually means deployment not committed yet  When new key added  becomes immediately active use Git  use SSH  will not activated until deployment made  easy force create push empty commit    git commit   allow empty  m  force redeploy    git push origin master else fails  generate SSH debug information private key public key look OK don t luck logging in  print debugging information  lines often give clues going wrong  Run SSH command  v option  this    ssh  v  SSH URL  OpenSSH_6 7 8  OpenSSL 1 2 3 1 Sep 2014 debug1  Connecting ssh eu platform sh  54 32 10 98  port 22  debug1  Connection established  debug1  identity file  Users nick  ssh id_rsa type 1     30 lines light reading     debug1  Offering RSA public key   Users nick  ssh id_rsa debug1  Authentications continue  publickey debug1  No authentication methods try  Permission denied  publickey     GITSSHCOMMAND  git  v  git clone  REPO URL  use information one last check private key file  you re stuck  don t hesitate submit support ticket  we ll help solve problem",
        "objectID": "en/development/ssh",
        "weight": 12,
        "toc": true,
        "description": "One of the ways Platform.sh keeps things secure is by using SSH behind the scenes. Users can interact with their environment through a command shell, or push changes to the environment's Git repository, and both of these features rely on SSH.<br><br>You can manage SSH keys through the CLI (see below), or through the SSH keys tab under Account Settings.",
        "sidebarTitle": "Using SSH"
    },
    {
        "title": "Using Git submodules",
        "uri": "en/development/submodules",
        "content": "Clone submodules during deployment Platform sh allows use submodules Git repository  usually listed   gitmodules  file root Git repository  When push via Git  Platform sh will try clone automatically  example   gitmodules  file   submodule  app Oro   path   src Oro url   https   github com orocrm platform git  submodule  src OroPackages src Oro Bundle EntitySerializedFieldsBundle   path   src OroPackages src Oro Bundle EntitySerializedFieldsBundle url   https   github com orocrm OroEntitySerializedFieldsBundle git  submodule  src OroB2B   path   src OroB2B url   https   github com orocommerce orocommerce git When run  git push   output log  Validating submodules  Updated submodule git   github com orocommerce orocommerce  4 references updated  Updated submodule git   github com orocrm platform  229 references updated  Updated submodule git   github com orocrm OroEntitySerializedFieldsBundle  11 references updated  Error when validating submodules following error  Validating submodules  Found unresolvable links  updating submodules  E  Error validating submodules tree   src Oro  Exception  commit 03567c6 not found  due following errors fetching submodules  git github com orocommerce orocommerce git  HangupException  remote server unexpectedly closed connection  Platform sh Git server cannot connect Github via SSH without granted SSH key so  not using SSH URL   git github com      use HTTPS URL instead  https   github com       Use private git repositories When using Git submodules hosted private repositories  using https protocol will fail errors like  GitProtocolError  unexpected http resp 401 https   bitbucket org myusername mymodule git info refs service git upload pack fix this  need to  Change  gitmodules file HTTPS syntax SSH syntax  e g  from   submodule  support mymodule   path   support mymodule url   https   bitbucket org myusername mymodule git to   submodule  support mymodule   path   support mymodule url git bitbucket org myusername mymodule git Add SSH public key Platform sh project settings  Deploy Key  tab Web UI per Private Repository documentation page  will allow Git service pull module remote git service  assumes configured remote git repository allow generating private public key pair  example  Bitbucket documentation",
        "objectID": "en/development/submodules",
        "weight": 11,
        "toc": true,
        "sidebarTitle": "Git submodules"
    },
    {
        "title": "Project templates",
        "uri": "en/development/templates",
        "content": "C   NET Core View C   NET Core documentation       Go View Go documentation       Java View Java documentation       Lisp View Lisp documentation       Node js View Node js documentation       PHP View PHP documentation       Python View Python documentation       Ruby View Ruby documentation",
        "objectID": "en/development/templates",
        "weight": 1,
        "description": "You can initialize your projects using any of our pre-made template repositories.<br><br>You can click the <b>Deploy on Platform.sh</b> button to launch a new project using a template, or you can visit and clone the repository and push to an empty project you have created using the CLI or in the management console."
    },
    {
        "title": "Technical Requirements: Git and SSH",
        "uri": "en/development/tools",
        "content": "Git Git open source version control system utilized Platform sh  change Platform sh project will need committed via Git  Git commit messages environment activity feed management console  getting started  sure installed computer able interact Platform sh          Install Git     Learn Git SSH connect Platform sh Git repository applications services using SSH  SSH requires two RSA keys  private key kept secret user public key stored within Platform sh account keys called public private keypair usually look random lines characters  this  private key       BEGIN RSA PRIVATE KEY      MIIEowIBAAKCAQEAtpw0S4DwDVj2q04mhiIMkhvrYU7Z6hRiNbTFsqg3X7x uYS  dcNrSvT82j jSeYQP3Dsod9GERW dmOuLaFNeiqOStZi6jRSWo41hCOWOFbpBum3 ra1n6nUO1wa 7O5wbgzhUOfnim77oOK0UgkqPArBCNXiNFTUJAvRyVmCtvJOyrqz     20 lines garbage     cPjJ wKBgGd3eZIBK6Ak92u65HYXgY9EcX3vBNP4NsF087uxV4YfrM18KlGf5I87 QGerp3VKaGe0St3ot57GlwCAQUJAf1mit8qDTi0I8MhBe7q2lstXkBvde7GY1gKx Kng4ohG6xHZ OvC9tq7 THwAvleaxgLZN5GyXfAqNylDdZ0LtSjl      END RSA PRIVATE KEY      public key  one long line   ssh rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2nDRLgPANWParTiaGIgySG thTtnqFGI1tMWyqDdfvH 5hL91w2tK9PzaP NJ5hA cOyh30YRFb52Y64toU16Ko5K1mLqNFJajjWEI5Y4VukG6betrWfqdQ7XBr s7nBuDOFQ5 eKbvug4rRSCSo8CsEI1eI0VNQkC9HJWYK28k7KurMdTN7X Z 4vknM4 Rm2bnMk2idoORQgomeZS1p3GkG8dQs c0j b4H7azxnqdcCaR4ahbytX3d49BN0WwE84C ItsnkCt1g5tVADPrab Ywsm FTnGY3cJKKdOAHt7Ls5lfpyyug2hNAFeiZF0MoCekjDZ2GH2xdFc7AX  youremailaddress example com will need SSH public private keypair order interact Platform sh  public key uploaded Platform sh user account  governs authentication Git  SSH sessions  shell access   tools connect Platform sh project  GitHub good walk through creating SSH keypair various operating systems",
        "objectID": "en/development/tools",
        "weight": 2,
        "sidebarTitle": "Tools",
        "toc": true
    },
    {
        "title": "Transferring data to and from a Dedicated cluster",
        "uri": "en/development/transfer-dedicated",
        "content": "Backing staging production files Platform sh automatically creates backup staging production instances Dedicated cluster every six hours  However  useful full restore environment done Platform sh team  times you ll want manual backup yourself  create manual ad hoc backup files staging production environment  use standard rsync command  rsync  avzP   ent platform sh pub static  pub static  will copy files pub static directory production instance pub static directory  relative local directory you re running command  Backing staging production database backup database local system you ll need database credentials use  First  login cluster run following command  echo  PLATFORMRELATIONSHIPS   base64   decode   jsonpp give JSON output containing something this   database         path     main    service     mysqldb    rel     mysql    host     database internal    ip     246 0 80 64    scheme     mysql    cluster     jyu7wavyy6n6q master 7rqtwti    username     user    password         query       is_master    true     port    3306     part want user  password   path   means DB name  Ignore rest  Now  run following command local computer  ssh   ent platform sh  mysqldump   single transaction  u  p  h localhost   gzip    database gz will run mysqldump command server  compress using gzip  stream output file named database gz local computer   If you d prefer  bzip2 xz available   Synchronizing files dev staging production transfer data either staging production environments  either download Platform sh Development environment local system first transfer directly environments using SSH based tools  e g  SCP  Rsync   First  set SSH forwarding default Platform sh domains  run platform ssh master branch checked connect master dev environment  Files easier data transfer  done rsync  rsync  avzP pub static    ent platform sh pub static  Replace pub static path files system  web sites default files   Note rsync picky trailing   characters  Consult rsync documentation done command  Synchronizing database development staging production database copied directly development environment staging production  doing so requires noting appropriate credentials first systems  First  login production environment SSH  ssh   ent platform sh Once there  look database credentials running  echo  PLATFORMRELATIONSHIPS   base64   decode   jsonpp give JSON output containing something this     database         password     abc123    username     projectname    path     projectname    port     3306    scheme     mysql    host     127 0 0 1    query       is_master    true   compression    true         part want host  user  password   path   database name  Ignore rest  Now  separate terminal login development instance using platform ssh  Run echo command above credentials database development instance   The JSON will slightly different again we re interested user  password  host   path  database name   credentials databases construct command will export data dev server write directly Dedicated cluster s server  mysqldump  u  p  h   single transaction   ssh  C   ent platform sh  mysql  u  p  h   will dump data database stream queries will run production database without ever having create intermediary file   C SSH command tells SSH compress connection save time   Be aware  destructive operation overwrites data  Backup first",
        "objectID": "en/development/transfer-dedicated",
        "weight": 13,
        "toc": true,
        "sidebarTitle": "Synching to Dedicated"
    },
    {
        "title": "Troubleshooting",
        "uri": "en/development/troubleshoot",
        "content": "Total disk usage exceeds project maximum One billable parameters project s settings Storage  global storage pool allocated among various services application containers project via disk parameter  sum disk parameters project s YAML config files less equal global project storage number  Error  Resources exceeding plan limit  disk  8192 00MB   5120 00MB  try removing service  add storage plan means allocated  example  disk  4096 MySQL service services yaml disk  4096  platform app yaml application  having minimum default 5GB storage project whole  solution either lower disk parameters within limits 5GB storage  raise global storage parameter project s settings least 10GB  storage billable component project  project s owner effect change  Force redeploy times want trigger redeployment application  done following command  platform redeploy not trigger redeploy builds  Pending  state  will block deployment  Wait builds complete  Clear build cache rare circumstances build cache  used speed build process  may become corrupted  may happen if  example  code downloaded 3rd party language service Packagist NPM service experiencing issues  flush build cache entirely run following command  platform project clear build cache will wipe build cache current project entirely  Naturally next build environment will likely longer cache rebuilds  HTTP responses 502 Bad Gateway 503 Service Unavailable errors indicate application  or application runner  PHP FPM  crashing unavailable  Typical causes include   platform app yaml configuration error process not starting requests not able forwarded correctly  Check web commands start entry passthru configuration correct  amount traffic coming site exceeds processing power application  Certain code path s  application slow timing out  PHP process crashing segmentation fault  see below   PHP process killed kernel out of memory killer  see below   Low disk space suspect running low disk space application container  easiest check log using platform ssh run df command  df numerous options tweak its output  just checking available writable space direct option is  df  h  x tmpfs  x squashfs   grep  v  run shared will show writable mounts system  similar to  Filesystem Size Used Avail Use  Mounted  dev mapper platform syd7waxqy4n5q  master  7rqtwti    app 2 0G 37M 1 9G 2   app tmp  dev mapper platform tmp  syd7waxqy4n5q  master  7rqtwti    app 3 9G 42M 3 8G 2   tmp first entry shows storage device shared disk mounts  one path will shown Mounted disk space reported common defined mounts single pool  example  2 GB total disk allocated app container 2   37 MB  used total defined mounts  second entry operating system temp directory  always size  write directory files not guaranteed persist may deleted deploy  MariaDB database  command platform db size will give approximate disk usage reported MariaDB  However  aware due MySQL MariaDB store pack data number not always accurate  may off 10 percentage points                              Property   Value                               max   2048MB     used   189MB     percent_used   9                              reliable disk usage warnings  strongly recommend customers enable Health notifications projects  will provide push notification choice channel when available disk space service drops low  No space left device During build hook  may run following error depending size application  W   Errno 28  No space left device      cause issue amount disk provided build container deployed  Application images restricted 4 GB during build  no matter writable disk set aside deployed application  build tools  yarn npm  store cache different versions modules  cause build cache grow time beyond maximum 4GB  Try clearing build cache redeploying  cases  will resolve issue  reason application requires 4 GB during build  open support ticket limit increased  disk space available during build caps off 8 GB cases  MySQL lock wait timeout receive MySQL error messages this  SQLSTATE HY000   General error  1205 Lock wait timeout exceeded  means process running application acquired lock MySQL long period time  typically caused one following  multiple places acquiring locks different order  example  code path 1 first locks record locks record B  Code path 2  contrast  first locks record B locks record A  long running background process executed application holds lock until ends  you re using MariaDB 10   use SQL query SHOW FULL PROCESSLIST  G list DB queries waiting locks  Find output following  start debugging  Command  Query Time      State  Waiting table metadata lock Info  SELECT     find active background processes  run ps aufx application container  Also  please sure locks acquired pre defined order released soon possible  MySQL  definer invoker view lack rights use single MySQL user  so not use  DEFINER  Access Control mechanism Stored Programs Views  When creating VIEW  may need explicitly set SECURITY parameter INVOKER  CREATE REPLACE SQL SECURITY INVOKER VIEW view_name SELECT MySQL server gone away Disk space issues Errors  PDO Exception  MySQL server gone away   usually simply resu",
        "objectID": "en/development/troubleshoot",
        "weight": 16,
        "toc": true
    },
    {
        "title": "Variables",
        "uri": "en/development/variables",
        "content": "Type   Definer   Scope   Inheritance   Build   Runtime                                                                                    Application   Application   Application   n a   Yes   Yes     Project   User   Project   n a   Yes   Yes     Environment   User   Environment   Optional   No   Yes     Platform sh   Pre defined   Environment   n a     Yes   may simple strings base64 encoded JSON serialized values  case name collisions  Platform sh provided values override user provided environment variables  override user provided project level variables  override application provided variables   That is  lower items list above precedence   Types Application provided variables Variables may set code  using  platform app yaml file  values course will across environments present Git repository  makes poor fit API keys such  capability mainly define values application expects via environment variable consistent across environments  example  PHP Symfony framework SYMFONY_ENV property users may wish set prod environments ensure consistent build  may used set PHP configuration values  Application provided variables available build time runtime  Project variables Project variables defined user bound whole project  available build time  and therefore build hook  runtime  environments project  New project variables added using CLI  example  following command creates project level variable  foo  value  bar   platform variable create   level project   name foo   value bar Project variables good place store secret information needed build time  credentials private 3rd party code repository  default  project variables will available build time runtime  suppress one   no visible build   no visible runtime flags  want hide certain credentials runtime entirely  example  following  silly  example will define project variable hide build runtime  platform variable create   level project   name foo   value bar   visible build false   visible runtime false Naturally practice you ll want use one other  allow variable visible cases  Project variables may marked   sensitive true  flag will mark variable not readable management console once set  makes somewhat private requests Platform sh CLI will not able view variable  However  will readable within application container variable  Environment variables Environment level variables set management console  using CLI  Environment variables bound specific environment branch  environment will inherit variables its parent environment  unless variable defined name  allows define development variables once  use child environments  instance  create environment variable  foo  value  bar  currently checked environment branch  run    platform variable create   level environment   name foo   value bar will set variable currently active environment  that is  branch checked out   set variable different environment include  e switch specify environment name  two additional flags available environment variables    inheritable   sensitive  Setting   inheritable false will cause variable not inherited child environments  useful setting production only values master branch  allowing environments use project level variable name  Setting   sensitive true flag will mark variable not readable management console once set  makes somewhat private requests Platform sh CLI will not able view variable  However  will readable within application container variable  example  following command will allow set PayPal secret value master branch only  environments will not inherit either project variable name exists no value all  will not readable API    platform variable create   name paypal_id   inheritable false   sensitive true omit variable   value command line above  will prompted enter value interactively  Changing environment variable will cause environment redeployed so gets new value  However  will not redeploy child environments  want new value will need redeploy yourself  Environment variables good place store values apply Platform sh not local development environment  includes API credentials 3rd party services  mode settings application separate  Dev   Prod  runtime toggle  etc  Platform sh provided variables Platform sh provides series variables default  inform application its runtime configuration  important relationship information  tells application connect databases services defined services yaml  always prefixed PLATFORM_  differentiate user provided values  following variables available build time  may used build hook  PLATFORMOUTPUTDIR  output directory compiled languages build time  Will equivalent PLATFORMAPPDIR cases  following variables available runtime build time  may used build hook  PLATFORMAPPDIR  absolute path application directory  PLATFORM_APPLICATION  base64 encoded JSON object describes application  maps content  platform app yaml Git few subkeys  PLATFORMAPPLICATIONNAME  name application  configured  platform app yaml file  PLATFORM_PROJECT  ID project  PLATFORMTREEID  ID tree application built from  It s essentially SHA hash tree Git  need unique ID build whatever reason value use  PLATFORM_VARIAB",
        "objectID": "en/development/variables",
        "weight": 5,
        "description": "Platform.sh allows a high degree of control over both the build process and the runtime environment of a project.  Part of that control comes in the form of <b>variables</b> that are set independently of the project's code base but available either at build or runtime for your code to leverage. Platform.sh also exposes additional information to your application that way, including information like database credentials, the host or port it can use, and so forth.",
        "toc": true
    },
    {
        "title": "Featured Frameworks",
        "uri": "en/frameworks",
        "content": "",
        "objectID": "en/frameworks",
        "weight": -40,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Drupal 7 - Getting Started",
        "uri": "en/frameworks/drupal7",
        "content": "Structure files Platform sh flexible allows structure files wish within Git repository  will build project based files organized  three build modes used  Profile  Platform sh builds project Drupal org does distributions  Project  Platform sh builds file using drush make  don t need Drupal core files nor contributed modules  themes libraries within Git repository  Vanilla  Platform sh builds project Git repository  push Drupal files contributed modules  themes libraries  Profile mode repository contains  profile file  Platform sh builds project profile mode  similar Drupal org does build distributions  Everything repository will copied profiles  name  folder  build mode supports having project make file contributed modules  themes libraries    note     When building profile  need file Drupal core called  project core make  drush files  git  project make project core make my_profile info my_profile install my_profile profile modules  features  myfeature01      custom  mycustommodule      themes  custom  mycustomtheme      libraries  custom  mycustomlibraries      translations      Project mode repository doesn t contain  profile file  contains file called  project make  or even drupal org make   Platform sh builds project using Drush make  Everything repository will copied sites default folder   git  project make modules  features  myfeature01      custom  mycustommodule      themes  custom  mycustomtheme      libraries  custom  mycustomlibraries      translations      Vanilla mode Vanilla mode  Platform sh just takes repository as is without additional reorganization  behavior when no  make  profile file  when build mode set none composer rather drupal  It s best keep docroot separate repository root  allows store private files outside docroot when needed  example  repository layout will likely resemble following   git  private  web  index php      other Drupal core files  sites  all  modules  themes  default  already Drupal 7 site built tar gz download Drupal org  likely best path forward  Configuring Platform sh Drupal ideal  platform app yaml file will vary project project  free customize yours needed  recommended baseline Drupal 7 configuration listed below  found Drupal 7 template project Drupal 7 vanilla template project    note     database Drupal named  database  relationships                 Additional information",
        "objectID": "en/frameworks/drupal7",
        "weight": 1,
        "sidebarTitle": "Drupal 7",
        "toc": true
    },
    {
        "title": "Apache Solr Search",
        "uri": "en/frameworks/drupal7/apachesolr-module",
        "content": "Using Solr module Apache Solr Search Drupal 7 x page configuring Solr module Apache Solr Search  project uses Search API follow instructions Search API  Requirements will need module Apache Solr Search using file  add lines project make  projectsapachesolr   1 8 Configuration Apache Solr Search module allows configuration overridden settings php  Just add following settings platformsh php file   isset  ENV  PLATFORMRELATIONSHIPS        relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     TRUE     empty  relationships  solr          Override search API server settings fetched default configuration  foreach   relationships  solr    endpoint       Solr server s machine name not  solr   update following line   environmentmachinename    solr    environment_url    http        endpoint  host            endpoint  port            endpoint  path     conf  apachesolrdefaultenvironment      environmentmachinename   conf apachesolrenvironments   url      environmenturl        Note Solr server already defined Drupal ideally exported Feature  common machine name used just solr  above  used different name adjust code appropriate  Relationships configuration not name relationship solr  platform app yaml file  adjust name accordingly  Also  multiple Solr cores defined above foreach   loop will not work  likely will want name relationships machine name Solr server map map one individually  file  platform app yaml Solr relationship enabled  snippet  relationships  solr   solrsearch solr",
        "objectID": "en/frameworks/drupal7/apachesolr-module",
        "weight": 8
    },
    {
        "title": "Using Composer Manager",
        "uri": "en/frameworks/drupal7/composer-manager",
        "content": "Composer manager Drupal 7 does not natively support installing packages via Composer  Although Drupal Composer project Drupal 7  projects built using vanilla Drupal download Drush Make  sites built without Drupal Composer want use modules Composer dependences  widely used option Composer Manager module  read only file system  however  specific configuration parameters necessary Platform sh  1  Install patch Composer Manager Install Composer Manager module manner appropriate site  2 patch files needed not committed module yet  you re installing via Drush Make  add appropriate lines  make file  projectscomposer_manager    1 8  projectscomposermanager      https   www drupal org files issues composermanager 2620348 3 patch  projectscomposermanager      https   www drupal org files issues composermanager relative_realpath 2864297 5 patch  you re checking entire codebase Git  so Composer Manager well  download apply two patches issues above commit result  It s important uncheck two  Automatically     options config page admin config system composer manager settings  checked  Drupal tries update composer folder  isn t writable mount  installation composer based modules will fail due writing permissions  2  Configure file locations Composer Manager works using Drush command aggregate module provided composer json files single file  installed via normal Composer command  generated file resulting vendor directory application portion file system  is  not writable file mount  not default configuration Composer Manager will need changed  Add following lines settings php file   conf  composermanagervendor_dir         composer vendor    conf  composermanagerfile_dir         composer   above lines will direct Composer Manager put generated composer json file    composer   autoload Composer based packages    composer vendor directory  paths relative Drupal root  may use location desired provided not writable file mount  provided vendor directory sibling wherever composer json file will be  Then  manually create composer directory place  gitignore file inside it  containing following  commit Git  Exclude Composer dependencies   vendor 3  Update build hook Create build hook  platform app yaml file will install Composer dependencies  hooks  build    Install Composer dependencies  cd composer composer install   no interaction   optimize autoloader   no dev Replace composer whatever path composer directory is  Note using drupal build flavor Drush Make  composer directory may moved directory modules  public sites default  moved back via line build hook  hooks  build    Move Composer directory  back  application root  mv public sites default composer composer Install Composer dependencies  cd composer composer install   no interaction   optimize autoloader   no dev composer install command may further customized desired  4  Generate commit composer   files locally Drupal root local system  run drush composer json rebuild generate aggregated composer json file  Then  change composer directory run composer install yourself  generate composer lock file download dependencies  composer json composer lock files committed repository  vendor directory not be  way  during build Composer command build hook will download exact version dependent packages listed composer lock file  helps keep builds consistent predictable  time new module Composer dependencies added  new version dependent library available  repeat step 4 only",
        "objectID": "en/frameworks/drupal7/composer-manager",
        "weight": 2
    },
    {
        "title": "Customize settings.php",
        "uri": "en/frameworks/drupal7/customizing-settings-php",
        "content": "Customizing settings php applications using drupal build flavor  those based  Drupal 7 example  https   github com platformsh templates drupal7    Platform sh automatically generates settings php file not present will always generate settings local php file  allows Drupal site connected MySQL without additional configuration  wish customize either file  recommend instead using example files provided Drupal 7 project template  two  settings php settings platformsh php  former will automatically include latter  Platform sh specific configuration found settings platformsh php file  will automatically include settings local php file found so will not conflict local development workflow    note   commit settings local php file repository  need add additional configuration specific Platform sh  connecting additional services Redis Solr  changes go settings platformsh php file",
        "objectID": "en/frameworks/drupal7/customizing-settings-php",
        "weight": 4
    },
    {
        "title": "Developing with Drupal",
        "uri": "en/frameworks/drupal7/developing-with-drupal",
        "content": "Developing Drupal Push changes environment Here  we ll code changes environment    note   working Master branch it s supposed production environment  sure you re working environment  example we re sprint1 branch    git checkout sprint1 you re set working branch  start developing website making code changes pushing changes Platform test live  three common ways will making code changes Platform  Add contributed modules  themes  distributions  third party libraries file Create custom code  modules  themes  profiles  libraries  commit Platform codebase Modify services grid configuration Add contributed projects time push commit  Platform sh will rebuild environment run Drush command proper file found  Add Drupal module Drupal module want install project included file  example  want add Drupal Commerce  need add following lines project make    Modules projectsaddressfield    1 0 beta4  projectsaddressfield    contrib  projectsctools    1 3  projectsctools    contrib  projectscommerce    1 8  projectscommerce    contrib  projectsentity    1 2  projectsentity    contrib  projectsrules    2 6  projectsrules    contrib  projectsviews    3 7  projectsviews    contrib  Add Drupal theme You d want add theme  Add following lines project make    Zen Theme projects     zen Add third party library You d want add third party library  example here  we re adding HTML5 Boilerplate library  Add following lines project make    Libraries librarieshtml5bp type     file  librarieshtml5bp url     http   github com h5bp html5 boilerplate zipball v3 0 2stripped  Add custom code commit custom modules  themes libraries  need commit modules  themes libraries folder root Git repository    ls libraries  modules  project make themes  When push code  Platform will build environment move modules  themes  libraries correct location site  usually sites default    Change services configuration change define topology services used environment  modifying configuration files  means you re able define configure services want use  Push changes When you re done  commit changes test online environment    git add     git commit  m  Made changes file     git push will Platform found file starting rebuild environment  When it s completed  changes site clicking View website name Sprint1 environment Platform sh management console    note   Drush processing doesn t create file Git repository  Git repository input process not output  directory structure created connecting via SSH environment  information Access information below title environment Merge code changes Master Once you ve branch changes  you ll want able push changes live environment  Platform sh great button called Merge click will push appropriate changes master  dialog box will appear will provide commands execute future merges command line using Platform sh CLI  Just click  Merge  button again commits made branch will merged master environment  Synchronizing data easiest use Drush sql sync command  You ll need Drush aliases Platform sh site local site  using CLI you ve run platform  platform_id  project  Drush aliases already set up  Drush aliases  depending yours set up   use command similar this    drush sql sync  platform master  platform _local alternate method appropriate larger databases use pipe   stream data  instead making copies    drush  platform master sql dump   drush  platform _local sqlc",
        "objectID": "en/frameworks/drupal7/developing-with-drupal",
        "weight": 1
    },
    {
        "title": "Drush",
        "uri": "en/frameworks/drupal7/drush",
        "content": "Working Drush Drupal 7 Drush command line shell scripting interface Drupal  veritable Swiss Army knife designed life easier spend working hours hacking away command prompt  use CLI set Drush aliases  easily run Drush commands specific remote Platform sh environments  documentation Drush Drupal 8 installation  drush aliases  general information  installation procedure Drupal 7 8  Drush Platform sh automatically build Drupal 7 site using Drush files  allows easily test specific versions  apply patches keep site date  keeps working directory cleaner contains custom code  file called  project make drupal org make  basic file looks this     codesnippet  https   raw githubusercontent com platformsh templates drupal7 master project make   language  ini       endcodesnippet    When building profile  need file Drupal core called  project core make  api   2 core   7 x projectsdrupal   core Generate file existing site want generate file existing site  run    drush make generate project make will output file containing contributed modules  themes libraries    generate command Apply patches apply contributed patches modules  themes libraries within project make  projectsfeatures    2 2  projectsfeatures      https   www drupal org files issues alter_overrides 766264 45 patch  apply self hosted patches  Simply create PATCHES folder root repository add patch follow  projectsuuid    1 0 alpha5  projectsuuid      PATCHES fix non uuid entity load patch  Work DEV version When using module DEV version  best practice always target specific commit ID so you re always building  version  module    CKEditor module  version 7 x 1 15 2 dev projectsckeditor revision     b29372fb446b547825dc6c30587eaf240717695c  projectsckeditor type     git  projectsckeditor branch     7 x 1 x  projectsckeditor    module",
        "objectID": "en/frameworks/drupal7/drush",
        "weight": 5
    },
    {
        "title": "FAQ",
        "uri": "en/frameworks/drupal7/faq",
        "content": "Drupal Frequently Asked Questions  FAQ  name files  order Platform automatically detect file  need call project make  specific file Drupal core called project core make When push changes file  does Platform sh run update  push  Platform sh will rebuild environment download modules file  update function  hook_update  needs run  you ll manually trigger going  update php use deployment hooks automatically run updates  provide robots txt file production  using drupal build mode Drush file  place robots txt file application root  sibling  platform app yaml  will moved appropriate location automatically build process  cases just include file web root normally  non production environments Platform sh automatically blocks web crawlers using X Robots Tag header  disable per environment needed  I m getting PDO Exception  MySQL server gone away  Normally  means problem MySQL server container may need increase storage available MySQL resolve issue  Ballooning MySQL storage caused number items  large number watchdog entries captured  Fix errors generated disable database logging  Cron run regular intervals ensure cache tables cleared out  you re using Drupal Commerce Core   1 10  may  extremely large cache_form table  https   www drupal org node 2057073   Upgrade Commerce Core 1 10 resolve  Why  MySQL cannot connect database server   having problem connecting database server  will need force re deployment database container  so  edit service definition add remove small amount storage push  use name session cookie caching  Drupal sites  name session cookie based hash domain name  means will actually consistent specific website safely used fixed value  rebuild site registry  During migration process  one modules may changed location  result WSOD  white screen death   number errors  fatal otherwise   just plain broken site  remedy situation   registry will need rebuilt  https   www drupal org project registry_rebuild   rebuild Drupal registry Platform sh instance  will need following  First  SSH web container    ssh  SSH URL  Second  execute following commands download  tweak  run registry rebuild    drush dl registry_rebuild 7 x 2 3   destination  app tmp   sed  i  s   definedrupalroot            app  public         app tmp registryrebuild registryrebuild php   cd  app public   php    tmp registryrebuild registryrebuild php use Backup   Migrate  Backup   Migrate module Drupal module provides automated scheduled dumps Drupal site s content  does so form SQL dump and or tar gz archived copy site s file directory  optionally uploaded remote storage service  general B M not necessary when running Platform sh  Platform sh s Backup functionality offers faster  robust easier restore backup  exporting data using Platform sh CLI just effective  If  however  find necessary run B M aware its resource requirements quite high  B M requires great deal memory order create backup  above Drupal s memory requirements  possible B M create backup system s temp folder  PHP runs memory complete sending backup 3rd party cleaning temp file  latter case  full temp disk result other  seemingly unrelated issues inability upload files  find B M failing temp directory filling mysteriously  try increasing PHP memory limit account B M s needs  example  add following  platform app yaml  variables  php  memory_limit  512M insufficient  site may simply large work effectively B M  recommend setting automated scheduled backups instead",
        "objectID": "en/frameworks/drupal7/faq",
        "weight": 12
    },
    {
        "title": "Memcached",
        "uri": "en/frameworks/drupal7/memcached",
        "content": "Using Memcached Drupal 7 x Platform sh recommends using Redis caching Drupal 7 Memcached  Redis offers better performance when dealing larger values Drupal tends produce  However  Memcached available desired fully supported  Requirements Add Memcached service First need create Memcached service   platform services yaml file  add uncomment following  cacheservice  type  memcached 1 4 will create service named cacheservice  type memcached  specifically version 1 4  Expose Memcached service application  platform app yaml file  need open connection new Memcached service  relationships section  add following  relationships  cache   cacheservice memcached  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  cacheservice  endpoint  memcached   named service something different above  change cacheservice that  Add Memcached PHP extension will need enable PHP Memcached extension   platform app yaml file  add following right type block  Additional extensions runtime  extensions  memcached Add Drupal module will need add Memcache module project  using Drush file  add following line project make file  projectsmemcache   1 6 commit   note     commit deploy code continuing  enable module  memcache   module enabled configured settings platformsh php file  Configuration Drupal Memcache module configured via settings platformsh php  Place following end settings platformsh php  Note inline comments  may wish customize further  review README txt file comes memcache module  information possible configuration options  instance  may want consider using memcache locking configuring cache stampede protection  example below intended  most common case     empty  ENV  PLATFORMRELATIONSHIPS       extension_loaded  memcached       relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     true      named memcached relationship something  cache   set here   relationship_name    cache     empty  relationships  relationship_name         lines tell Drupal use memcached backend     Comment just lines need disable reason    fall back default database cache   conf cache_backends     sites all modules contrib memcache memcache inc    conf  cachedefaultclass      MemCacheDrupal    conf  cacheclasscache_form      DrupalDatabaseCache      we re it  use Memcache locking  too   conf  lock_inc      sites all modules contrib memcache memcache lock inc   foreach   relationships  relationship_name   endpoint     host   sprintf   s  d    endpoint  host     endpoint  port      conf memcache_servers     default        using multisite configuration  adapt line include site unique    value   conf  memcachekeyprefix      PLATFORM_ENVIRONMENT",
        "objectID": "en/frameworks/drupal7/memcached",
        "weight": 7
    },
    {
        "title": "Migrating",
        "uri": "en/frameworks/drupal7/migrating",
        "content": "Migrating existing Drupal 7 site Platform sh Once you ve setup code site Platform sh project  will need upload existing database files directories complete site  Import database Drush  preferred  use drush aliases import existing local database Platform  aliases examples  Use CLI s platform drush aliases command find own aliases  drush  platform local sql dump   backupdatabase sql sanitize database prior import Platform sh running  drush  platform _local sql sanitize When you re ready  export local database import remote Platform sh environment  drush  platform local sql dump   localdatabase sql drush  platform master sql cli note   Drush will verify copying overwriting proper  files  folders  so double check information type y continue  step may time  when process completes  visit URL master environment test files properly imported  Without Drush Go Drupal root local machine synchronize files folder remote Platform environment    rsync  r sites default files    SSH URL  public sites default files    note     local files path may depend installation      path URL may vary depending  platform app yaml file specifies root path files mount  Directly server platform sh files folder large fit computer  transfer directly server server  firewall origin server platform sh  use agent forwarding enable direct connection    ssh  A  t  USER   ORIGIN SERVER  ssh  A  t  SSH URL    rsync  a   delete  USER   ORIGIN SERVER   var www drupal sites default files  public sites default files   note   using Mac OS computer  experience issues files non ascii characters don t work transfer Mac OS X uses decomposed form  like  a           form known NFD   not usual composed form       form known NFC used everywhere else   One workaround use direct server to server transfer method mentioned above",
        "objectID": "en/frameworks/drupal7/migrating",
        "weight": 3
    },
    {
        "title": "Multi-site",
        "uri": "en/frameworks/drupal7/multi-site",
        "content": "Multiple Drupal sites single Project Platform sh supports running multiple applications project two Drupal site  But  separate Drupal instances   will assets separate live lives apart better not share database  though could   Note  Drupal instance use multiple databases  just add multiple instances services yaml use db_select  will need override settings php described add databases use db_select switch those  Old Style  Mutlisite  Platform sh Platform sh actively discourages running Drupal  multisite  mode  Doing so eliminates advantages Platform sh offers  isolation  safe testing  so forth  Additionally  dynamic nature domain names created different environments multisite configuration likely complex fragile  recommend running separate projects separate Drupal sites  using one various  single instance  options available Domain Access  Organic Groups  Workbench Access  Using Domain Access course Platform sh supports Domain Access module  supports anything Drupal  multiple sites part project makes sense  dynamic nature routes Platform sh will need implement logic  here replace MYMODULE convenient name own include custom modules Drupal installation       Implements hookdomaindefault_domains       function MYMODULEdomaindefault_domains      domains   array     domains  wipe domain tables      wipe domain tables    routes    array  jsondecode base64decode getenv  PLATFORM_ROUTES        empty  routes     is_array  routes      weight    1  foreach   routes  url     route       route  upstream     drupal     preg_match     https         a z0 9              url   matches     pregmatch    https        a z     default         route  originalurl   matches2       scheme    matches 1    domain_name    matches 2    machine_name    matches2 1    domains  machine_name    array   subdomain      domain_name   sitename     MYMODULEgetsitename  machine_name    scheme      scheme   valid     1   weight      weight     isdefault       machinename     www    1   0    machinename      machinename           return  domains",
        "objectID": "en/frameworks/drupal7/multi-site",
        "weight": 11
    },
    {
        "title": "Redis",
        "uri": "en/frameworks/drupal7/redis",
        "content": "Using Redis Drupal 7 x two options using Redis Drupal Platform sh  either use PhpRedis extension Predis library  PhpRedis requires PHP extension  which provide  therefore faster situations  Predis written entirely PHP so require no PHP extension install locally  cost performance  unsure use  recommend using PhpRedis  Requirements Add Redis service First need create Redis service   platform services yaml file  add uncomment following  rediscache  type  redis 3 0 will create service named rediscache  type redis  specifically version 3 0  Expose Redis service application  platform app yaml file  need open connection new Redis service  relationships section  add following  relationships  redis   rediscache redis  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  rediscache  endpoint  redis   named service something different above  change rediscache that  Add Redis PHP extension you re using PhpRedis option will need enable PHP Redis extension   platform app yaml file  add following right type block  Additional extensions runtime  extensions  redis  Skip part using Predis   Add Drupal module will need add Redis module project  using Drush Make  add lines project make file  projectsredis   3 15 use Predis library  add file  librariespredis type    librariespredis url    https   github com nrk predis archive v1 0 3 tar gz librariespredis   predis librariespredis   libraries Configuration use Redis cache will need set Drupal variables  either settings php file setting Platform Variables directly via management console  general  using settings php file easier  Via settings php configure Drupal 7 use Redis server caching  place following end settings php  include directive settings local php    empty  ENV  PLATFORMRELATIONSHIPS        relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     TRUE     empty  relationships  redis        conf redisclienthost      relationships  redis   host     conf redisclientport      relationships  redis   port     conf  redisclientinterface      PhpRedis    conf cache_backends     sites all modules contrib redis redis autoload inc    conf  cachedefaultclass      Redis_Cache       cache_form  bin assigned non volatile storage   conf  cacheclasscache_form      DrupalDatabaseCache       cache_field  bin transactional   conf  cacheclasscache_field      DrupalDatabaseCache       using Predis  change PhpRedis reference Predis  case sensitive   redis module not installed sites all modules contrib  modify cache_backends line accordingly  Via management console Alternatively  add following environment variables using Platform sh management console  Note  set directory file will need alter variables match  drupal cache_backends    sites all modules contrib redis redis autoload inc      note   Remember tick JSON Value box  Use actual path Redis module case different location  example  sites all modules redis  location used above default when using Drush Platform sh  drupal redisclienthost redis internal drupal cachedefaultclass Redis_Cache drupal cacheclasscache_form DrupalDatabaseCache drupal cacheclasscache_field DrupalDatabaseCache finally  set client interface either PhpRedis Predis  drupal redisclientinterface PhpRedis Predis Verifying Redis running Run command SSH session environment redis cli  h redis internal info  run push new code repository  give baseline activity Redis installation  little memory allocated Redis cache  push code  run command notice allocated memory will start jumping    note   use Domain Access Redis  ensure Redis settings  particularly  conf  cache_backends      included Domain Access settings inc file     Drupal org issue information",
        "objectID": "en/frameworks/drupal7/redis",
        "weight": 6
    },
    {
        "title": "Search API",
        "uri": "en/frameworks/drupal7/search-api-module",
        "content": "Using Solr module Search API Drupal 7 x page configuring Solr module Search API  project uses Apache Solr Search follow instructions Apache Solr Search  Requirements will need add Search API  Search API Solr  https   www drupal org project searchapisolr  modules project  Search API Override module strongly recommended order allow Solr configuration populated settings php  using file  add lines project make  projectsentity   1 8 projectssearch_api   1 20 projectssearchapisolr   1 11 projectssearchapioverride   1 0 rc1 Configuration Search API module includes recommended configuration files use Drupal  Solr configuration page details configure Solr server use Drupal configuration files  Note Drupal 7 version Search API Solr does not include configuration files Solr 6  Drupal 8 version module does  however  work acceptably  customized desired  Search API Override module  listed above  allows Search API configuration overridden settings php  Once enabled  add following settings platformsh php file   isset  ENV  PLATFORMRELATIONSHIPS        relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     TRUE     empty  relationships  solr          Override search API server settings fetched default configuration   conf  searchapioverride_mode      load   foreach   relationships  solr    endpoint     conf  searchapioverride_servers     array   MACHINENAMEOFSOLRSERVER     array   options     array   host      endpoint  host     port      endpoint  port     path            endpoint  path     http_method      POST                  Replace MACHINENAMEOFSOLRSERVER Drupal machine name server want override  solr server already defined Drupal ideally exported Feature  Relationships configuration not name relationship solr  platform app yaml file  adjust name accordingly  Also  multiple Solr cores defined above foreach   loop will not work  likely will want name relationships machine name Solr server map map one individually  file  platform app yaml Solr relationship enabled  snippet  relationships  solr   solrsearch solr",
        "objectID": "en/frameworks/drupal7/search-api-module",
        "weight": 9
    },
    {
        "title": "SimpleSAML",
        "uri": "en/frameworks/drupal7/simplesaml",
        "content": "SimpleSAML SimpleSAMLphp library authenticating PHP based application against SAML server  Shibboleth  Although Drupal modules available authenticate using SimpleSAML additional setup required  following setup assumes you re using drupal build flavor building site Drush Make  not  may need adjust paths configuration basics same  Download library First  download 3rd party SimpleSAMLphp library  When unpack tar gz file will contain directory named simplesamplephp          version number library  Place directory root application  sibling  platform app yaml file  named simplesamplephp   The directory name doesn t really matter removing version number means won t change future updates   drupal build flavor will move directory public sites default  directory during build  rest configuration based behavior  Include SimpleSAML cookies cache key SimpleSAML client uses additional cookies besides Drupal session cookie need whitelisted cache  so  modify routes yaml file route points Drupal site add two additional cookies cache cookies line  end looking approximately this   https    default     type  upstream upstream   app http  cache  enabled  true cookies      SS ESS       Drupal visitor     SimpleSAMLSessionID    SimpleSAMLAuthToken   Commit change Git repository  Expose SimpleSAML endpoint SimpleSAML library s www directory needs publicly accessible  done mapping directly path Application configuration  Add following block web locations section  platform app yaml  web  locations    simplesaml   root   public sites default simplesamlphp www  allow  true scripts  true index  index php will map requests example com simplesaml  simplesamlphp www directory  allowing static files served  PHP scripts execute  defaulting index php  Install simpleSAMLphp Authentication module will need install simpleSAMLphp Authentication module  using Drush easiest so simply add following line project make file  projectssimplesamlphp_auth   2 0 alpha2  Adjust version whatever current   module configuration will depend Identity Provider  IdP   However  module need know location simplesamlphp_auth module  easiest set include following end settings platformsh php file     Set path SimpleSAMLphp library dynamically   conf  simplesamlphpauthinstalldir     DIR     simplesamlphp   Deploy site enable simplesamlphp_auth module  Consult module documentation further information configure module itself  Note not check  Activate authentication via SimpleSAMLphp  checkbox module configuration until rest configuration completed may locked site  Configure SimpleSAML use database SimpleSAMLphp able store its data either disk Drupal database  Platform sh strongly recommends using database  Open file simplesamlphp config config php  contains number configuration properties adjust needed  best edited in place file already includes ample documentation  specifically  auth adminpassword technicalcontact_name technicalcontact_email Others little involved  interest simplicity recommend simply pasting following code snippet end file  will override default values array     Set SimpleSAML log using error_log    Platform sh will    mapped  var log app log file   config  logging handler      errorlog      Set SimpleSAML use metadata directory Git  rather    empty one vendor directory   config  metadata sources         type      flatfile    directory     dirname DIR      metadata          Setup database connection parts SimpleSAML   isset  ENV  PLATFORMRELATIONSHIPS        relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     TRUE   foreach   relationships  database    instance      empty  instance query       dsn   sprintf   s host  s dbname  s    instance  scheme     instance  host     instance  path       config  database dsn      dsn   config  database username      instance  username     config  database password      instance  password     config  store type      sql    config  store sql dsn      dsn   config  store sql username      instance  username     config  store sql password      instance  password     config  store sql prefix      simplesaml            Set salt value Platform sh entropy value  provided purpose   isset  ENV  PLATFORMPROJECT_ENTROPY        config  secretsalt      ENV  PLATFORMPROJECT_ENTROPY      Generate SSL certs  optional  may need generate SSL TLS certificate  depending Identity Provider  IdP   so  generate certificate locally following instructions SimpleSAMLphp documentation  resulting IdP file placed simplesamlphp metadata directory  certificate placed simplesamlphp cert directory   Create needed   add following line simplesamlphp config config php file tell library find certificate   config  certdir     dirname DIR      cert   Deploy Commit changes deploy site  enable simplesamlphp_auth module within Drupal  Consult module documentation further information configure module itself  Note not check  Activate authentication via SimpleSAMLphp  checkbox module configuration until rest configuration completed may locked site  Recovering locked site SimpleSAML misconfigured possible find yourself locked site  will try authenticate against S",
        "objectID": "en/frameworks/drupal7/simplesaml",
        "weight": 10
    },
    {
        "title": "Drupal 8 - Getting Started",
        "uri": "en/frameworks/drupal8",
        "content": "Drupal 8 Composer recommended deploy Drupal 8 Platform sh use Composer  Composer PHP package management suite  supported Drupal 8  and Drupal 7 pinch   unofficial well supported Composer flavor Drupal 8 called Drupal Composer recommend  use Drupal 8 Example Repository select Drupal 8 option when creating new project template  that s will using  create own project directly repository add Platform sh specific configuration files  Note will need add Drupal org Composer repositories composer json not working template  use Drupal Composer  note 3rd party modules  themes  PHP libraries install  Drupal core itself  will not checked repository  specifically excluded Git  gitignore file  will re downloaded when run composer install composer update  Rather downloading modules themes using wget FTP  add using composer  example  add devel module run command    composer require drupal devel commit just changes composer json composer lock repository  means working copy site locally will need run composer install download necessary libraries modules  strongly recommend installing Platform sh Config Reader library  simplifies access Platform sh environment  rest documentation assumes installed    composer require platformsh config reader   note     When using Composer  docroot Drupal lives will called web  vendor directory will outside directory contrast standard Drupal download  tar gz file organized  config export directory will outside web root  normal  expected  secure  File organization repository laid follows  composer json composer lock config  sync  drush   git   gitignore  platform  routes yaml services yaml  platform app yaml scripts  web index php      other Drupal core files  modules  contrib  custom  themes  contrib  custom  sites  default  settings php settings platformsh php Changes settings php Platform sh exposes database configuration  configuration values hash salt  PHP environment variables available either via  _ENV getenv    means you ll need tell Drupal information  Additionally  Drupal needs told config export directory is  private files directory  which outside web root   so on  easiest access information via small configuration add on provide  recommended settings php file  includes file called settings platformsh php  latter maps Platform sh provided environment values Drupal settings  either Drupal database array global  settings object  run non Platform sh server file does nothing so safe always include  need add additional Platform sh specific configuration  enable Redis server caching  recommend putting settings platformsh php  Vanilla Drupal 8 prefer  Drupal 8 installed  vanilla  Drupal org  entire site checked repository  not recommended fully supported  end day Platform sh doesn t care files from  just tell system are  will need put Drupal docroot subdirectory repository  recommend web consistency directory name will do  using vanilla Drupal install  repository look something this   git   gitignore config  sync   platform  routes yaml services yaml  platform app yaml web  index php      other Drupal core files  core  modules  sites  sites  default  settings php settings platformsh php Note settings php settings platformsh php files  identical ones used Composer based site  note config sync directory outside docroot  recommended Drupal installs generally  configured settings php file  Configuring Platform sh Drupal ideal  platform app yaml file will vary project project  free customize yours needed  recommended baseline Drupal 8 configuration listed below  found Drupal 8 template project                 Additional information",
        "objectID": "en/frameworks/drupal8",
        "weight": 2,
        "toc": true,
        "sidebarTitle": "Drupal 8"
    },
    {
        "title": "Developing with Drupal",
        "uri": "en/frameworks/drupal8/developing-with-drupal",
        "content": "Push changes environment Here  we ll code changes environment    note     working Master branch it s supposed production environment  sure you re working environment  example we re sprint1 branch    git checkout sprint1 you re set working branch  start developing website making code changes pushing changes Platform sh test live  three common ways will making code changes Platform  Add contributed modules  themes  distributions  third party libraries file Create custom code  modules  themes  profiles  libraries  commit Platform sh codebase Modify services grid configuration Add contributed projects time push commit  Platform sh will rebuild environment run Composer command proper composer json file found  Add Drupal module theme Drupal module theme want install project included composer json file  example    composer require drupal token will update composer json composer lock files  commit  you re using Composer  3rd party PHP libraries added exact Drupal modules  Add custom code commit custom modules  themes  libraries  add web modules custom web themes custom directory commit Git normal  Change services configuration change define topology services used environment  modifying configuration files  means you re able define configure services want use  Push changes When you re done  commit changes test online environment    git add     git commit  m  Made changes files     git push will Platform found file starting rebuild environment  When it s completed  changes site clicking View website name Sprint1 environment Platform sh management console    note     build process makes no changes Git repository  Git repository input process  PHP container containing code dependencies output  directory structure created connecting via SSH environment  information Access information below title environment Merge code changes Master Once you ve branch changes  you ll want able push changes live environment  Platform sh great button called Merge click will push appropriate changes master  dialog box will appear will provide commands execute future merges command line using Platform sh CLI  Just click  Merge  button again commits made branch will merged master environment  Synchronizing data easiest use Drush sql sync command  You ll need Drush aliases Platform sh site local site  using CLI you ve run platform  platform_id  project  Drush aliases already set up  Drush aliases  depending yours set up   use command similar this    drush sql sync  platform master  platform _local alternate method appropriate larger databases use pipe   stream data  instead making copy dump file    drush  platform master sql dump   drush  platform _local sqlc",
        "objectID": "en/frameworks/drupal8/developing-with-drupal",
        "weight": 1,
        "toc": true
    },
    {
        "title": "Working with Drush in Drupal 8",
        "uri": "en/frameworks/drupal8/drush",
        "content": "used Drush before  learn Drush GitHub Repository Platform sh s Drupal templates Drush installed  Drush commands run build  deploy  post_deploy hooks  although remember database not available build time Drush commands will not work build time  addition  use Platform sh CLI set Drush aliases easily project s environments  section below use drush aliases   note     Platform s CLI requires Drush 6 higher  Installing Drush Use Platform sh provided Drupal examples started project one Platform sh s Drupal templates Drush already installed configured  nothing else do  Install Drush custom projects using Composer recommended approach  Run command project s repository root folder    composer require drush drush Commit composer json composer lock files push  Drush will available vendor bin drush  exact version local system Platform sh  Install Drush custom projects using Build Dependencies Platform sh supports installing system level tools build dependencies  install Drush using method  use following  platform app yaml dependencies  php   drush drush     8 0  Accessing Drush within project Drush available command line  added project s  PATH  Add new file named  environment root project s git repository code     codesnippet  https   raw githubusercontent com platformsh templates drupal8 master  environment   language  bash       endcodesnippet    Install Drush locally install drush globally Composer  does not add project    composer global require drush drush end installation  able run    drush Use drush aliases Create Drush aliases Drush aliases easy manage development websites  Here s example Drush alias file  Platform sh CLI generates Drush aliases automatically when run platform  project_id   aliases created  run platform drush aliases output similar below    platform drush aliases Aliases Site  tqmd2kvitnoly    my site _local  my site master  my site staging  my site sprint1 Recreating Drush aliases recreate existing aliases  pushing new branch via git create new alias  run  platform drush aliases  r",
        "objectID": "en/frameworks/drupal8/drush",
        "weight": 2,
        "sidebarTitle": "Drush",
        "toc": true,
        "description": "Drush is a command-line shell and scripting interface for Drupal, a veritable Swiss Army knife designed to make life easier for those who spend their working hours hacking away at the command prompt. Drush commands can, for example, be used to clear the Drupal cache, run module and database updates, revert features, perform database imports and dumps, and a whole lot more. You can reference the full set of Drush commands at <a href=\"(http://www.drush.org)\">Drush.org</a>. \n"
    },
    {
        "title": "Using Elasticsearch with Drupal 8.x",
        "uri": "en/frameworks/drupal8/elasticsearch",
        "content": "Requirements Add Drupal modules will need add Search API Elasticsearch Connector modules project  using composer  easiest add simply run    composer require drupal searchapi drupal elasticsearchconnector commit changes composer json composer lock  Add Elasticsearch service First need create Elasticsearch service   platform services yaml file  add uncomment following  elasticsearch  type  elasticsearch 6 5 disk  2014 above definition defines single Elasticsearch 6 5 server  Elasticsearch defines additional indexes dynamically no need define custom endpoints  Expose Elasticsearch service application  platform app yaml file  need open connection new Elasticsearch service  relationships section  add uncomment following  relationships  elasticsearch   elasticsearch elasticsearch  Configuration Drupal defines connection information via Configuration Management system  will need first define Elasticsearch  Cluster  admin config search elasticsearch connector  Note  machine name  server given  Then  paste following code snippet settings platformsh php file    note     not already Platform sh Config Reader library installed referenced top file  will need install composer require platformsh config reader add following code block below         platformsh   new  Platformsh ConfigReader Config         platformsh  inRuntime        return        Edit value  relationship_name using different relationship  Edit value  esservername match machine name cluster Drupal     Update values relationship name  from  platform app yaml     machine name server Drupal configuration   relationship_name    elasticsearch    esclustername    YOURCLUSTERHERE     platformsh  hasRelationship  relationship_name      platformsh  registerFormatter  drupal elastic   function  creds    return sprintf  http    s  s    creds  host     creds  port            Set connector configuration appropriate value  defined formatter above   config elasticsearchconnector cluster      esclustername    platformsh  formattedCredentials  relationshipname   drupal elastic      Commit code push  specified cluster will always point Elasticsearch service  configure Search API normal",
        "objectID": "en/frameworks/drupal8/elasticsearch",
        "weight": 5,
        "sidebarTitle": "Elasticsearch",
        "toc": true
    },
    {
        "title": "Drupal Frequently Asked Questions (FAQ)",
        "uri": "en/frameworks/drupal8/faq",
        "content": "import configuration production  don t want so manually  include following lines deploy hook  platformsh app yaml  drush  y updatedb drush  y config import will automatically run update php import configuration every new deploy  above configuration included default used Drupal 8 example repository created project management console  I m getting PDO Exception  MySQL server gone away  Normally  means problem MySQL server container may need increase storage available MySQL resolve issue  Ballooning MySQL storage caused number items  large number watchdog entries captured  Fix errors generated disable database logging  Cron run regular intervals ensure cache tables cleared out  Why  MySQL cannot connect database server   having problem connecting database server  will need force re deployment database container  so  edit service definition add remove small amount storage push  use name session cookie caching  Drupal sites  name session cookie based hash domain name  means will actually consistent specific website safely used fixed value",
        "objectID": "en/frameworks/drupal8/faq",
        "weight": 10,
        "sidebarTitle": "FAQ",
        "toc": true
    },
    {
        "title": "Using Lando for local Drupal development",
        "uri": "en/frameworks/drupal8/lando",
        "content": "Setting Lando environment Download project  platform cd Create basic Drupal 8 Lando config file  lando init   recipe drupal8 Commit Lando config file repository  git add  lando yml git commit  m  Add Lando configuration  customize configuration file needed  addition general recommendations Lando with Platform sh sites following additions recommended Drupal 8  Name application  platform app yaml  name  app recipe  drupal8 config  Enable XDebug local development  xdebug  true providing custom php ini configuration Platform sh  specifying file will allow one file drive environments  conf  php  php ini Once configuration file set  start Lando running  lando start download dependencies  lando composer install Setting Drupal Lando Platform sh environment variables not available Lando  Lando provides its own alternates  connect Drupal database add following web sites default settings local php file   databases default       driver      mysql    database     getenv  DB_NAME     username     getenv  DB_USER     password     getenv  DB_PASSWORD     host     getenv  DB_HOST     port     getenv  DB_PORT       need add additional services  Redis cache  Solr  Elasticsearch  etc   Lando documentation  Place additional configuration necessary settings local php file well  Downloading data Platform sh Lando Assuming you re using standard Drupal 8 configuration  following commands will fully synchronize SQL database uploaded files local system  First  sure git branch checked environment want synchronize from  run following repository root  Download database backup import Lando  platform db dump   gzip  f database sql gz lando db import database sql gz Download user files locally  skipping already found locally  rsync  az platform ssh   pipe  app web sites default files    web sites default files  rsync  az platform ssh   pipe  app private    private  customized file mounts  platform app yaml file update rsync commands accordingly",
        "objectID": "en/frameworks/drupal8/lando",
        "weight": 8,
        "sidebarTitle": "Lando ",
        "toc": true,
        "description": "<a href=\"/gettingstarted/local/lando.md\">Lando</a> is a local development platform that works well with Platform.sh.  Once installed locally it is a simple matter to create an approximate equivalent of your Platform.sh environment for development.<br><br>\n\nIf using Drupal 8 there is a <a href=\"https://docs.devwithlando.io/tutorials/drupal8.html\"><code>drupal8</code></a> recipe available that is a good starting point for your site.\n"
    },
    {
        "title": "Using Memcached with Drupal 8.x",
        "uri": "en/frameworks/drupal8/memcached",
        "content": "Requirements Add Memcached service First need create Memcached service   platform services yaml file  add uncomment following  cacheservice  type  memcached 1 4 will create service named cacheservice  type memcached  specifically version 1 4  Expose Memcached service application  platform app yaml file  need open connection new Memcached service  relationships section  add following  relationships  cache   cacheservice memcached  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  cacheservice  endpoint  memcached   named service something different above  change cacheservice that  Add Memcached PHP extension will need enable PHP Memcached extension   platform app yaml file  add following right type block  Additional extensions runtime  extensions  memcached Add Drupal module will need add Memcache module project  using Composer manage Drupal 8 site  which recommend   simply run  composer require drupal memcache commit resulting changes composer json composer lock files    note     commit deploy code continuing  enable module  memcache   module enabled configured settings platformsh php file  Configuration Drupal Memcache module configured via settings platformsh php  Place following end settings platformsh php  Note inline comments  may wish customize further  review README txt file comes memcache module  information possible configuration options  instance  may want consider using memcache locking configuring cache stampede protection  example below intended  most common case    getenv  PLATFORMRELATIONSHIPS      extensionloaded  memcached       relationships   jsondecode base64decode getenv  PLATFORM_RELATIONSHIPS     TRUE      named memcached relationship something  cache   set here   relationship_name    cache     empty  relationships  relationship_name         line tells Drupal use memcached backend     Comment just line need disable reason    fall back default database cache   settings cache     cache backend memcache   foreach   relationships  relationship_name   endpoint     host   sprintf   s  d    endpoint  host     endpoint  port      settings memcache   host     default          default Drupal starts cache_container database  following    code overrides that     sure  class_load  addPsr4 pointing right location    memcache module  value below correct memcache installed    using Drupal Composer   memcacheexists   classexists  Memcache   FALSE    memcachedexists   classexists  Memcached   FALSE     memcacheexists     memcachedexists     class_loader  addPsr4  Drupal  memcache      modules contrib memcache src       using multisite configuration  adapt line include site unique    value   settings memcache    getenv  PLATFORM_ENVIRONMENT       Define custom bootstrap container definition use Memcache cache container   settings  bootstrapcontainerdefinition        parameters          services        database        class      Drupal Core Database Connection    factory      Drupal Core Database Database  getConnection    arguments       default        settings        class      Drupal Core Site Settings    factory      Drupal Core Site Settings  getInstance       memcache settings        class      Drupal memcache MemcacheSettings    arguments        settings        memcache factory        class      Drupal memcache Driver MemcacheDriverFactory    arguments        memcache settings        memcache backend cache container        class      Drupal memcache DrupalMemcacheInterface    factory        memcache factory    get     arguments       container        lock container        class      Drupal memcache Lock MemcacheLockBackend    arguments       container     memcache backend cache container        cachetagsprovider container        class      Drupal Core Cache DatabaseCacheTagsChecksum    arguments        database        cache container        class      Drupal memcache MemcacheBackend    arguments       container     memcache backend cache container     lock container     memcache config     cachetagsprovider container",
        "objectID": "en/frameworks/drupal8/memcached",
        "weight": 4,
        "toc": true,
        "sidebarTitle": "Memcached",
        "description": "Platform.sh recommends using Redis for caching with Drupal 8 over Memcached, as Redis offers better performance when dealing with larger values as Drupal tends to produce.  However, Memcached is also available if desired and is fully supported.\n"
    },
    {
        "title": "Multiple Drupal sites in a single Project",
        "uri": "en/frameworks/drupal8/multi-site",
        "content": "Drupal  Multisite  Platform sh Platform sh actively discourages running Drupal  multisite  mode  Doing so eliminates advantages Platform sh offers  isolation safe testing  Additionally  dynamic nature domain names created different environments  multisite configuration complex fragile  recommend running separate projects separate Drupal sites  using one various  single instance  options available Domain Access  Organic Groups  Workbench Access  reason use Drupal Multisite manage series nearly identical sites separate databases  case built template repository uses unified lookup key subdomain  database name  file paths  Note will likely require modification specific setup configurations may require different approach  particular  example  Defines two MySQL databases  Uses modified settings platformsh php accepts key variable settings php specify database file system paths use  Extracts sites directory use domain",
        "objectID": "en/frameworks/drupal8/multi-site",
        "weight": 9,
        "sidebarTitle": "Multi-site",
        "description": "Platform.sh supports running <a href=\"/user_guide/reference/platform-app-yaml-multi-app.html\">multiple applications in the same project</a>, and these can be two or more Drupal sites. But they would be separate Drupal instances: they will have their assets separate and live their lives apart, and it would be much better for them not to share the same database (though they could).\n"
    },
    {
        "title": "Using Redis with Drupal 8.x",
        "uri": "en/frameworks/drupal8/redis",
        "content": "Requirements Add Redis service First need create Redis service   platform services yaml file  add uncomment following  rediscache  type  redis 5 0 will create service named rediscache  type redis  specifically version 5 0  Expose Redis service application  platform app yaml file  need open connection new Redis service  relationships section  add following  relationships  redis   rediscache redis  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  rediscache  endpoint  redis   named service something different above  change rediscache that  Add Redis PHP extension will need enable PHP Redis extension   platform app yaml file  add following right type block  Additional extensions runtime  extensions  redis Add Drupal module will need add Redis module project  using Composer manage Drupal 8 site  which recommend   simply run  composer require drupal redis commit resulting changes composer json composer lock files  Note Redis module does not need enabled Drupal except diagnostic purposes  configuration below sufficient leverage its functionality  Configuration use Redis cache will need set Drupal variables  configuration bit complex easily represented Platform sh s environment variables configuration  so using settings php directly recommended approach  Place following end settings platformsh php  Note inline comments  may wish customize further  review README txt file comes redis module  great deal information possible configuration options  instance  may wish not use Redis persistent lock custom module needs locks persist few seconds  example below intended  most common case    Note  example assumes Drupal 8 2 later     note     not already Platform sh Config Reader library installed referenced top file  will need install composer require platformsh config reader add following code block below         platformsh   new  Platformsh ConfigReader Config         platformsh  inRuntime        return           Set redis configuration    platformsh  hasRelationship  redis       drupalinstallationattempted      extension_loaded  redis       redis    platformsh  credentials  redis       Set Redis default backend cache bin not otherwise specified   settings cache     cache backend redis    settings redis connection     redis  host     settings redis connection     redis  port       Apply changes container configuration better leverage Redis     includes using Redis lock flood control systems     cache tag checksum  Alternatively  copy contents file    project specific services yml file  modify appropriate     remove line   settings container_yamls     modules contrib redis example services yml      Allow services work Redis module itself enabled   settings container_yamls     modules contrib redis redis services yml      Manually add classloader path  required container cache bin definition below    allows use without redis module enabled   class_loader  addPsr4  Drupal  redis      modules contrib redis src       Use redis container cache     container cache used load container definition itself     thus configuration stored container itself not available    yet  lines force container cache use Redis rather    default SQL cache   settings  bootstrapcontainerdefinition        parameters          services        redis factory        class      Drupal redis ClientFactory       cache backend redis        class      Drupal redis Cache CacheBackendFactory    arguments        redis factory     cachetagsprovider container     serialization phpserialize        cache container        class       Drupal redis Cache PhpRedis    factory        cache backend redis    get     arguments       container        cachetagsprovider container        class      Drupal redis Cache RedisCacheTagsChecksum    arguments        redis factory        serialization phpserialize        class      Drupal Component Serialization PhpSerialize              example services yml file noted above will use Redis lock flood control systems  redis module able use Redis queue backend  however  not done ephemeral Redis instance result lost items when Redis service instance restarted fills up  wish use Redis queue recommend using separate persistent Redis instance  Redis documentation page information  Verifying Redis running Run command SSH session environment redis cli  h redis internal info  run push new code repository  give baseline activity Redis installation  little memory allocated Redis cache  push code  run command notice allocated memory will start jumping  Clear SQL cache tables Once you ve confirmed site using Redis caching  purge remaining cache data MySQL database just taking space  TRUNCATE table begins cache except cacheform  Despite its name cacheform not part cache system proper thus not moved SQL",
        "objectID": "en/frameworks/drupal8/redis",
        "weight": 3,
        "sidebarTitle": "Redis",
        "toc": true,
        "description": "The Drupal 8 Redis module currently only supports the <a href=\"https://github.com/nicolasff/phpredis\">PhpRedis</a> option, which relies on a PHP extension. Fortunately, that extension is trivial to enable on Platform.sh.\n"
    },
    {
        "title": "SimpleSAML",
        "uri": "en/frameworks/drupal8/simplesaml",
        "content": "following configuration assumes building Drupal 8 using Composer  not  will need download library manually adjust paths accordingly  Download library Drupal module easiest download SimpleSAMLphp via Composer  following command will add Drupal module PHP library composer json file  composer require simplesamlphp simplesamlphp drupal externalauth drupal simplesamlphp_auth Once that s run  commit composer json composer lock repository  Include SimpleSAML cookies cache key SimpleSAML client uses additional cookies besides Drupal session cookie need whitelisted cache  so  modify routes yaml file route points Drupal site add two additional cookies cache cookies line  end looking approximately this   https    default     type  upstream upstream   app http  cache  enabled  true cookies      SS ESS       Drupal visitor     SimpleSAMLSessionID    SimpleSAMLAuthToken   Commit change Git repository  Expose SimpleSAML endpoint SimpleSAML library s www directory needs publicly accessible  done mapping directly path Application configuration  Add following block web locations section  platform app yaml  web  locations    simplesaml   root   vendor simplesamlphp simplesamlphp www  allow  true scripts  true index  index php will map requests example com simplesaml  vendor simplesamlphp www directory  allowing static files served  PHP scripts execute  defaulting index php  Create configuration directory SimpleSAMLphp configuration will need outside vendor directory  composer require will download template configuration file vendor simplesamlphp simplesamlphp config  Rather modifying file place  as won t included Git   copy vendor simplesamlphp simplesamlphp config directory simplesamlphp config  in application root   contain two files  config php authsources php  Additionally  create simplesamlphp metadata directory  directory will hold IdP definitions  Consult SimpleSAMLphp documentation examples vendor simplesamlphp simplesamlphp metadata templates  Next  need tell SimpleSAMLphp find directory using environment variable  simplest set add following block  platform app yaml file  variables  env  SIMPLESAMLPHPCONFIGDIR   app simplesamlphp config Commit whole simplesamplphp directory  platform app yaml Git  Configure SimpleSAML use database SimpleSAMLphp able store its data either disk Drupal database  Platform sh strongly recommends using database  Open file simplesamlphp config config php created earlier  contains number configuration properties adjust needed  best edited in place file already includes ample documentation  specifically  auth adminpassword technicalcontact_name technicalcontact_email Others little involved  interest simplicity recommend simply pasting following code snippet end file  will override default values array     Set SimpleSAML log using error_log    Platform sh will    mapped  var log app log file   config  logging handler      errorlog      Set SimpleSAML use metadata directory Git  rather    empty one vendor directory   config  metadata sources         type      flatfile    directory     dirname DIR      metadata          Setup database connection parts SimpleSAML   isset  ENV  PLATFORMRELATIONSHIPS        relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     TRUE   foreach   relationships  database    instance      empty  instance query       dsn   sprintf   s host  s dbname  s    instance  scheme     instance  host     instance  path       config  database dsn      dsn   config  database username      instance  username     config  database password      instance  password     config  store type      sql    config  store sql dsn      dsn   config  store sql username      instance  username     config  store sql password      instance  password     config  store sql prefix      simplesaml            Set salt value Platform sh entropy value  provided purpose   isset  ENV  PLATFORMPROJECT_ENTROPY        config  secretsalt      ENV  PLATFORMPROJECT_ENTROPY      Generate SSL certificates  optional  Depending Identity Provider  IdP   may need generate SSL TLS certificate connect Service Provider  SP   so  generate certificate locally following instructions SimpleSAMLphp documentation  Whatever resulting idP file placed simplesamlphp metadata directory  certificate placed simplesamlphp cert directory   Create needed   add following line simplesamlphp config config php file tell library find certificate   config  certdir     dirname DIR      cert   Deploy Commit changes deploy site  enable simplesamlphp_auth module within Drupal  usually enabling locally pushing config change   Consult module documentation further information configure module itself  Note not check  Activate authentication via SimpleSAMLphp  checkbox module configuration until rest configuration completed may locked site",
        "objectID": "en/frameworks/drupal8/simplesaml",
        "weight": 7,
        "toc": true,
        "description": "SimpleSAMLphp is a library for authenticating a PHP-based application against a SAML server, such as Shibboleth.  Although Drupal has modules available to authenticate using SimpleSAML some additional setup is required.\n"
    },
    {
        "title": "Using Solr with Drupal 8.x",
        "uri": "en/frameworks/drupal8/solr",
        "content": "Search API Solr stores its configuration Drupal Configuration API  However  system does not easily support environment aware information  setup process therefore depends config overrides settings platformsh php  may need modified slightly depending Solr configuration  Search API Solr requires Solr 6 6 higher  recommends Solr 8 higher  Advanced Solr service configuration implementation frameworks Drupal found Solr services page  Steps 0  Upgrade Symfony Event Dispatcher running Drupal older 8 9 0  small workaround will needed  Solarium library used Search API Solr requires 4 3 version Symfony Event Dispatcher  whereas Drupal core ships 3 4  Search API Solr issue queue detailed description problem  noted there  workaround run  composer require symfony event dispatcher  4 3 4 3 4 99  project root commit resulting change composer json composer lock  will cause Composer install 4 3 version Event Dispatcher  Once issue resolved core step will no longer necessary  1  Add Drupal modules will need add Search API Search API Solr modules project  using composer  easiest add simply run    composer require drupal searchapisolr commit changes composer json composer lock  2  Add default Solr service Add following  platform services yaml file  search  type  solr 8 0 disk  1024 configuration  cores  maincore  conf_dir     endpoints  main  core  maincore above definition defines single Solr 8 0 server  server 1 core defined  maincore  will use default configuration   The default configuration not suitable production will allow module connect it   defines one endpoint  main  connected maincore  3  Expose Solr service application  platform app yaml file  need open connection new Solr service  relationships section  add following  relationships  solrsearch   search main  is  application s environment include solrsearch relationship connects main endpoint  maincore core  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  search  endpoint  main   named service endpoint something different above  change values accordingly  4  Add auto configuration code settings platformsh php configuration managed settings platformsh php adding following code snippet  will override environment specific parts configuration object correct values connect Platform sh Solr instance    note     not already Platform sh Config Reader library installed referenced top file  will need install composer require platformsh config reader add following code block below         platformsh   new  Platformsh ConfigReader Config         platformsh  inRuntime        return        Edit value  relationship_name using different relationship  Edit value  solrservername want configure Solr server Drupal default server automatically created Search API Solr module   platformsh  registerFormatter  drupal solr   function  solr       Default solr core name collection1 pre Solr 6 x instances  return    core     substr  solr  path    5       collection1    path          host      solr  host     port      solr  port              Update values relationship name  from  platform app yaml     machine name server Drupal configuration   relationship_name    solrsearch    solrservername    defaultsolrserver     platformsh  hasRelationship  relationship_name        Set connector configuration appropriate value  defined formatter above   config searchapi server      solrservername  connectorconfig      platformsh  formattedCredentials  relationship_name   drupal solr      connecting multiple Solr cores  repeat second block above relationship server  modifying two variables accordingly  Commit changes above push deploy  5  Enable modules Once site deployed  go  admin modules page enable  Search API Solr  module  enable  Search API Solr Search Defaults  module order default server configuration  rather create one yourself may so change value  solrservername code snippet settings platformsh php  6  Export modify configuration Drupal admin area  go  admin config search search api select server   If used Search Defaults module  will named simply  Solr Server    First verify module able connect Solr instance ensuring  Server connection  reports  The Solr server reached   generate config zip file using button top page  will produce Solr configuration customized current field configuration  Extract file  platform directory site  unpack directory named solr8 xconfig similar  Inside directory  locate solrcore properties file  file  delete entry solr install dir  Its default value will not work not required Solr operate   The server already knows its installation directory   Finally  move directory  platform   update conf_dir point it  services yaml entry look approximately this  search  type  solr 8 0 disk  1024 configuration  cores  maincore  confdir   archive  solr8 x_config   endpoints  main  core  maincore Add new directory updated services yaml Git  commit  push    note     change Solr configuration Drupal  say change Solr field configuration  may need regenerate configuration  so  repeat entire step  7  Verify worked Return Drupal UI ser",
        "objectID": "en/frameworks/drupal8/solr",
        "weight": 6,
        "sidebarTitle": "Solr",
        "toc": true,
        "description": "The Drupal <a href=\"https://www.drupal.org/project/search_api_solr\">Search API Solr</a> module has a somewhat involved setup process, as it requires live access to the Solr server in order to generate the configuration files for it.  The following procedure is therefore necessary to ensure each step is able to proceed.\n"
    },
    {
        "title": "eZ Platform",
        "uri": "en/frameworks/ez",
        "content": "eZ Platform eZ Platform Composer based PHP CMS  fits Platform sh model  Symfony based application its setup similar Symfony  eZ Platform comes pre configured use Platform sh version 1 13 later  Version 2 5 later recommended  versions supported  Appropriate Platform sh configuration files included eZ Platform application itself  course may modified suit particular site needed  Cache sessions default  eZ Platform configured use single Redis instance application cache session storage  may optionally choose use separate Redis instance session storage case lot authenticated traffic  and thus session records   so  uncomment redissession entry  platform services yaml file corresponding relationship  platform app yaml file  bridge code provided eZ Platform 1 13 later will automatically detect additional Redis service use session storage  Dedicated instance  strongly recommend using two separate Redis instances Cache Sessions  service relationship names ship default Platform sh configuration eZ Platform used as is  ensure development environment works Production  uncomment redissession entry  platform services yaml file corresponding relationship  platform app yaml file  bridge code provided eZ Platform 1 13 later will automatically detect additional Redis service use session storage  default  Dedicated instances will configure Cache Session storage  persistent  mode  so data not lost case system process restart  reduces potential cache stampede issues inadvertently logging people out  Modifying existing eZ Platform project existing eZ Platform project upgraded previous version  want resynchronize latest recommended configuration  please eZ Platform official repository  particular  see   platform app yaml file  automatically builds eZ Platform dev mode production mode depending defined project level variables   platform directory platformsh php configuration file  does work mapping Platform sh environment variables eZ Platform  will automatically enable Redis based cache session support detected  Local Development eZ Platform 2 x later eZ Systems provide tool called eZ Launchpad local development top Docker stack  improves Developer eXperience reduces complexity common actions simplifying interactions Docker containers  eZ Launchpad ready work Platform sh  serves wrapper allows run console commands within container without logging explicitly  example run bin console cache clear inside PHP container do    ez sfrun cache clear eZ Launchpad installation eZ Launchpad s approach stay decoupled possible development machine remote hosting whether Linux Mac OSX  install run  curl  LSs https   ezsystems github io launchpad install_curl bash   bash start use initialize eZ Platform project top Docker    ez init create Docker stack based existing project git clone yourproject git application cd application   ez create will find details eZ Launchpad documentation  time will working eZ Platform application services including Varnish  Solr  Redis etc  Platform sh integration generate key files Platform sh   platform app yaml  platform  run    ez platformsh setup eZ Launchpad will generate files totally free fine tune them  Solr specificity Solr fully functional eZ Launchpad not enabled default Platform sh  will set manually following current documenation here  https   github com ezsystems ezplatform blob master  platform services yaml L37  Actions needed are  Generate Solr configuration thanks script provided eZ Systems  Put result  platform root project  Add service  platform services yaml  Add relationship  platform app  yaml  Environment variables  optional  eZ Launchpad allows define environment variables provisioning dev docker compose yml file  may use set Platform sh variables match Platform sh environments so keep environment behavior sync  variables set engine container  provisioning dev docker compose yml engine  environment  ASIMPLEVARIABLE avalue PLATFORMRELATIONSHIPS ABASE64ENCODEDVALUE Local development Platform sh Thanks eZ Launchpad able work 100  locally  untethered  whole project working offline local machine    Platform sh provides smooth SSH tunnels integration described tethered page  Local services provided Docker stack minimum day to day tasks need Platform sh  main ones are  Downstream database synchronization  Getting remote local  Downstream file storage synchronization  Getting remote local  help that  Platform sh provides CLI probably already have  don t  install guide  Combined together  eZ Launcphad Platform sh CLI actions straight forward simple  Database storage synchronization platform db dump   gzip  f ezplatform sql gz  d data   y platform mount download  m ezplatform web var   target ezplatform web var   y   ez importdata two first lines remote database storage remote environment stores locally data   third tells eZ Launchpad import data Docker stack    storage  images files  synchronization optional  eZ Platform provides placeholder generator mechanism allows forget real images local  Additional information",
        "objectID": "en/frameworks/ez",
        "weight": 3,
        "toc": true,
        "description": "eZ Platform is a Composer-based PHP CMS, and as such fits well with the Platform.sh model.  As a Symfony-based application its setup is very similar to Symfony.<br><br>\n\neZ Platform comes pre-configured for use with Platform.sh in version 1.13 and later. Version 2.5 and later is recommended. Those are the only versions that are supported.  Appropriate Platform.sh configuration files are included in the eZ Platform application itself, but of course may be modified to suit your particular site if needed.\n"
    },
    {
        "title": "eZ Platform Enterprise with Fastly",
        "uri": "en/frameworks/ez/fastly",
        "content": "Remove Varnish configuration eZ Platform 1 13 5  2 4 3 2 5 0  Varnish enabled default when deploying Platform sh  order use Fastly  Varnish disabled  Remove environment variable SYMFONYTRUSTEDPROXIES   TRUST_REMOTE   platform app yaml Remove Varnish service  platform services yaml  platform routes yaml  change routes use app instead varnish service removed previous step   https    default     type  upstream upstream   varnish http  upstream   app http  Setting eZ Platform use Fastly eZ Platform s documentation includes instructions configure eZ Platform Fastly  Follow steps prepare eZ Platform Fastly  Set credentials Platform sh best provide Fastly credentials configuration eZ Platform Platform sh via environment variables  private credentials stored Git  Using CLI  run following commands set configuration master environment   Note will inherit environments default unless overridden   platform variable create  e master   level environment env HTTPCACHEPURGETYPE   value  fastly  platform variable create  e master   level environment env FASTLYSERVICEID   value  YOURIDHERE  platform variable create  e master   level environment env FASTLYKEY   value  YOURID_HERE  Replacing YOURIDHERE Fastly Service ID Key obtained Fastly  Note  Platform sh Dedicated Cluster  set values production branch instead  platform variable set  e production env HTTPCACHEPURGETYPE fastly platform variable set  e production env FASTLYSERVICEID YOURIDHERE platform variable set  e production env FASTLYKEY YOURID_HERE Configure Fastly Platform sh alternate Go live process Fastly Platform sh  process application",
        "objectID": "en/frameworks/ez/fastly",
        "weight": 1,
        "sidebarTitle": "Fastly",
        "toc": true,
        "description": "eZ Platform Enterprise is a \"commercial extended\" version of ez Platform that includes, among other things, support for push-based purging on the Fastly CDN.\n"
    },
    {
        "title": "Hibernate",
        "uri": "en/frameworks/hibernate",
        "content": "Services configuration reader library Java used examples  so sure check documentation installation instructions latest version  MySQL MySQL open source relational database technology  Define driver MySQL  Java dependencies  determine SessionFactory client programmatically  import org hibernate Session  import org hibernate SessionFactory  import org hibernate Transaction  import org hibernate cfg Configuration  import sh platform config Config  import sh platform config Hibernate  public class HibernateApp   public static void main String   args    Config config   new Config    Configuration configuration   new Configuration    configuration addAnnotatedClass Address class   final Hibernate credential   config getCredential  database   Hibernate  new   final SessionFactory sessionFactory   credential getMySQL configuration   try  Session session   sessionFactory openSession      Transaction transaction   session beginTransaction          transaction commit            note     use MySQL driver MariaDB wish so  MariaDB MariaDB open source relational database technology  Define driver MariaDB  Java dependencies  determine SessionFactory client programmatically  import org hibernate Session  import org hibernate SessionFactory  import org hibernate Transaction  import org hibernate cfg Configuration  import sh platform config Config  import sh platform config Hibernate  public class HibernateApp   public static void main String   args    Config config   new Config    Configuration configuration   new Configuration    configuration addAnnotatedClass Address class   final Hibernate credential   config getCredential  database   Hibernate  new   final SessionFactory sessionFactory   credential getMariaDB configuration   try  Session session   sessionFactory openSession      Transaction transaction   session beginTransaction          transaction commit          PostgreSQL PostgreSQL open source relational database technology  Define driver PostgreSQL  Java dependencies  determine SessionFactory client programmatically  import org hibernate Session  import org hibernate SessionFactory  import org hibernate Transaction  import org hibernate cfg Configuration  import sh platform config Config  import sh platform config Hibernate  public class HibernateApp   public static void main String   args    Config config   new Config    Configuration configuration   new Configuration    configuration addAnnotatedClass Address class   final Hibernate credential   config getCredential  database   Hibernate  new   final SessionFactory sessionFactory   credential getPostgreSQL configuration   try  Session session   sessionFactory openSession      Transaction transaction   session beginTransaction          transaction commit",
        "objectID": "en/frameworks/hibernate",
        "weight": 4,
        "toc": true,
        "description": "<a href=\"https://hibernate.org/\">Hibernate ORM</a> is an object-relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. Hibernate handles object-relational impedance mismatch problems by replacing direct, persistent database accesses with high-level object handling functions.\n"
    },
    {
        "title": "Jakarta EE/Eclipse MicroProfile",
        "uri": "en/frameworks/jakarta",
        "content": "Services configuration reader library Java used examples  so sure check documentation installation instructions latest version  MongoDB use Jakarta NoSQL JNoSQL use MongoDB application first determining MongoDB client programmatically  import com mongodb MongoClient  import jakarta nosql document DocumentCollectionManager  import jakarta nosql document DocumentCollectionManagerFactory  import org jnosql diana mongodb document MongoDBDocumentConfiguration  import sh platform config Config  import sh platform config MongoDB  import javax annotation PostConstruct  import javax enterprise context ApplicationScoped  import javax enterprise inject Disposes  import javax enterprise inject Produces   ApplicationScoped class DocumentManagerProducer   private DocumentCollectionManagerFactory managerFactory  private MongoDB mongoDB   PostConstruct public void init     Config config   new Config    this mongoDB   config getCredential  database   MongoDB  new   final MongoClient mongoClient   mongoDB get    MongoDBDocumentConfiguration configuration   new MongoDBDocumentConfiguration    this managerFactory   configuration get mongoClient      Produces public DocumentCollectionManager getManager     return managerFactory get mongoDB getDatabase       public void destroy  Disposes DocumentCollectionManager manager    this manager close        Apache Solr use Jakarta NoSQL JNoSQL use Solr application first determining Solr client programmatically  import jakarta nosql document DocumentCollectionManager  import jakarta nosql document DocumentCollectionManagerFactory  import org apache solr client solrj impl HttpSolrClient  import org jnosql diana solr document SolrDocumentConfiguration  import sh platform config Config  import sh platform config Solr  import javax annotation PostConstruct  import javax enterprise context ApplicationScoped  import javax enterprise inject Disposes  import javax enterprise inject Produces   ApplicationScoped class DocumentManagerProducer   private DocumentCollectionManagerFactory managerFactory   PostConstruct public void init     Config config   new Config    Solr solr   config getCredential  database   Solr  new   final HttpSolrClient httpSolrClient   solr get    SolrDocumentConfiguration configuration   new SolrDocumentConfiguration    this managerFactory   configuration get httpSolrClient      Produces public DocumentCollectionManager getManager     return managerFactory get  collection      public void destroy  Disposes DocumentCollectionManager manager    this manager close        Elasticsearch use Jakarta NoSQL JNoSQL use Elasticsearch application first determining Elasticsearch client programmatically  import jakarta nosql document DocumentCollectionManager  import jakarta nosql document DocumentCollectionManagerFactory  import org elasticsearch client RestHighLevelClient  import org jnosql diana elasticsearch document ElasticsearchDocumentConfiguration  import sh platform config Config  import sh platform config Elasticsearch  import javax annotation PostConstruct  import javax enterprise context ApplicationScoped  import javax enterprise inject Disposes  import javax enterprise inject Produces   ApplicationScoped class DocumentManagerProducer   private DocumentCollectionManagerFactory managerFactory   PostConstruct public void init     Config config   new Config    Elasticsearch elasticsearch   config getCredential  database   Elasticsearch  new   final RestHighLevelClient client   elasticsearch get    ElasticsearchDocumentConfiguration configuration   new ElasticsearchDocumentConfiguration    this managerFactory   configuration get client      Produces public DocumentCollectionManager getManager     return managerFactory get  collection      public void destroy  Disposes DocumentCollectionManager manager    this manager close        Redis use Jakarta NoSQL JNoSQL use Redis application first determining Redis client programmatically  import jakarta nosql keyvalue BucketManager  import org jnosql diana redis keyvalue RedisBucketManagerFactory  import org jnosql diana redis keyvalue RedisConfiguration  import redis clients jedis JedisPool  import sh platform config Config  import sh platform config Redis  import javax annotation PostConstruct  import javax enterprise context ApplicationScoped  import javax enterprise inject Disposes  import javax enterprise inject Produces   ApplicationScoped class BucketManagerProducer   private static final String BUCKET    olympus   private RedisBucketManagerFactory managerFactory   PostConstruct public void init     Config config   new Config    Redis redis   config getCredential  redis   Redis  new   final JedisPool jedisPool   redis get    RedisConfiguration configuration   new RedisConfiguration    managerFactory   configuration get jedisPool      Produces public BucketManager getManager     return managerFactory getBucketManager BUCKET     public void destroy  Disposes BucketManager manager    manager close        MySQL MySQL open source relational database technology  Jakarta EE supports robust integration it  JPA  first step choose database use project  Define",
        "objectID": "en/frameworks/jakarta",
        "weight": 5,
        "sidebarTitle": "Jakarta EE",
        "toc": true,
        "description": "<a href=https://microprofile.io/>Eclipse MicroProfile</a> is a community dedicated to optimizing the Enterprise Java mission for microservice-based architectures. The goal is to define a microservices application platform that is portable across multiple runtimes. Currently, the leading players in this group are IBM, Red Hat, Tomitribe, Payara, the London Java Community (LJC), and SouJava.<br><br>\n\nJava Enterprise Edition (Java EE) is an umbrella that holds specifications and APIs with enterprise features, like distributed computing and web services. Widely used in Java, Java EE runs on reference runtimes that can be anything from microservices to application servers that handle transactions, security, scalability, concurrency, and management for the components it’s deploying. Now, Enterprise Java has been standardized under the Eclipse Foundation with the name <a href=\"https://jakarta.ee/\">Jakarta EE</a>.\n"
    },
    {
        "title": "Spring",
        "uri": "en/frameworks/spring",
        "content": "Services configuration reader library Java used examples  so sure check documentation installation instructions latest version  MongoDB use Spring Data MongoDB use MongoDB application first determining MongoDB client programmatically  import com mongodb MongoClient  import org springframework context annotation Bean  import org springframework context annotation Configuration  import org springframework data mongodb config AbstractMongoConfiguration  import sh platform config Config  import sh platform config MongoDB   Configuration public class MongoConfig extends AbstractMongoConfiguration   private Config config   new Config     Override  Bean public MongoClient mongoClient     MongoDB mongoDB   config getCredential  database   MongoDB  new   return mongoDB get       Override protected String getDatabaseName     return config getCredential  database   MongoDB  new  getDatabase        Apache Solr use Spring Data Solr use Solr application first determining Solr client programmatically  import org apache solr client solrj impl HttpSolrClient  import org springframework context annotation Bean  import org springframework context annotation Configuration  import org springframework data solr core SolrTemplate  import sh platform config Config  import sh platform config Solr   Configuration public class SolrConfig    Bean public HttpSolrClient elasticsearchTemplate     Config config   new Config    final Solr credential   config getCredential  solr   Solr  new   final HttpSolrClient httpSolrClient   credential get    String url   httpSolrClient getBaseURL    httpSolrClient setBaseURL url substring 0  url lastIndexOf         return httpSolrClient     Bean public SolrTemplate solrTemplate HttpSolrClient client    return new SolrTemplate client       Redis use Spring Data Redis use Redis application first determining Redis client programmatically  import org springframework context annotation Bean  import org springframework context annotation Configuration  import org springframework data redis connection jedis JedisConnectionFactory  import org springframework data redis core RedisTemplate  import org springframework data redis serializer GenericToStringSerializer   Configuration public class RedisConfig    Bean JedisConnectionFactory jedisConnectionFactory     Config config   new Config    RedisSpring redis   config getCredential  redis   RedisSpring  new   return redis get       Bean public RedisTemplate redisTemplate     final RedisTemplate template   new RedisTemplate    template setConnectionFactory jedisConnectionFactory     template setValueSerializer new GenericToStringSerializer Object class    return template      MySQL MySQL open source relational database technology  Spring robust integration technology  Spring Data JPA  first step choose database use project  Define driver MySQL Java dependencies  determine DataSource client programmatically  import org springframework context annotation Bean  import org springframework context annotation Configuration  import sh platform config Config  import sh platform config MySQL  import javax sql DataSource   Configuration public class DataSourceConfig    Bean name    dataSource   public DataSource getDataSource     Config config   new Config    MySQL database   config getCredential  database   MySQL  new   return database get          note     use MySQL driver MariaDB wish so  MariaDB MariaDB open source relational database technology  Spring robust integration technology  Spring Data JPA  first step choose database use project  Define driver MariaDB Java dependencies  determine DataSource client programmatically  import org springframework context annotation Bean  import org springframework context annotation Configuration  import sh platform config Config  import sh platform config MariaDB  import javax sql DataSource   Configuration public class DataSourceConfig    Bean name    dataSource   public DataSource getDataSource     Config config   new Config    MariaDB database   config getCredential  database   MariaDB  new   return database get        PostgreSQL PostgreSQL open source relational database technology  Spring robust integration technology  Spring Data JPA  first step choose database use project  Define driver PostgreSQL Java dependencies  determine DataSource client programmatically  import org springframework context annotation Bean  import org springframework context annotation Configuration  import sh platform config Config  import sh platform config PostgreSQL  import javax sql DataSource   Configuration public class DataSourceConfig    Bean name    dataSource   public DataSource getDataSource     Config config   new Config    PostgreSQL database   config getCredential  database   PostgreSQL  new   return database get        RabbitMQ use Spring JMS use RabbitMQ application first determining RabbitMQ client programmatically  import org springframework context annotation Bean  import org springframework context annotation Configuration  import org springframework jms annotation EnableJms  import org springframework jms connection CachingConnectionFactory  impor",
        "objectID": "en/frameworks/spring",
        "weight": 6,
        "toc": true,
        "description": "The <a href=\"https://spring.io/projects/spring-framework\">Spring Framework</a> provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform. Platform.sh is flexible, and allows you to use Spring Framework in several flavors such as <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\">Spring MVC</a> and <a href=\"https://spring.io/projects/spring-boot)\">Spring Boot</a>.\n"
    },
    {
        "title": "Symfony - Getting started",
        "uri": "en/frameworks/symfony",
        "content": "Prerequisites Composer Composer tool dependency management PHP  allows declare dependent libraries project needs will install project you      Install Composer Configure app ideal  platform app yaml file will vary project project  free customize yours needed  varies somewhat one Symfony version next Symfony evolved  appropriate repository below Symfony version  Symfony 3 Symfony 4 Additional information",
        "objectID": "en/frameworks/symfony",
        "weight": 7,
        "toc": true,
        "sidebarTitle": "Symfony"
    },
    {
        "title": "Symfony Frequently Asked Questions (FAQ)",
        "uri": "en/frameworks/symfony/faq",
        "content": "store session files  following error  failed  Read only file system  30   app app cache dev classes php line 420 that s Symfony trying write into   var lib php5  read only  solution mount sessions folder Platform sh write sessions folder  Simply edit  platform app yaml add mounts there  mounts       app sessions   source  local source_path  sessions     Then  add line top app_dev php  iniset  session savepath   DIR      app sessions     Why does newly cloned Symfony install throw errors  may encounter WSOD  white screen death  when first clone new Symfony project platform  likely missing dependencies  will need install composer first run following command  cd myprojectname  composer install Why  Permission denied  deploy hook  following error during deploy hook  Launching hook  app console cache clear    bin dash  1  app console  Permission denied means committed executable file  in case  app console   without execute bit set  Run fix problem  chmod a x app console git add app console git commit  m  Fix console script execute permission",
        "objectID": "en/frameworks/symfony/faq",
        "weight": 1,
        "sidebarTitle": "FAQ",
        "toc": true
    },
    {
        "title": "TYPO3 - Getting started",
        "uri": "en/frameworks/typo3",
        "content": "Prerequisites Composer Composer tool dependency management PHP  allows declare dependent libraries project needs will install project you      Install Composer Configure app ideal  platform app yaml file will vary project project  free customize yours needed  recommended baseline TYPO3 configuration listed below  found TYPO3 template project                 Additional information",
        "objectID": "en/frameworks/typo3",
        "weight": 8,
        "sidebarTitle": "TYPO3",
        "toc": true
    },
    {
        "title": "TYPO3 Frequently Asked Questions (FAQ)",
        "uri": "en/frameworks/typo3/faq",
        "content": "Why warnings install tool  TYPO3 install tool doesn t yet fully understand when working cloud envirionment may warn folders not writable  Don t worry  TYPO3 installation will fully functional  add extensions  TYPO3 extension easily added using composer  Just use platform sh CLI tool run composer  follows  platform  e composer require typo3 ter  extension name  git add composer   git commit git push",
        "objectID": "en/frameworks/typo3/faq",
        "weight": 1,
        "sidebarTitle": "FAQ"
    },
    {
        "title": "Wordpress",
        "uri": "en/frameworks/wordpress",
        "content": "Plugin compatibility Platform sh does not blacklist WordPress plugins  However  plugins known require write access own file system part setup process  not possible Platform sh  file system code lives read only security reasons cannot written application  during build hook  cases worked around copying file part build hook process  cases plugin simply incompatible Platform sh  find plugin tries write its own directory recommend filing issue plugin  behavior viewed security bug  Additional information",
        "objectID": "en/frameworks/wordpress",
        "weight": 9,
        "toc": true,
        "description": "The recommended way to deploy WordPress on Platform.sh is using Composer.  The most popular and supported way to do so is with the <a href=\"https://github.com/johnpbloch/wordpress\">John Bloch</a> script.<br><br>\n\nPlatform.sh strongly recommends starting new WordPress projects from our <a href=\"https://github.com/platformsh-templates/wordpress\">WordPress Template</a>, which is built using Composer and includes the WP-CLI by default.  It also includes modifications to the configuration files necessary to connect to a database on Platform.sh automatically.\n"
    },
    {
        "title": "Using Redis with WordPress",
        "uri": "en/frameworks/wordpress/redis",
        "content": "Requirements Add Redis service First need create Redis service   platform services yaml file  add following  rediscache  type  redis 3 2 will create service named rediscache  type redis  specifically version 3 2  Expose Redis service application  platform app yaml file  need open connection new Redis service  relationships section  add following  relationships  redis   rediscache redis  key  left side  name will exposed application PLATFORM_RELATIONSHIPS variable  right hand side name service specified above  rediscache  endpoint  redis   named service something different above  change rediscache that  Add Redis PHP extension will need enable PHP Redis extension   platform app yaml file  add following right type block  Additional extensions runtime  extensions  redis Add Redis library using Composer build WordPress  install WP Redis library following Composer command  composer require devgeniem wp redis object cache dropin commit resulting changes composer json composer lock files  Configuration enable WP Redis cache object cache php file needs copied downloaded package wp content directory  Add following line bottom build hook  cp  r wp content wp redis object cache dropin object cache php web wp wp content object cache php look something like  hooks  build    set  e cp  R web wp wp content plugins   web wp content plugins  cp  R web wp wp content themes   web wp content themes  cp  r wp content wp redis object cache dropin object cache php web wp wp content object cache php Uncomment line when start adding extra language packs   cp  R web wp wp content languages   web wp content languages  Next  place following code wp config php file  somewhere final require_once ABSPATH    wp settings php    line    empty  ENV  PLATFORMRELATIONSHIPS       extension_loaded  redis       relationships   jsondecode base64decode  ENV  PLATFORMRELATIONSHIPS     true    relationship_name    redis     empty  relationships relationship_name      redis    relationships relationship_name  define  WPREDISCLIENT    pecl    define  WPREDISHOST    redis  host     define  WPREDISPORT    redis  port         will define 3 constants WP Redis extension will look order connect Redis server  used different name relationship above  change  relationship_name accordingly  code will no impact when run local development environment  That s it  no Plugin enable WordPress administrative interface  Commit above changes push  Verifying Redis running Run command SSH session environment redis cli  h redis internal info  run push new code repository  give baseline activity Redis installation  little memory allocated Redis cache  push code  run command notice allocated memory will start jumping",
        "objectID": "en/frameworks/wordpress/redis",
        "weight": 1,
        "sidebarTitle": "Redis",
        "toc": true,
        "description": "There are a number of Redis libraries for WordPress, only some of which are compatible with Platform.sh.  We have tested and recommend <a href=\"https://packagist.org/packages/devgeniem/wp-redis-object-cache-dropin\">devgeniem/wp-redis-object-cache-dropin</a>, which requires extremely little configuration.\n"
    },
    {
        "title": "Introduction",
        "uri": "en/gettingstarted",
        "content": "",
        "objectID": "en/gettingstarted",
        "weight": -110,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Developing on Platform.sh",
        "uri": "en/gettingstarted/developing",
        "content": "",
        "objectID": "en/gettingstarted/developing",
        "weight": 3,
        "description": "Once an application has been migrated to Platform.sh, there's plenty more features that will help improve your development life cycle. You can build your site locally, remotely connect to your services, and test new features on a live site all with Platform.sh.\n"
    },
    {
        "title": "Development environments",
        "uri": "en/gettingstarted/developing/dev-environments",
        "content": "Development environments you re developing application  will point create new features it  Typically you re going develop feature separate branch Git repository  run tests  merge feature production application  stress comes breaking live site becomes real worry  Platform sh removes stress considerably providing live development environments features you re working on  guide assumes already  Signed free trial account Platform sh  Started either template project pushed own code Platform sh  not completed steps now  click links so begin",
        "objectID": "en/gettingstarted/developing/dev-environments",
        "weight": 2
    },
    {
        "title": "Create environment",
        "uri": "en/gettingstarted/developing/dev-environments/create-environment",
        "content": "Development Environments Create environment Platform sh supports deployment isolated development environments branches  complete exact copies data  useful testing changes isolation merging them       Create branch  changes  push Platform sh Create checkout branch new feature  platform branch dev command will create new branch dev master  local dev branch work on  dev will clone master  including exact copy its data files  changes code  commit them  push Platform sh remote  git add   git commit  m  Commit message   git push platform dev   Note  create new branch Git  i e  git checkout  b new feature   when push its commits Platform sh branch will not automatically build  new feature inactive environment  Platform sh does not assume every branch associated active environment  plan will limit number active environments allowed      want activate new feature environment pushed  so command       platform environment activate new feature   Verify Platform sh built deployed environment  verify activated visiting its new url  platform url command will provide list generated routes application according routes configured  structure will be  Enter number open URL  0  https       platformsh site   1  https   www     platformsh site  above URLs represent upstream  0  redirect  1  routes common routes yaml configuration",
        "objectID": "en/gettingstarted/developing/dev-environments/create-environment",
        "weight": 2
    },
    {
        "title": "Download the code",
        "uri": "en/gettingstarted/developing/dev-environments/download-code",
        "content": "Development Environments Download code already pushed code Platform sh  already local repository build from  Otherwise  will necessary download local copy project first       project ID will need project ID  retrieve ID time using CLI commands platform platform project list  copy repository locally Next  use CLI download code Platform sh project using command platform local copy application configured Platform sh remote repository  create new",
        "objectID": "en/gettingstarted/developing/dev-environments/download-code",
        "weight": 1
    },
    {
        "title": "Merge into production",
        "uri": "en/gettingstarted/developing/dev-environments/merge",
        "content": "Development Environments Merge production you ve chance verify application built deployed correctly development environment  you re ready merge production site  Platform sh provides backup features protect against unforeseen consequences merges  keeping historical copy code data         Note    project flag not needed running platform command within local repository  Create backup merge dev feature master  create backup master environment  backup will preserve code its data  platform backup   project Select master environment want back up  Merge feature production git checkout master git merge dev git push When build process completes  verify changes merged  platform url Restore backup restore code data time backup  use command platform backup restore   project",
        "objectID": "en/gettingstarted/developing/dev-environments/merge",
        "weight": 3
    },
    {
        "title": "Next steps",
        "uri": "en/gettingstarted/developing/dev-environments/next-steps",
        "content": "Development Environments Next steps guide learned create activate live feature environments  test them  merge production safely using backups  Don t stop now  features Platform sh helpful developers  Developing Platform sh next guide shows set development workflow benefit Platform sh       Additional Resources",
        "objectID": "en/gettingstarted/developing/dev-environments/next-steps",
        "weight": 4
    },
    {
        "title": "Local development",
        "uri": "en/gettingstarted/developing/local-development",
        "content": "Local development project Platform sh  helpful run build process local machine so develop test new features pushing them  guide will steps connecting remotely services building application locally  steps assume already  Signed free trial account Platform sh  Started either template project pushed own code Platform sh  not completed steps now  click links so begin",
        "objectID": "en/gettingstarted/developing/local-development",
        "weight": 1
    },
    {
        "title": "Build site locally",
        "uri": "en/gettingstarted/developing/local-development/build-locally",
        "content": "Local development Build site locally you ve opened tunnels services  you ll access data environment  that s left actually build site       Build site repository root  run command platform build Platform CLI will first ask source directory build destination  will use  platform app yaml file execute build process locally  will create _www directory project root symlink currently active build  located  platform local builds  Verify Move build destination  i e  cd _www  run local web server verify build                 php  d variables_order EGPCS  S localhost 8001                     python3  m http server 8000                     ruby  run  e httpd    p 8000                Applications written Node js  Go Java configured listen port locally  so will necessary execute program directly  Cleanup That s it  easily spin local build application test new features full access data services  When finished  shut down web server close tunnel services  platform tunnel close know connect services Platform sh perform local build during development",
        "objectID": "en/gettingstarted/developing/local-development/build-locally",
        "weight": 3
    },
    {
        "title": "Connect to services",
        "uri": "en/gettingstarted/developing/local-development/connect-services",
        "content": "Local development Connect services   Note  application does not contain services  not need open tunnel proceed next step  local copy application code  changes project without pushing Platform sh time test them  Instead locally build application using CLI  even when its functionality depends number services       Open SSH tunnel connect services Open local SSH tunnels environment s services  platform tunnel open Export environment variables Platform sh utilizes environment variables called Relationships within application container  store credentials needed connect individual services  order connect remotely using SSH tunnel will need mimic environment variables locally  export PLATFORM_RELATIONSHIPS    platform tunnel info   encode   order use credentials connect services  may necessary install clients services locally  Additionally  application needs access PORT environment variable  mock variable used Platform sh environment export PORT 8888 using Config Reader library application  will necessary mock two additional variables export PLATFORMAPPLICATIONNAME  export PLATFORM_BRANCH  Verify visualize open tunnels application command platform tunnel list tunnel will close itself timeout period inactivity  so command platform tunnel close created SSH tunnel services  build application locally",
        "objectID": "en/gettingstarted/developing/local-development/connect-services",
        "weight": 2
    },
    {
        "title": "Download the code",
        "uri": "en/gettingstarted/developing/local-development/download-code",
        "content": "Local development Download code already pushed code Platform sh  already local repository build from  Otherwise  will necessary download local copy project first       project ID will need project ID  retrieve ID time using CLI command platform  copy repository locally Next  use CLI download code Platform sh project using command platform Next connect its services build machine  Back local copy code",
        "objectID": "en/gettingstarted/developing/local-development/download-code",
        "weight": 1
    },
    {
        "title": "Next steps",
        "uri": "en/gettingstarted/developing/local-development/next-steps",
        "content": "Local development Next steps guide opened SSH tunnel Platform sh project built application locally  Don t stop now  far features Platform sh profoundly helpful developers left explore  Developing Platform sh Consult additional resources help improve development life cycle       Additional Resources",
        "objectID": "en/gettingstarted/developing/local-development/next-steps",
        "weight": 4
    },
    {
        "title": "Getting Started",
        "uri": "en/gettingstarted/gettingstarted",
        "content": "",
        "objectID": "en/gettingstarted/gettingstarted",
        "weight": -1,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Import your own code",
        "uri": "en/gettingstarted/gettingstarted/own-code",
        "content": "",
        "objectID": "en/gettingstarted/gettingstarted/own-code",
        "weight": 2,
        "layout": "single",
        "description": "Welcome to Platform.sh! Importing your own code to Platform.sh is as easy as installing the CLI and configuring your application with a few YAML files.<br><br>\n\nWhen code examples are provided in the guide, click the language of your application.  If you consult those examples and a few templates as you go along, your code will be up and running on Platform.sh in no time.\n"
    },
    {
        "title": "Configure application",
        "uri": "en/gettingstarted/gettingstarted/own-code/app-configuration",
        "content": "following project structure       platform       routes yaml       services yaml      platform app yaml     example  platform app yaml looks this                                                                                                                platform appl yaml file extremely flexible  contain lines fine grained control application  least  Platform sh requires three principle attributes file control builds  name  name application container does not project name  single application cases simply name app  notice next step  when configure requests handled  platform routes yaml name reused there  important same    note     trying deploy microservices  constraint application names unique  type  type attribute  platform app yaml sets container base image application  sets primary language  general  type form type    Set version one supported Platform sh  find below documentation language       disk  disk attribute defines amount persistent storage need available application  requires minimum value 256 MB  few additional keys  platform app yaml will likely need use fully configure application  not required  relationships  Relationships define services mapped within application  Without block  application cannot default communicate service container  Provide unique name relationship associate service  example  previous step defined MariaDB container  platform services yaml                define relationship  i e  database   platform app yaml connect it                 Build deploy tasks  number ways Git repository turned running application  general  build process will run build flavor  install dependencies  execute build hook provide  When build process completed  deploy process will run deploy hook  build  build key defines happens during build process using flavor property  common inclusion PHP Node js applications  so check documentation configuration requires key  dependencies  key makes possible install system level dependencies part build process  hooks  Hooks define custom scripts want run different points during deployment process  build  build hook run build flavor present  file system fully writable  no services subset variables available point  full list build time runtime variables available variables section public documentation  deploy  deploy hook run application container started  started accepting requests  Services available  file system will read only point forward  post deploy  post deploy hook functions exactly deploy hook  container accepting connections  web  web key configures web server single web instance container running single Nginx server process  behind runs application  commands  Defines command actually launch application  start key launches application  languages except PHP  web commands start treated required  PHP  will instead need define script name passthru  described below locations  locations  Allows control application container responds incoming requests fine grained level  simplest possible locations configuration one simply passes requests application unconditionally  web  locations       passthru  true above configuration forwards requests    process started web commands start  case PHP containers  passthru specify PHP file forward request to  docroot file lives  example  web  locations       root   web  passthru    app php  mounts  Configuring mounts not required  unless part application requires write access  default  Platform sh provided read only filesystem projects so confident health security application once deployed  application requires writable storage function properly  i e   saving files  mounts not contain code  defined so  mounts   web uploads   source  local source_path  uploads case  application will able write mount visible  app web uploads directory application container  local source  mnt uploads  Consult mounts documentation thorough discussion attributes written    note     language framework may additional attributes will need include  platform app yaml depending needs application  find else may need include configure application  consult       Application documentation Platform sh      documentation goes far extensive detail attributes included application configuration  used primary reference      Language specific templates Platform sh Projects      Compare  platform app yaml file simple template above templates when writing own  configured application  will next need handle HTTP requests application using  platform routes yaml file",
        "objectID": "en/gettingstarted/gettingstarted/own-code/app-configuration",
        "weight": 7,
        "description": "You will next need to include information that defines how you want your <a href=\"/configuration/app-containers.html\">application</a> to behave each time it is built and deployed on Platform.sh in a <code>.platform.app.yaml</code> file.\n"
    },
    {
        "title": "Install the CLI",
        "uri": "en/gettingstarted/gettingstarted/own-code/cli-install",
        "content": "Install CLI terminal run following command depending operating system  Installing OSX Linux curl  sS https   platform sh cli installer   php Installing Windows curl https   platform sh cli installer  o cli installer php php cli installer php Authenticate Verify Once installation completed  run CLI terminal command platform moment view available commands command platform list installed CLI communicating Platform sh  configure push project Platform sh",
        "objectID": "en/gettingstarted/gettingstarted/own-code/cli-install",
        "weight": 3,
        "description": "In the previous steps you checked that the requirements on your computer were met and configured an SSH key on your Platform.sh account. Now all we have to do is install the CLI and you can access your projects from the command line.\n"
    },
    {
        "title": "Requirements for the CLI",
        "uri": "en/gettingstarted/gettingstarted/own-code/cli-requirements",
        "content": "Git Git open source version control system utilized Platform sh  change Platform sh project will need committed via Git  Git commit messages environment Environment Activity feed management console project create  getting started  sure Git installed computer  SSH key pair Once account set CLI installed  Platform sh needs one additional piece information computer so access projects command line  unfamiliar generate RSA public private key  excellent instructions documentation so  Add SSH key account requirements way  place SSH key onto Platform sh so communicate projects computer using management console  Log account      Access SSH key settings management console management console  move top right hand corner screen click dropdown menu left settings gear box icon  menu  click Account  next page will normally list projects  point will empty you re just starting out  Click Account Settings link top page  click SSH keys tab left account information  Add SSH key account point won t anything listed body page  don t SSH configured Platform sh yet  Click   Add public key button top right hand corner screen  will open window two fields  Name key something memorable  home computer  field below that  paste content public key created previous step  When finished  click Save save key  That s it  met requirements configured SSH key  Platform sh authenticate computer interact project command line  Next  will need install Platform sh CLI so import code project",
        "objectID": "en/gettingstarted/gettingstarted/own-code/cli-requirements",
        "weight": 2,
        "description": "Now that you have created your free trial account, you are able to push your application to Platform.sh once you have installed the CLI, but there are a few requirements that must be met first.\n"
    },
    {
        "title": "Connect to services",
        "uri": "en/gettingstarted/gettingstarted/own-code/connect-services",
        "content": "Import own code Connect Services   note      application does not require access services left  platform services yaml blank  feel free proceed next step  point configured application s services its build deploy process  platform services yaml  platform app yaml files  example   platform app yaml file may defined relationship called database  relationships  database   mysqldb mysql  configured  platform services yaml mysqldb  type  mysql 10 2 disk  1024 order connect service use application  Platform sh exposes its credentials application container within base64 encoded JSON PLATFORM_RELATIONSHIPS environment variable  access variable install Platform sh configuration reader library                go mod edit  require github com platformsh config reader go v2                     npm install platformsh config   save                     compile group   sh platform   name   config   version  2 2 0                      sh platform config 2 2 0                     composer install platformsh config reader                     pip install platformshconfig                access credentials database    codetabs name  PHP   type  php      use Platformsh ConfigReader Config   config   new Config     credentials    config  credentials  database        language name  Python   type  py      platformshconfig import Config config   Config   credentials   config credentials  database       language name  Node js   type  js      const config   require  platformsh config   config    const credentials   config credentials  database        language name  Java   type  java      import Config  Config config   new Config    Credential cred   config getCredential  database       language name  Go   type  go      import psh  github com platformsh config reader go v2  config  err    psh NewRuntimeConfig      Handle err credentials  err    config Credentials  database      Handle err     endcodetabs    read decode environment variable directly     codetabs name  PHP   type  php       relationships   jsondecode base64decode getenv  PLATFORM_RELATIONSHIPS     TRUE    credentials    relationships  database        language name  Python   type  py      import os  json  base64 relationships   json loads base64 b64decode os environ  PLATFORM_RELATIONSHIPS     credentials   relationships  database       language name  Node js   type  js      relationships   JSON parse new Buffer process env  PLATFORM_RELATIONSHIPS     base64   toString     credentials   relationships  database        endcodetabs              relationships   JSON parse new Buffer process env  PLATFORM_RELATIONSHIPS     base64   toString     credentials   relationships  database               relationships   jsondecode base64decode getenv  PLATFORM_RELATIONSHIPS     TRUE    credentials    relationships  database              import os  json  base64 relationships   json loads base64 b64decode os environ  PLATFORM_RELATIONSHIPS     credentials   relationships  database             either case  credentials used connect database     username    user    scheme    mysql    service    mysql    fragment   null   ip    169 254 197 253    hostname    czwb2d7zzunu67lh77infwkm6i mysql service _ eu 3 platformsh site    public   false   cluster    rjify4yjcwxaa master 7rqtwti    host    mysql internal    rel    mysql    query      is_master   true     path    main    password        type    mysql 10 2    port   3306   find information Platform sh Config Reader libraries GitHub  PHP Config Reader Python Config Reader Node js Config Reader Java Config Reader Go Config Reader find examples connect Platform sh managed services multiple languages Services Documentation  Project configured  services connected   time commit changes push repository onto project",
        "objectID": "en/gettingstarted/gettingstarted/own-code/connect-services",
        "weight": 9
    },
    {
        "title": "Create a new project",
        "uri": "en/gettingstarted/gettingstarted/own-code/create-project",
        "content": "Create empty project Type command platform create terminal  CLI will ask set initial project configurations  Project title  need unique name project  so title one CLI Project  Region  general will choose region closest site s traffic coming from  Here  go ahead begin typing us 2 platform sh CLI will auto complete rest you  Plan  Select development plan trial project  Environments  master branch will become Master environment  live production environment application  Additionally  branches may activated fully running environments developing new features  later  value selects maximum number development environments project will allow  change value later time  now  press Enter select default number environments  Storage  modify amount storage application use CLI management console  upgrade storage later once project starts growing  now  press Enter select default amount storage  When CLI finished creating project  will output project ID  primary identifier making changes projects  will need use set Platform sh remote repository next step  retrieve project ID command platform project list  lists projects IDs table  Set Platform sh remote application Next will need connect remote project order push code Platform sh  not already initialized project directory Git repository  will first need so git init set Platform sh remote command platform project set remote That s it  created empty project connected repository project using CLI  Move next step start configuring repository deploy Platform sh",
        "objectID": "en/gettingstarted/gettingstarted/own-code/create-project",
        "weight": 4,
        "description": "With the Platform.sh CLI now installed and configured to communicate with your account, you can create a new project from the command line and connect it to your application.\n"
    },
    {
        "title": "Open a free trial account",
        "uri": "en/gettingstarted/gettingstarted/own-code/free-trial",
        "content": "Alternatively  sign using existing GitHub  Bitbucket  Google account  choose option  will able set password Platform sh account later",
        "objectID": "en/gettingstarted/gettingstarted/own-code/free-trial",
        "weight": 1,
        "description": "The best way to understand a tool is to use it. That's why Platform.sh offers a free one month trial.<br><br>\n\nVisit the <a href=\"https://accounts.platform.sh/platform/trial/general/setup\">Platform.sh accounts</a> page and fill out your information to set up your trial account.\n"
    },
    {
        "title": "Next steps",
        "uri": "en/gettingstarted/gettingstarted/own-code/next-steps",
        "content": "Import own code Next steps guide created project using CLI configured project run Platform sh using few simple configuration files  Don t stop now  far features Platform sh profoundly helpful developers left explore  Developing Platform sh Once application migrated Platform sh  there s plenty features will help improve development life cycle            Additional Resources",
        "objectID": "en/gettingstarted/gettingstarted/own-code/next-steps",
        "weight": 11
    },
    {
        "title": "Configuring projects",
        "uri": "en/gettingstarted/gettingstarted/own-code/project-configuration",
        "content": "Consult template alongside guide go guide  example files will provided will give good impression configure applications Platform sh programming language use  However  simple examples own application may require detailed configuration examples address  recommended look maintained templates additional guidance  Select language choose one templates closely resemble application keep template tab continue guide  Using two resources together fastest correctly configure project Platform sh       Create empty configuration files will notice templates above contain following structure around application code       platform       routes yaml       services yaml      platform app yaml     order successfully deploy Platform sh add three YAML files   platform routes yaml file  configures routes used environments  is  describes incoming HTTP request going processed Platform sh   platform services yaml file  configures services will used application  Connecting Platform sh s maintained services requires properly writing file  file present  application does not require services remain empty  least one  plaform app yaml file  configures application itself  provides control application will built deployed Platform sh  When set Platform sh remote repository previous step  CLI automatically created hidden configuration directory  platform you  next steps will explore detail configuration files include  create empty files place  touch  platform routes yaml touch  platform services yaml touch  platform app yaml empty configuration files place  will need specify service configuration  platform services yaml",
        "objectID": "en/gettingstarted/gettingstarted/own-code/project-configuration",
        "weight": 5,
        "description": "In the previous step, you created a new project on Platform.sh using the CLI. Now, there are a few configuration steps left that will help Platform.sh know what to do with your application during builds and deployments.\n"
    },
    {
        "title": "Build, Deploy, Done!",
        "uri": "en/gettingstarted/gettingstarted/own-code/push-project",
        "content": "Import own code Build  Deploy  Done  configuration files complete  that s left commit changes push Platform sh       Commit push Run commands git add   git commit  m  Add config files   git push  u platform master Platform sh will detect presence configuration files use build application  Verify When build completed  verify deployment typing command platform url will return list routes  Pick primary route 0 click Enter  will open application browser window  Alternatively  log back management console new project  Select Master environment Environments list click link below Overview box left side page       That s it  Using Platform sh CLI few properly configured files  pushing application run Platform sh takes few minutes  code Platform sh  check Next Steps started developing",
        "objectID": "en/gettingstarted/gettingstarted/own-code/push-project",
        "weight": 10
    },
    {
        "title": "Configure routes",
        "uri": "en/gettingstarted/gettingstarted/own-code/routes-configuration",
        "content": "Import own code Configure routes final configuration file will need modify repository  platform routes yaml file  describes incoming HTTP request going processed Platform sh       platform       routes yaml       services yaml      platform app yaml     minimal configuration  platform routes yaml languages will look similar                 Configuring routes done using either absolute URL URL template shown examples above form http   www  default    default  will substituted either configured domain automatically generated Platform sh  set domain example com  route configuration http   www  default  will resolved http   www example com   production  master  environment s routes will configured according rules  so will development environment activate  route configured following properties  type  upstream  serves application  Takes form upstream   http  using application name set  platform app yaml  redirect  configures redirects http    default  application  cache  controls caching behavior route  redirects  controls redirect rules associated route    note     language framework may additional attributes will need include  platform routes yaml depending needs application  find else may need include configure routes  consult       Routes documentation Platform sh     documentation goes far extensive detail attributes included route configuration  used primary reference      Language specific templates Platform sh Projects      Compare  platform routes yaml file simple template above templates when writing own  next step  will able Platform sh leverages environment variables connecting application its services simple",
        "objectID": "en/gettingstarted/gettingstarted/own-code/routes-configuration",
        "weight": 8
    },
    {
        "title": "Configure services",
        "uri": "en/gettingstarted/gettingstarted/own-code/service-configuration",
        "content": "following project structure       platform       routes yaml       services yaml      platform app yaml     example  platform services yaml will look something this   platform services yaml                application does not use services point leave blank  exist repository run Platform sh  application does use database services  configure following attributes  name  Provide name service  so long alphanumeric  application requires multiple services type  sure give different names so data one service overwritten another  type  specifies service type its version using format type version Consult table below lists Platform sh maintained services  along type supported versions  links will service s dedicated page documentation       disk  disk attribute configures amount persistent disk will allocated services  Projects default allocated 5 GB  5120 MB   space distributed across services  Note not services require disk space  specify disk attribute service doesn t use it  Redis  will receive error when trying push changes    note     language framework may additional attributes will need include  platform services yaml depending needs application  find else may need include configure services  consult       Services documentation Platform sh     documentation goes far extensive detail attributes included service configuration  used primary reference      Language specific templates Platform sh Projects      Compare  platform services yaml file simple template above templates when writing own  Platform sh provides managed services  service comes considerable default configuration will not include yourself  services yaml  Next  will next need tell Platform sh build deploy application using  platform app yaml file",
        "objectID": "en/gettingstarted/gettingstarted/own-code/service-configuration",
        "weight": 6,
        "description": "In the previous step, you created a collection of empty configuration files that will allow the project to be deployed on Platform.sh.<br><br>\n\nNow you will need to include information that will tell Platform.sh how you want your application to connect to its <a href=\"/configuration/services.md)\">services</a> in a <code>.platform/services.yaml</code> file..\n"
    },
    {
        "title": "Start with a template",
        "uri": "en/gettingstarted/gettingstarted/template",
        "content": "",
        "objectID": "en/gettingstarted/gettingstarted/template",
        "weight": 1,
        "layout": "single",
        "description": "Welcome to Platform.sh! Getting started is as easy as opening a <a href=\"https://accounts.platform.sh/platform/trial/general/setup\">free trial account</a> and initializing a <a href=\"/development/templates.html\">template project</a>.<br><br>\n\nThere are no requirements on your part at this point. This guide will take you from zero to hero - from first glance to a deployed application entirely from your browser.\n"
    },
    {
        "title": "Build, Deploy, Done!",
        "uri": "en/gettingstarted/gettingstarted/template/check-status",
        "content": "Explore management console When build screen cleared  Platform sh will return management console  project account  version page will time visit console  will start main page new project  First Project  here  control settings project monitor its status  Environments box  click Master  Check build status minute notice information available page  Overview box Master environment  live environment built master branch application code  will status Building  Once status updated Active  build complete application deployed  Environment Activity block  done so far two initial entries  First Project created  template profile chose initialized environment  Done  That s it  Once build status changed Active  application deployed Platform sh  view template clicking link visible Master environment Overview box  will open tab browser new live site  few steps created free trial account  configured template application project deployed using management console entirely browser  Using Platform sh CLI  however  even control project configurations  including ability migrate own applications Platform sh  Move onto next step install it",
        "objectID": "en/gettingstarted/gettingstarted/template/check-status",
        "weight": 3,
        "description": "Once you have configured the template application in the previous step, Platform.sh will build your project for you. If you created a blank project, be sure to <a href=\"/development/ssh.md\">set up your SSH keys</a> before trying to upload your files.\n"
    },
    {
        "title": "Install the CLI",
        "uri": "en/gettingstarted/gettingstarted/template/cli-install",
        "content": "Install CLI terminal run following command  Installing OSX Linux curl  sS https   platform sh cli installer   php Installing Windows curl https   platform sh cli installer  o cli installer php php cli installer php Authenticate Verify Once installation completed  run CLI terminal command platform   note     opened free trial account using login  i e  GitHub   will not able authenticate command until setup account password Platform sh console  able list Platform sh projects  including template made guide  copy its project ID hash  download local copy repository command platform local copy  create branches  commit them  push changes Platform sh right away  git push platform master minute explore commands available CLI using command platform list  That s it  management console set CLI installed computer  you re exploring ways Platform sh improve development workflow",
        "objectID": "en/gettingstarted/gettingstarted/template/cli-install",
        "sidebarTitle": "Install the CLI",
        "actualTitleBreaksNavs": "Next Steps: Installing the Platform.sh CLI",
        "weight": 5,
        "description": "With all of the requirements met, install the CLI to start developing with Platform.sh.\n"
    },
    {
        "title": "Next Steps: Requirements for the CLI",
        "uri": "en/gettingstarted/gettingstarted/template/cli-requirements",
        "content": "Git Git open source version control system used Platform sh  change Platform sh project will need committed via Git  Git commit messages environment Environment Activity feed management console project create  getting started  sure Git installed computer  SSH key pair Once account set CLI installed  Platform sh needs one additional piece information computer so access projects command line  unfamiliar generate SSH public private key  instructions documentation so  Add SSH public key account Add SSH public key Platform sh account so communicate projects using CLI       Access SSH key settings management console management console  move top right hand corner screen click dropdown menu left settings gear box icon  menu  click Account  next page lists active projects  includes First Project  Click Account Settings link top page  click SSH keys tab left account information  Add SSH public key account Click   Add public key button top right hand corner screen  will open window two fields  Name key something memorable  home computer  field below that  paste content public key  When finished  click Save save key  That s it  met requirements configured SSH key  that s left install Platform sh CLI so interact projects command line",
        "objectID": "en/gettingstarted/gettingstarted/template/cli-requirements",
        "weight": 4,
        "sidebarTitle": "Requirements for the CLI",
        "description": "With the <a href=\"/administration/web.html\">management console</a> you can start new projects from templates just as you did in the previous steps, but deploying your own applications requires you to also use the <a href=\"/development/cli.html\">Platform.sh CLI</a>.<br><br>\n\nBefore you install it there are a few requirements that must be met first.\n"
    },
    {
        "title": "Create a new project",
        "uri": "en/gettingstarted/gettingstarted/template/create-project",
        "content": "not yet projects Platform sh  first thing will when sign workflow creating new project  Name project Give project name First Project click Next  Set code base will able large collection Platform sh s supported templates  several types templates available  including simple language specific examples  ready to use frameworks build upon  full installed applications start using immediately installation  comfortable particular language  click dropdown labeled languages  Select language template list will update  Select template click Next    note     find source code Platform sh templates GitHub Templates Organization  Plan size management console gives option setting plan size beginning  always upgrade plan later well  now  select Development plan size click Next  Project region last step setting new project configure its region  corresponds data center project will live  Select region closely matches traffic will click Next  few selections Platform sh will create project build template less two minutes",
        "objectID": "en/gettingstarted/gettingstarted/template/create-project",
        "weight": 2,
        "description": "In the previous step, you set up a free trial account with Platform.sh. Now you have access to the Platform.sh <a href=\"/administration/web.html)\">management console</a>.<br><br>\n\nFrom here you can create projects, adjust account settings, and a lot more that you will explore throughout these Getting Started guides.\n"
    },
    {
        "title": "Open a free trial account",
        "uri": "en/gettingstarted/gettingstarted/template/free-trial",
        "content": "Alternatively  sign using existing GitHub  Bitbucket  Google account  choose option  will able set password Platform sh account later",
        "objectID": "en/gettingstarted/gettingstarted/template/free-trial",
        "weight": 1,
        "description": "The best way to understand a tool is to use it. That's why Platform.sh offers a free one month trial.<br><br>\n\nVisit the <a href=\"https://accounts.platform.sh/platform/trial/general/setup\">Platform.sh accounts</a> page and fill out your information to set up your trial account.\n"
    },
    {
        "title": "Next steps",
        "uri": "en/gettingstarted/gettingstarted/template/next-steps",
        "content": "Import own code Templates great  configuring own application run Platform sh goal       Developing Platform sh Once application migrated Platform sh  there s plenty features will help improve development life cycle            Additional Resources",
        "objectID": "en/gettingstarted/gettingstarted/template/next-steps",
        "weight": 5,
        "<!-- toc": "true -->",
        "description": "In this guide you created a project using the <a href=\"/administration/web.html\">management console</a> and installed the <a href=\"/development/cli.html\">Platform.sh CLI</a>. Now you can explore some of the next steps for working with Platform.sh.\n"
    },
    {
        "title": "Next steps",
        "uri": "en/gettingstarted/next-steps",
        "content": "Next Steps application running  additional pieces information will help leverage every bit technology Platform sh offer            Additional Resources",
        "objectID": "en/gettingstarted/next-steps",
        "weight": 4,
        "description": "Now that your application is up and running, here are some additional pieces of information that will help you leverage every bit of technology Platform.sh has to offer."
    },
    {
        "title": "Going live",
        "uri": "en/gettingstarted/next-steps/going-live",
        "content": "Going live You ve set project Platform sh either pushing code directly setting integration external repository  it s time site live  guide will process configuring project production  setting domain  configuring DNS so users reach application want to",
        "objectID": "en/gettingstarted/next-steps/going-live"
    },
    {
        "title": "Configure DNS",
        "uri": "en/gettingstarted/next-steps/going-live/configure-dns",
        "content": "Going live Configure DNS provider next step configure DNS provider point domain master environment Platform sh       access CNAME target terminal using CLI command platform environment info edge_hostname Add CNAME record desired domain value edge_hostname  Depending registrar  value may called  Alias  something similar  application going serve multiple domains  will need add CNAME record them  find information using apex domain CNAME records Going Live documentation  Depending registrar TTL set domain  may 72 hours DNS change fully propagate across Internet",
        "objectID": "en/gettingstarted/next-steps/going-live/configure-dns",
        "weight": 3
    },
    {
        "title": "First steps",
        "uri": "en/gettingstarted/next-steps/going-live/first-steps",
        "content": "Going live Preliminary Steps site live  few steps will help prepare project  Register domain choose suitable DNS provider plan serving exclusively subdomain historically common www  subdomain  will able use DNS provider supports CNAME records  wish use apex domain  eg  https   site com  no www  subdomain  choose one specialized DNS providers allow use ALIAS ANAME records  sure moving next steps  CLI will reject attempts add domains not allow CNAMEs  Test routes Test application sure routes functioning intended  Consult routes documentation verify routes yaml properly written  access restrictions enabled during development  sure remove well   Optional  Obtain 3rd party SSL needed Let s Encrypt SSL certificates automatically issued Platform sh projects no charge you  instead use 3rd party SSL certificate  sure purchased active prior going live  Additionally  application uses wildcard routes  will require custom certificates them  Let s Encrypt does not support wildcard certificates  gone following checklist application ready taken live",
        "objectID": "en/gettingstarted/next-steps/going-live/first-steps",
        "weight": 1
    },
    {
        "title": "Set your domain",
        "uri": "en/gettingstarted/next-steps/going-live/set-domain",
        "content": "Going live Configure Domain will need configure registered domain Platform sh project going live  either management console using CLI  management console      changed project production plan  click  Go live  button top project page  Alternatively  click  Settings  top page  visit  Domains  section left  Click  Add   button top right hand corner page  enter registered domain select want default domain project  add multiple domains project  one set default  When you re finished  click  Add domain   project will once again redeploy apply changes  Using CLI add domain project using Platform CLI  terminal window  type command platform domain add example com   project CLI will validate registered domain provision Let s Encrypt certificates it",
        "objectID": "en/gettingstarted/next-steps/going-live/set-domain",
        "weight": 4
    },
    {
        "title": "Troubleshooting",
        "uri": "en/gettingstarted/next-steps/going-live/troubleshooting",
        "content": "Going live Done  application taken live  mentioned before  may little time DNS fully propagate  depending registrar  Otherwise  domain point master production environment project  Additional information following steps project not successfully configure domain  consult Troubleshooting guide here  Going Live  Troubleshooting Consider using Fastly CDN increased performance control caching  Going Live  Fastly Consider using Cloudflare s TLS SSL service secure site via HTTPS when using CDN  Going Live  Cloudflare",
        "objectID": "en/gettingstarted/next-steps/going-live/troubleshooting",
        "weight": 5
    },
    {
        "title": "Upgrade plan",
        "uri": "en/gettingstarted/next-steps/going-live/upgrade-plan",
        "content": "Going live Upgrade Plan  Development  plan projects cannot assigned domain name  so will not able go live until upgrade least Standard plan  done using management console       Development plans four environments  three development one  future  production environment  master branch  example   Small  plan sizes provide production environment  restrict application use single service  i e  database   project  click  Go live  button top right hand corner project preview image  will allow edit project s plan  reached  Account  page clicking  Edit  vertical dot dropdown project  Select plan size appropriate needs application  page increase number development environments  amount storage  changes click  Update plan  bottom page  application will redeploy",
        "objectID": "en/gettingstarted/next-steps/going-live/upgrade-plan",
        "weight": 2
    },
    {
        "title": "External integrations",
        "uri": "en/gettingstarted/next-steps/integrations",
        "content": "External Integrations host application repository entirely Platform sh  it s likely will want integrate deployments pre existing service  Platform sh easily integrated external services GitHub  Gitlab  Bitbucket  Choose current service  guide will steps mirror repository Platform sh environments created automatically pull requests branches       steps assume already  Signed free trial account Platform sh  not completed steps now  click links so begin",
        "objectID": "en/gettingstarted/next-steps/integrations"
    },
    {
        "title": "Going live",
        "uri": "en/golive",
        "content": "",
        "objectID": "en/golive",
        "weight": -70,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Content Delivery Networks",
        "uri": "en/golive/cdn",
        "content": "DNS management distributed nature CDNs means proper functioning  domains intend use CDN will required use CNAME records pointing DNS entries  Pointing root domain  example com  CNAME record not possible DNS hosts  so will need confirm functionality migrate new DNS host  CloudFlare detailed writeup challenges root CNAMEs  event team choose pure Fastly solution  negated providing set Anycast IP addresses you  allows create records root domain will point Fastly s CDN  Initial setup Enterprise Dedicated plans  CDN setup handled Platform sh part onboarding  application stood its Dedicated VMs begin collaborative process provisioning CDN configuring DNS caching setup  provide CDN services staging production  self service Grid plans  setup done time customer  Cache configuration Depending CDN decided part pre sales analysis  may varying levels flexibility regard caching ongoing cache invalidation  discussed sales representative senior technical members team concerns CDN configuration functionality  using Fastly CDN  possible provide either custom VCL snippets full custom VCL file  Platform sh will grant customers access so upon request  However  aware downtime caused custom VCL configuration will not covered SLA  just application code repository not covered SLA  TLS encryption Security related topic encryption data fundamental principles Platform sh  provide TLS certificates default Enterprise Dedicated package  allows encryption traffic users application  default will provision shared certificate chosen CDN vendor  opt Global Application Cache  will provision certificates site subdomain  www  asset CDN subdomain  use wildcard certificates secure production  staging  subdomains simultaneously  need Extended Validation TLS certificates will need provide own issuer choice install you  need provide own TLS certificate  place certificate  unencrypted private key  necessary certificate chain supplied TLS provider application s private directory  not web accessible   open ticket let team know install it  Platform sh Enterprise Dedicated supports single TLS certificate origin  Support multiple certificates offered CDN CloudFront Fastly  Self signed certificates optionally used origin development purposes enabling TLS CDN origin  TLS certificates used CloudFront 2048 bit certificates  Larger sizes will not work  Web Application Firewall   Anti DDoS Platform sh hosted sites  either Grid Dedicated  live infrastructure provided major cloud vendors  vendors include own Level 3 DDoS protection sufficient vast majority cases  Customers welcome put own WAF front Dedicated cluster add security measures not included offering  router cache When using CDN Platform sh router s HTTP cache becomes redundant  cases it s best disable outright  Modify route  platform routes yaml so disable cache   https    default     type  upstream upstream   app http  cache  Disable HTTP cache route  will handled CDN instead  enabled  false",
        "objectID": "en/golive/cdn",
        "weight": 3,
        "toc": true,
        "layout": "single",
        "description": "Platform.sh Enterprise plans (both Grid and Dedicated) include a Fastly CDN account by default, which will be managed by Platform.sh.  Our experience has shown that effective caching can mean a huge difference in the perceived performance of an application by its users, and that placing the caches closer to your users (wherever they may be) is the best solution currently available.<br><br>Self-Service Grid plans do not include a CDN by default, but you are welcome to configure one yourself.  See our <a href=\"/bestpractices/http-caching.html\">guidelines</a> for when and if to use a CDN for HTTP caching.<br><br>We have partnerships with a variety of CDN vendors depending on your application’s needs.  Our recommended CDN provider is <a href=\"/golive/cdn/fastly.html\">Fastly</a>."
    },
    {
        "title": "Cloudflare configuration",
        "uri": "en/golive/cdn/cloudflare",
        "content": "One main features modern DNS provider needs order work Platform sh colloquially known  Cname Flattening   solves problem able point  root domain   example com  domain name  CNAME  rather IP address  A record   post explains well  order correctly point DNS Platform sh project  you ll need least master environment CNAME  words domain site add custom domain management console project  or otherwise CLI   value Step 2 pre launch checklist  Assuming using www  subdomain bare domain  you ll want point DNS entries place  Whether choose bare domain version www subdomain doesn t practical difference  will reach Platform sh handled correctly  Enable  Full SSL  option Cloudflare admin Cloudflare makes simple use free TLS SSL service secure site via HTTPS  behind CDN so choose  decide use Cloudflare s CDN functionality addition DNS service  sure choose  Full SSL  option Cloudflare admin  means traffic site encrypted client  browser  Cloudflare s servers using certificate  Cloudflare s servers project hosting Platform sh  mostly using project s Let s Encrypt certificate  Cloudflare s Full SSL option https https User Cloudflare Platform sh option known  Flexible SSL  will cause issues intend redirect traffic HTTPS   Flexible SSL  option will use Cloudflare s TLS SSL certificate encrypt traffic users CDN  will pass requests CDN back project Platform sh via HTTP  easy sites don t TLS SSL certificate begin ofering users secure experience  least eliminating unencrypted attack vector  last mile  user s browser  Cloudflare s Flexible SSL option https http User Cloudflare Platform sh will cause traffic Cloudflare project redirected HTTPS  will set off endless loop HTTPS traffic will presented HTTP project no matter what  short  Always use  Full SSL  unless clear reason otherwise",
        "objectID": "en/golive/cdn/cloudflare",
        "weight": 2,
        "sidebarTitle": "Cloudflare"
    },
    {
        "title": "Fastly",
        "uri": "en/golive/cdn/fastly",
        "content": "Fastly CDN included Platform sh Dedicated instances  Platform sh does not offer integrated CDN self service Grid projects time  common choice customers self configure  Launching Platform sh site Fastly front nearly launching normally  two notable differences  Note individual applications may own Fastly setup instructions additional modules  Consult documentation application specific details  Set Platform sh domain Fastly Rather create DNS CNAME Platform sh master branch  for instance master 7rqtwti qwertyqwerty eu platform sh   configure Fastly respond requests domain name treat Platform sh master branch its backend server  sure enable TLS backend connection Platform sh  configure DNS point domain Fastly instead  Fastly documentation further details  DNS TXT records using Fastly CDN included Platform sh Enterprise subscription  will need obtain DNS TXT record Customer Support Engineer prior going live  will need enter DNS TXT record domain registrar  step done advance actual go live  Anycast option using either CNAME set Anycast IP addresses  Fastly prefers use CNAME either work  using Anycast IP addresses Dedicated production environment  open support ticket new records provide support team",
        "objectID": "en/golive/cdn/fastly",
        "weight": 1,
        "toc": true,
        "description": "In some cases you may want to opt to use a CDN such as Fastly rather than the Platform.sh router's cache.  Using a CDN can offer a better time-to-first-byte for cached content across a wider geographic region at the cost of the CDN service."
    },
    {
        "title": "Going Live - Pre-Launch Checklist",
        "uri": "en/golive/checklist",
        "content": "1  Register domain name supported provider domain name registered site Registrar choice  registrar allow use CNAMEs domain   Some registrars may call Aliases similar    domain currently active elsewhere  Time To Live  TTL  domain set lowest possible value order minimize transition time    note     will not able use record  Verify DNS provider supports CNAMES   If does not will want run away anyway   will happier supports Apex domains  more next chapter   2  Test site  sure site running configured want be  master branch  particular  Routes documentation  will need routes configured appropriately begin  sure turned off basic authentication turned during development  production environment Dedicated instance  ensure code date staging production branches  will mirrored Dedicated instances  ensure data production instance date ready launch  3  Optionally obtain 3rd party TLS certificate Platform sh automatically provides TLS certificates sites issued Let s Encrypt no charge  cases sufficient no further action necessary  However  want use 3rd party TLS certificate encrypt production site obtain one number 3rd party TLS issuers  Platform sh does not charge using 3rd party TLS certificate  although issuer may  Platform sh supports kinds certificates including domain validated certificates  extended validation  EV  certificates  high assurance certificates wildcard certificates  use HA EV certificates main reason why may wish use third party issuer rather default certificate  will need custom certificate use wildcard routes  Let s Encrypt does not support wildcard certificates  wish use 3rd party certificate  ensure purchased active prior going live  4  Optionally configure CDN using CDN  either one included Enterprise plan one provide self service Grid project  ensure CDN account registered configured advance  includes setting upstream CDN point Platform sh production instance  Grid based project  will master xxxx domain  Run platform environment info edge_hostname domain name use  Dedicated project  upstream use will provided Platform sh onboarding representative  Consult CDN s documentation set CDN s upstream address  Enterprise plans may need obtain DNS TXT record Platform sh support representative opening ticket  Consult documentation CDN provider own CDN guide  Domain name registered  DNS TTL set low possible  code data tested ready launch master  Grid  production  Dedicated  branch  custom TLS certificate purchased  you re using one  CDN configured serve Platform sh  you re using one  Time Go Live",
        "objectID": "en/golive/checklist",
        "weight": 1,
        "description": "Before you can take your site live there are a few preparation steps to take.",
        "toc": true,
        "sidebarTitle": "Pre-Launch Checklist"
    },
    {
        "title": "Example",
        "uri": "en/golive/example",
        "content": "Suppose project ID abc123 US region  you ve registered mysite com  want www mysite com  real  site mysite com redirect it  Configure routes yaml First  configure routes yaml file so   https   www  default     type  upstream upstream   app http   https    default     type  redirect to   https   www  default    will result two domains created Platform sh  master def456 abc123 eu 2 platformsh site www   master def456 abc123 eu 2 platformsh site  former will automatically redirect latter  routes yaml file   default  will automatically replaced master def456 abc123 eu 2 platformsh site  domain prefixes  like www     will replaced      Set domain Now  add single domain Platform sh project mysite com  Using CLI type  platform domain add mysite com use management console that  soon do  Platform sh will no longer serve master def456 abc123 eu 2 platformsh site all  Instead   default  routes yaml will replaced mysite com anywhere appears when generating routes respond to  access original internal domain running platform environment info edge_hostname  e master  Configure DNS provider DNS provider  create two CNAMEs  mysite com ALIAS CNAME ANAME master def456 abc123 eu 2 platformsh site  www mysite com CNAME master def456 abc123 eu 2 platformsh site   note     point name  note above regarding different registrars handle dynamic apex domains  Result Here s will happen hood  Assume moment caches everywhere empty  incoming request mysite com will result following  browser asks DNS network mysite com s DNS record  the IP address host   responds  it s alias www master def456 abc123 eu 2 platformsh site   the CNAME  itself resolves record IP address 1 2 3 4  Or whatever actual address is   default DNS requests browsers recursive  so no performance penalty using CNAMEs  browser sends request 1 2 3 4 domain mysite com  router responds HTTP 301 redirect www mysite com  because that s routes yaml specified   browser looks www mysite com and  above  gets alias www master def456 abc123 eu 2 platformsh site  IP 1 2 3 4  browser sends request 1 2 3 4 domain www mysite com  router passes request application turn responds whatever it s supposed do  subsequent requests  browser will know simply connect 1 2 3 4 domain www mysite com skip rest  entire process takes few milliseconds",
        "objectID": "en/golive/example",
        "weight": 5,
        "toc": true,
        "description": "In this short section we will give you a  very simple, typical example. More involved use-cases (such as site with many domains or multiple applications are simply variations on this)."
    },
    {
        "title": "Going Live - Steps",
        "uri": "en/golive/steps",
        "content": "note     order operations not really important  migrating site existing provider  first configure domain Platform sh side  switch DNS over  1  Change plan production plan Development plan  cannot add domain  will need upgrade subscription production plan  Go account  click small wheel next project s name click edit  access information project s plan  Billing   selecting project list projects  changes project clicking  Upgrade Plan   changes type plan  number environments  amount storage number users here  When changes  will update monthly price will paying  Click Upgrade plan save new settings  find information pricing pricing page  2   CDN version  Configure DNS provider serving site CDN  configure DNS provider point CDN account  address CNAME set will vary CDN provider  Refer documentation CDN guide  2   Non CDN version  Configure DNS provider Configure DNS provider point domain Platform sh Master environment domain name  so will vary somewhat depending registrar  nearly registrars allow set CNAME  will call Alias similar alternate name  either intent say  this domain always resolve to    domain   access CNAME target running platform environment info edgehostname  host name Platform sh knows environment  Add CNAME record desired domain  www example com  value edgehostname  multiple domains want served application will need add CNAME record them  Note depending registrar TTL set  anywhere 15 minutes 72 hours DNS change fully propagate across Internet  using apex domain  example com   additional information Apex domains CNAME records  3   Non CDN version  Set domain Platform sh   note     using CDN  skip step  CDN already configured advance point Platform sh its upstream  step will tell Platform sh edge layer route requests web site  CLI platform domain add example com using managment console  add multiple domains point project  domain its own custom SSL certificate  use default one provided  require access site domain name becomes active create hosts file entry computer point IP address resolves when access master project branch  IP address  first run platform environment info edge_hostname  will print  internal  domain name project  Run ping its IP address  OS X Linux add IP  etc hosts file  Windows file named c  Windows System32 Drivers etc hosts  will need admin user able change file  So OS X will usually run something sudo vi  etc hosts  adding line file will look something like  Alternatively add on Firefox Google Chrome allow dynamically switch DNS IP addresses without modifying hosts file  Firefox LiveHosts add on Google Chrome LiveHosts add on   note     not put IP address here  one ping command      Also  remember remove entry configured DNS  Sometimes Let s Encrypt couple minutes provision certificate first time  normal  means first deploy enabling domain may longer usual  Setting CNAME record DNS provider first helps minimize disruption  4  Bonus steps  Optional  Configure health notifications not required  it s strongly recommended set health notifications advise site experiencing issues running low disk space  Notifications sent via email  Slack  PagerDuty  Configure production cron tasks It s strongly recommended set automatic backups automatic certificate renewal cron tasks  will first need set API token install CLI part build hook  easily configure appropriate cron tasks  following snippet generally sufficient links above details  please modify cron schedules listed match use case  crons  backup  backup automatically every night 3  UTC   spec   0 3        cmd        PLATFORM_BRANCH    master    platform backup create   yes   no wait fi renewcert  Force redeploy 8  UTC  14th 28th every month  spec   0 8 14 28      cmd        PLATFORM_BRANCH    master    platform redeploy   yes   no wait fi",
        "objectID": "en/golive/steps",
        "weight": 2,
        "sidebarTitle": "Go-live steps",
        "description": "Going live on Platform.sh is a simple two or three step process.<br><br>You can either use the Platform.sh management console or the CLI to configure your project for production. Once you have gone through it once the whole process usually takes a couple of minutes.",
        "toc": true,
        "layout": "single"
    },
    {
        "title": "DNS management and Apex domains",
        "uri": "en/golive/steps/dns",
        "content": "Why CNAMEs  Platform sh cloud hosting provider  means individual  site  not its own computer set containers running one virtual machines  themselves running number physical computers  shared customers running configuration  entire region projects runs behind dedicated  high performance edge routers  responsible mapping incoming requests particular container particular host appropriate  logic quite robust fast  does require incoming requests sent first edge routers  IP addresses edge routers fairly stable  not guaranteed change  may add remove routers help scale region  offline one time upgrades maintenance  therefore critical inbound requests always know IPs edge routers time request  Platform sh s  edge hostnames   the auto generated URLs form     platformsh site  DNS records control resolve IP addresses edge routers region  edge router updated  taken rotation  etc  domains will update quickly automatically no further action required  record pointed IP addresses need updated manually every time edge router changes temporarily offline  means every time Platform sh doing routine maintenance upgrades edge routers there s significant potential site experience partial outage request comes offline edge router  don t want that  don t want that  Using CNAME DNS record pointing  edge hostname  will avoid problem  will updated almost immediately edge router configuration change  Why CNAME records problematic  DNS specification originally published 1987 RFC 1034 RFC 1035  long name based HTTP hosting became prevalent  RFCs plus follow ups clarify expand somewhat vague behavior CNAME  it s generally understood apex domain  example com  may not used alias CNAME record  creates problem want use apex domain container based managed hosting service Platform sh  point above  There s detailed thread subject provides technical detail  Handling Apex domains number ways handling CNAME on Apex limitation DNS  Using DNS provider custom records DNS providers found around CNAME on Apex limitation  DNS registrars offer custom  non standard records  sometimes called ANAME ALIAS  manage CNAME will own internal lookup behind scenes respond DNS lookups record  non standard behavior  and quality  vary  not DNS registrars offer feature  want site accessible https   example com not https   www example com best so  Examples workaround records include  CNAME Flattening CloudFlare ANAME easyDNS  DNS Made Easy  Name com ALIAS DNSimple Cloudns Platform sh recommends ensuring DNS Provider supports dynamic apex domains registering domain name them  using DNS Provider does not support dynamic apex domains will unable use example com Platform sh  will need use www example com  or similar  instead   Alternate  Using DNS provider apex domain forwarding willing www  version site canonical version  which recommended   registrars DNS providers may provide domain redirect feature also known domain forwarding from apex domain example com www example com  looking change registrars  check whether current provider supports domain forwarding Apex DNS CNAME record Platform sh www  time  following DNS providers known support apex forwarding advanced DNS configurations simultaneously  Namecheap  Alternate  Using www redirection service preferred registrar DNS provider doesn t support either custom records apex domain forwarding options above  following free services allow blind redirects allow use CNAME record Platform sh www example com record service example com  will turn send redirect  WWWizer  Alternate  Using records absolutely cannot use DNS provider supports aliases redirection service  possible use records Platform sh  will result sub optimal experience  however  process few limitations  ever need change one IPs configuration will need manually updated  Until requests will lost  Directly pointing edge routers bypasses load balancing functionality  one go offline maintenance  as happens periodically upgrades  approximately 1 3 requests site will go offline router lost  making site appear offline    reason using records strongly discouraged used last resort  Public IP list 3 Inbound addresses region  DNS provider  configure 3 separate records domain  one IP addresses  Incoming requests will pick one IPs random use request",
        "objectID": "en/golive/steps/dns",
        "weight": 1,
        "toc": true,
        "description": "Platform.sh expects you to use a CNAME for all DNS records.  However, that is problematic with some DNS registrars.",
        "sidebarTitle": "DNS and CNAMEs"
    },
    {
        "title": "(Optional) Configure a third-party TLS certificate",
        "uri": "en/golive/steps/tls",
        "content": "note     private key old style  means start BEGIN RSA PRIVATE KEY  starts BEGIN PRIVATE KEY means bundled identifier key type      convert old style RSA key        openTLS rsa  in private key  out private rsa key   Adding custom certificate management console add custom certificate via Platform sh management console  management console project go Settings click Certificates left hand side  add certificate Add button top page  add private key  public key certificate optional certificate chain  Adding custom certificate CLI Example  platform domain add secure example com   cert  etc TLS private secure example com crt   key  etc TLS private secure example com key platform help domain add information    Success      site live  accessible world  as soon DNS propagates   something not working troubleshooting guide common issues  doesn t help  feel free contact support",
        "objectID": "en/golive/steps/tls",
        "weight": 2,
        "sidebarTitle": "Custom TLS",
        "toc": true,
        "description": "Platform.sh automatically provides standard TLS certificates issued by <a href=\"https://letsencrypt.org/\">Let's Encrypt</a> to all production instances. No further action is required to use TLS-encrypted connections beyond <a href=\"/configuration/routes.html#HTTPS\">specifying HTTPS routes</a> in your <code>routes.yaml</code> file.<br><br>Alternatively, you may provide your own third party TLS certificate from the TLS issuer of your choice at no charge from us.  Please consult your TLS issuer for instructions on how to generate an TLS certificate.<br><br>A custom certificate is not necessary for development environments.  Platform.sh automatically provides wildcard certificates that cover all *.platform.sh domains, including development environments."
    },
    {
        "title": "Going Live - Troubleshooting",
        "uri": "en/golive/troubleshoot",
        "content": "Verify DNS command line OS X Linux  or using Linux subsystem Windows  type host www example com  response something like  www example com alias master t2xxqeifuhpzg eu platform sh  master t2xxqeifuhpzg eu platform sh address 54 76 136 188 not either not configured correctly DNS server  DNS configuration not propagate yet  first step try remove local DNS cache  try set DNS server Google public DNS server  8 8 8 8 8 8 4 4  issue DNS server using  Try run ping www example com  with own domain name  result different form host www example com want verify  etc hosts file  or its windows equivalent   left entry testing  Verify SSL command line OS X Linux  or using Linux subsystem Windows  type curl  I  v https   example com  again using own domain   response long  Look error messages  usually explicit enough  Often problem will mismatch certificate domain name  Verify application command line type platform logs app no clear anomalies there  platform logs error Something wrong   Contact support help  Please include detail possible  we will able provide quicker help",
        "objectID": "en/golive/troubleshoot",
        "weight": 4,
        "toc": true,
        "description": "If all steps above have been followed and the site still does not resolve (after waiting for the DNS update to propagate), here are a few simple self-help steps to take before contacting support.",
        "sidebarTitle": "Troubleshooting"
    },
    {
        "title": "Languages",
        "uri": "en/languages",
        "content": "",
        "objectID": "en/languages",
        "weight": -90,
        "description": "We sure do support a lot of runtimes."
    },
    {
        "title": "C#/.NET Core",
        "uri": "en/languages/dotnet",
        "content": "Supported versions      specify  NET Core container  use type property  platform app yaml                 Building application simple applications  using dotnet publish default framework dependent deployment method sufficient building applications  NET containers  hooks  build    set  xe dotnet publish   output   PLATFORMOUTPUTDIR   p UseRazorBuildServer false  p UseSharedCompilation false PLATFORMOUTPUTDIR output directory compiled languages available build time  Typically  NET Core builds will start collection build servers  helpful repeated builds  Platform sh  however  process not disabled  build process will not finish until idle timeout reached  result  recommended include  p toggles disable Razor compiler dynamic cshtml pages  UseRazorBuildServer   NET msbuild compiler  UseSharedCompilation   making multiple builds desired application  sure call dotnet build server shutdown end build hook  Running application  NET Core applications started using web commands start directive  platform app yaml  ensures command starts right moment stops gracefully when re deployment needs executed  Also  program terminate reason  will automatically restarted  Note start command run foreground  Incoming requests passed application using either TCP  default  UNIX socket  application use appropriate environment variable determine URI listen on  case TCP socket  recommended   application listen http   127 0 0 1  using PORT environment variable  will Nginx server sitting front application  Serving static content via Nginx recommended  allows easy control headers  including cache headers  marginal performance benefits  Note HTTPS terminated Ngnix proxy  so app UseHttpsRedirection    line Startup cs removed  force HTTPS only  please refer routes documentation  following example configures environment serve static content folders commonly found ASP NET MVC templates using Nginx  routing traffic  NET application  web  locations       root   wwwroot  allow  true passthru  true rules  Serve common asset types customs cache headers     jpe g png gif svgz  css js map ico bmp eot woff2  otf ttf    allow  true expires  300s commands  start   dotnet WebApplication1 dll  route requests application unconditionally  web  locations       allow  false passthru  true commands  start   dotnet WebApplication1 dll  Project templates Platform sh offers project templates  NET Core applications using structure described above  used starting point reference building own website web application",
        "objectID": "en/languages/dotnet",
        "weight": 1,
        "description": "Platform.sh supports deploying .NET applications by allowing developers to define a build process and pass its variables to the .NET Core build environment.",
        "toc": true
    },
    {
        "title": "Go",
        "uri": "en/languages/go",
        "content": "Supported versions      specify Go container  use type property  platform app yaml                 Deprecated versions following container versions available  However  due lack Go module support difficulties supporting GOPATH during Platform sh build not recommended  1 8 1 9 1 10      Go modules recommended handle Go dependencies Platform sh using Go module support Go 1 11 later  allows build process use go build directly without extra steps  specify output executable file choice   See examples below   Platform sh variables Platform sh exposes relationships configuration environment variables  easier access use provided Config Reader library  notably  allows program determine runtime HTTP port listen credentials access services  package main import   _  github com go sql driver mysql  psh  github com platformsh gohelper   net http    func main     p  err    psh NewPlatformInfo   err    nil   panic  Not Platform sh Environment      http HandleFunc   bar   func w http ResponseWriter  r  http Request              http ListenAndServe     p Port  nil    Building running application Assuming go mod go sum files present repository  application may built simple go build command will produce working executable  start web commands start directive  Note start command run foreground  program terminate reason will automatically restarted  following basic  platform app yaml file sufficient run Go applications  name  app type  golang 1 12 hooks  build    Modify line want build differently use alternate name executable  go build  o bin app web  upstream  socket_family  tcp protocol  http commands  change build output build hook above  update line well  start    bin app locations     Route requests Go app  unconditionally  want files served directly web server without hitting Go  https   docs platform sh configuration app web html allow  false passthru  true disk  1024 Note will Nginx proxy server sitting front application  desired  certain paths may served directly Nginx without hitting application  for static files  primarily  may route requests Go application unconditionally  example above  Accessing services access various services Go  following examples  individual service pages information configuring service                                                                                                                                                                  Project templates Platform sh offers project templates Go applications using structure described above  used starting point reference building own website web application",
        "objectID": "en/languages/go",
        "weight": 2,
        "description": "Platform.sh supports building and deploying applications written in Go using Go modules.  They are compiled during the Build hook phase, and support both committed dependencies and download-on-demand.",
        "toc": true
    },
    {
        "title": "Java",
        "uri": "en/languages/java",
        "content": "Supported versions OpenJDK versions  8 11 12 13      specify Java container  use type property  platform app yaml                 Support libraries possible read environment directly application  generally easier robust use platformsh config reader handles decoding service credential information you  Support build automation Platform sh supports common project management tools Java ecosystem  including  Gradle Maven Ant Accessing services access various services Java  following examples  individual service pages information configuring service                                                                                                                                                                                                                                             Project templates number project templates major Java applications available GitHub  Not proactively maintained used starting point reference building own website web application",
        "objectID": "en/languages/java",
        "weight": 3,
        "description": "Java is a general-purpose programming language, and one of the most popular in the world today. Platform.sh supports Java runtimes that can be used with build management tools such as Gradle, Maven, and Ant.",
        "toc": true,
        "layout": "single"
    },
    {
        "title": "Frameworks",
        "uri": "en/languages/java/frameworks",
        "content": "Java Featured Frameworks Hibernate Hibernate ORM object relational mapping tool Java programming language  provides framework mapping object oriented domain model relational database  Hibernate handles object relational impedance mismatch problems replacing direct  persistent database accesses high level object handling functions  Hibernate Best Practices Jakarta EE  Eclipse MicroProfile Eclipse MicroProfile semi new community dedicated optimizing Enterprise Java mission microservice based architectures  Enterprise Java standardized Eclipse Foundation Jakarta EE  Jakarta EE  Eclipse MicroProfile Best Practices Templates Apache Tomee Thorntail Payara Micro KumuluzEE Helidon Open Liberty Spring Spring Framework provides comprehensive programming configuration model modern Java based enterprise applications   kind deployment platform  Platform sh flexible  allows use Spring Framework several flavors Spring MVC Spring Boot  Spring Best Practices Templates Spring Boot MySQL Spring Boot MongoDB",
        "objectID": "en/languages/java/frameworks",
        "weight": 1,
        "toc": true
    },
    {
        "title": "Lisp",
        "uri": "en/languages/lisp",
        "content": "Supported versions      specify Lisp container  use type property  platform app yaml                 Assumptions Platform sh making assumptions application provide streamlined experience  assumptions following   asd file named system name  E g  example asd will  defsystem example       Platform sh will run  asdf make  example  system build binary  don t want assumptions  disable behavior specifying  platform app yaml  build  flavor  none Dependencies recommended handle Lisp dependencies Platform sh using ASDF  Commit  asd file repository system will automatically download dependencies using QuickLisp  QuickLisp options wish change distributions QuickLisp using  specify follows  specifying distribution name  its URL and  optional version  runtime  quicklisp    url        version        example  runtime  quicklisp  quicklisp  url   http   beta quicklisp org dist quicklisp txt  version   2019 07 11  Platform sh variables Platform sh exposes relationships configuration environment variables  notably  allows program determine runtime HTTP port listen credentials access services  PORT environment variable  the port web application supposed listen  would   parse integer  uiop getenv  PORT    Building running application Assuming example lisp example asd present repository  application will automatically built push  start web commands start directive  Note start command run foreground  program terminate reason will automatically restarted  example below sleep very  long time  choose join thread web server  use methods sure program does not terminate  following basic  platform app yaml file sufficient run Lisp applications  name  app type  lisp 1 5 web  commands  start    example locations     allow  false passthru  true disk  512 Note will proxy server front application  desired  certain paths may served directly router without hitting application  for static files  primarily  may route requests Lisp application unconditionally  example above  Accessing Services services configuration available environment variable PLATFORM_RELATIONSHIPS  parse them  add dependencies  asd file   depends on   jsown  babel  s base64  following example accessing PostgreSQL instance   defun relationships     jsown parse  babel octets to string  with input from string  in  uiop getenv  PLATFORM_RELATIONSHIPS     s base64 decode base64 bytes in      Given relationship defined  platform app yaml  relationships  pg  postgresql postgresql following access relationship  provide Lisp program credentials connect PostgreSQL instance  Add  asd file   depends on   postmodern  program access PostgreSQL instance follows   defvar pg spec nil   defun setup postgresql     let    pg relationship  first  jsown val  relationships   pg      database  jsown val pg relationship  path     username  jsown val pg relationship  username     password  jsown val pg relationship  password     host  jsown val pg relationship  host      setf pg spec  list database username password host     postmodern with connection pg spec  unless  member  example_table   postmodern list tables t   test   string    postmodern execute  create table example_table   a_field TEXT NOT NULL UNIQUE  another_field TEXT NOT NULL UNIQUE       Project templates Platform sh offers project template Lisp applications using structure described above  used starting point reference building own website web application  following simple example Hunchentoot based web application  you find corresponding  asd Platform sh  yaml files linked Github repository    defpackage   example   use  hunchentoot  cl who  cl    export main    in package   example   define easy handler  greet  uri   hello    name   with html output to string  s   htm   body   h1  hello     str name        defun main     let   acceptor  make instance  easy acceptor  port  parse integer  uiop getenv  PORT        start acceptor   sleep most positive fixnum    Notice PORT environment  sleep end   start acceptor  will immediately yield Platform sh requires applications run foreground",
        "objectID": "en/languages/lisp",
        "weight": 4,
        "description": "Platform.sh supports building and deploying applications written in Lisp using Common Lisp (the SBCL version) with ASDF and Quick Lisp support.  They are compiled during the Build phase, and support both committed dependencies and download-on-demand.",
        "toc": true
    },
    {
        "title": "Node.js",
        "uri": "en/languages/nodejs",
        "content": "Supported versions      need versions  look options installing NVM  Deprecated versions versions minor  such 8 9  available not receiving security updates upstream  so use not recommended  will removed point future  Support libraries possible read environment directly application  generally easier robust use platformsh config NPM library handles decoding service credential information you  Configuration use Platform sh Node js together  configure  platform app yaml file few key settings  described  a complete example included end   Specify language application  available versions listed above      codesnippet   registry images examples full nodejs app yaml   language  yaml       endcodesnippet    Specify dependencies nodejs key  this  dependencies  nodejs  pm2    2 5 0  global dependencies project  the ones installed npm install  g   specify pm2 process manager will allow us run node process  Configure command use start serving application  this foreground running process  web section  e g   web  commands  start   PM2_HOME  app run pm2 start index js   no daemon  package json file present root repository  Platform sh will automatically install dependencies  suggest including platformsh config helper npm module  makes trivial access running environment     dependencies      platformsh config     2 0 0        Note      using pm2 process manager start application  recommended so directly web commands start described above  rather calling separate script contains command  Calling pm2 start web commands start within script  even   no daemon flag  found daemonize itself block processes  such backups  continuous respawns  Create Read Write mounts  root file system read only  explicitly describe writable mounts   3  set home process manager  app run so needs writable  mounts  run  source  local source_path  run Include relevant commands needed build setup application hooks section  e g   hooks  build    npm install npm run build bower install Setup routes Node js application  platform routes yaml   https    default     type  upstream upstream   app http   Optional  Platform sh detects package json file repository  will automatically include default build flavor  will run npm prune   userconfig  npmrc    npm install   userconfig  npmrc  modify process use alternative package manager including following  platform app yaml file  build  flavor  none Consult documentation specific Node js builds information  Here s complete example serves static assets   png  public directory   name  node type  nodejs 10 web  commands  start   PM2_HOME  app run pm2 start index js   no daemon   in setup will find application stdout stderr  app run logs locations    public   passthru  false root   public  Whether allow files not matching rule not  allow  true rules     png    allow  true expires   1 dependencies  nodejs  pm2    2 5 0  mounts  run  source  local source_path  run disk  512 application    Finally  sure Node js application configured listen port given environment  here use platformsh helper config port  available environment variable  PORT   Here s example     Load http module create http server  const http   require  http       Load Platform sh configuration const config   require  platformsh config   config    const server   http createServer function  request  response    response writeHead 200    Content Type    text html     response end  Hello Node jsHello Node jsPlatform configuration   JSON stringify config  null  4             server listen config port   Accessing services access various services Node js  following examples  individual service pages information configuring service     codetabs name  Elasticsearch   type  js   url  https   examples docs platform sh nodejs elasticsearch         language name  Memcached   type  js   url  https   examples docs platform sh nodejs memcached         language name  MongoDB   type  js   url  https   examples docs platform sh nodejs mongodb         language name  MySQL   type  js   url  https   examples docs platform sh nodejs mysql         language name  PostgreSQL   type  js   url  https   examples docs platform sh nodejs postgresql         language name  Redis   type  js   url  https   examples docs platform sh nodejs redis         language name  Solr   type  js   url  https   examples docs platform sh nodejs solr          endcodetabs    Project templates number project templates Node js applications typical configurations available GitHub  Not proactively maintained used starting point reference building own website web application",
        "objectID": "en/languages/nodejs",
        "weight": 5,
        "description": "Node.js is a popular JavaScript runtime built on Chrome's V8 JavaScript engine.  Platform.sh supports deploying Node.js applications quickly and easily. Using our Multi-App support you can build a micro-service oriented system mixing both Javascript and PHP applications.",
        "toc": true,
        "layout": "single"
    },
    {
        "title": "Alernative Node.js install",
        "uri": "en/languages/nodejs/nvm",
        "content": "use NVM run different versions Node js Node Version Manager NVM tool managing multiple versions Node js one installation  use NVM container types node installed change update version  may useful  example  container Long Term Release  LTS  version available  use latest  Installing NVM done build hook  platform app yaml  additional calls ensure environment variables set correctly  hooks  build    unset NPMCONFIGPREFIX curl  o  https   raw githubusercontent com creationix nvm v0 33 8 install sh   dash export NVM_DIR   HOME  nvm     s   NVMDIR nvm sh            NVMDIR nvm sh  nvm current nvm install 9 5 0 deploy    unset NPMCONFIGPREFIX nvm use 9 5 0  environment file root project  necessary nvm work  unset NPMCONFIGPREFIX Disable npm update notifier  read system will probably annoy you  export NOUPDATENOTIFIER 1 loads nvm general usage  export NVMDIR   PLATFORMAPP_DIR  nvm     s   NVMDIR nvm sh            NVMDIR nvm sh",
        "objectID": "en/languages/nodejs/nvm",
        "weight": 1,
        "toc": true
    },
    {
        "title": "PHP",
        "uri": "en/languages/php",
        "content": "Supported versions 7 2 7 3 7 4      Note PHP 7 1 use Zend Thread Safe  ZTS  version PHP  specify PHP container  use type property  platform app yaml     codesnippet   registry images examples full php app yaml   language  yaml       endcodesnippet    Deprecated versions following versions available not receiving security updates upstream  so use not recommended  will removed point future  5 4 5 5 5 6 7 0 7 1      Support libraries possible read environment directly application  generally easier robust use platformsh config reader Composer library handles decoding service credential information you  Alternate start commands PHP commonly run CGI mode  using PHP FPM  default Platform sh  However  start alternative processes desired  you re running Async PHP daemon  thread based worker process  etc  so  simply specify alternative start command platform app yaml  similar following  web  commands  start  php run php upstream  socket_family  tcp protocol  http above configuration will execute run php script application root when container starts using PHP CLI SAPI  just deploy hook runs  will not launch PHP FPM  will tell front controller  Nginx  connect application via TCP socket  will specified PORT environment variable  Note start command run foreground  not specified  effective default start command varies PHP version  PHP 5 x  it s  usr sbin php5 fpm  PHP 7 0  it s  usr sbin php fpm7 0  PHP 7 1  it s  usr sbin php fpm7 1 zts  PHP 7 2  it s  usr sbin php fpm7 2 zts  PHP 7 3  it s  usr sbin php fpm7 3 zts  PHP 7 4  it s  usr sbin php fpm7 4 zts  call manually generally not necessary  Note PHP FPM cannot run simultaneously along persistent process  such ReactPHP Amp   need will run separate containers  Expanded dependencies addition standard dependencies format  possible specify alternative repositories use Composer  standard format so  dependencies  php   platformsh client    dev master  equivalent composer require platform client dev master  However  specify explicit require repositories blocks  dependencies  php  require   platformsh client    dev master  repositories  type  vcs url   git github com platformsh platformsh client php git  install platformsh client alternate repository specified  global dependency  is  equivalent following composer json file     repositories        type    vcs    url    git github com platformsh platformsh client php git        require      platformsh client    dev master      allows install forked version global dependency custom repository  Opcache preloading PHP 7 4 introduced new feature called Opcache Preloading  allows load selected files shared memory when PHP FPM starts  means functions classes files always available not need autoloaded  cost changes files requiring PHP FPM restart  PHP FPM restarts anyway when new deploy happens feature major win Platform sh  recommend using aggressively  enable preloading  add php ini value specifies preload script  php ini mechanism will work  using variable  platform app yaml recommended approach  variables  php  opcache preload   preload php  opcache preload value evaluated file path relative application root  where  platform app yaml is   may PHP script calls opcachecompilefile    following example will preload  php files anywhere vendor directory   directory   new RecursiveDirectoryIterator getenv  PLATFORMAPPDIR       vendor     iterator   new RecursiveIteratorIterator  directory    regex   new RegexIterator  iterator         php  i   RecursiveRegexIterator  GET_MATCH   foreach   regex  key     file       important part  opcachecompilefile  file 0      Note  Preloading  php files may not optimal application  may even introduce errors  application framework may provide recommendations pre made presload script use instead  Determining optimal preloading strategy user s responsibility  Debug PHP FPM want inspect what s going PHP FPM  install small CLI  dependencies  php  wizaplace php fpm status cli    1 0  when connected project SSH run    php fpm status   socket unix    SOCKET   path    status   full Accessing services access various services PHP  following examples  individual service pages information configuring service     codetabs name  Elasticsearch   type  php   url  https   examples docs platform sh php elasticsearch         language name  Memcached   type  php   url  https   examples docs platform sh php memcached         language name  MongoDB   type  php   url  https   examples docs platform sh php mongodb         language name  MySQL   type  php   url  https   examples docs platform sh php mysql         language name  PostgreSQL   type  php   url  https   examples docs platform sh php postgresql         language name  RabbitMQ   type  php   url  https   examples docs platform sh php rabbitmq         language name  Redis   type  php   url  https   examples docs platform sh php redis         language name  Solr   type  php   url  https   examples docs platform sh php solr          endcodetabs    Runtime configuration possible change PHP FPM runtime configuration via runtime block  platform app yaml  PHP FPM options below configurable  req",
        "objectID": "en/languages/php",
        "weight": 6,
        "description": "PHP is a popular scripting language designed especially for the web. It currently powers over 80% of websites.",
        "layout": "single",
        "toc": true
    },
    {
        "title": "Extensions",
        "uri": "en/languages/php/extensions",
        "content": "define PHP extensions want enable disable   platform app yaml runtime  extensions  http redis ssh2 disabled_extensions  sqlite3 following extensions enabled default  bcmath bz2  7 1 later  common  7 1 later  curl dba  7 1 later  enchant  7 1 later  gd interbase  7 1 later  intl json  5 6 later  ldap  7 1 later  mbstring  7 1 later  mcrypt  5 6 earlier  mysql mysqli  not 7 1  mysqlnd  not 7 1  odbc  7 1 later  openssl pdo  not 7 1  pdo_mysql  not 7 1  pdo_sqlite  not 7 1  pgsql  7 1 later  pspell  7 1 later  readline  7 1 later  recode  7 1 later  snmp  7 1 later  soap  7 1 later  sodium  7 2  sqlite3 sockets  7 0 later  sybase  7 1 later  tidy  7 1 later  xml  7 1 later  xmlrpc  7 1 later  zendopcache  5 4 only    opcache  5 5 later  zip  7 1 later  disable adding disabled_extensions list  complete list extensions enabled    Extension   5 4   5 5   5 6   7 0   7 1   7 2   7 3                                                                 amqp                           apc                       apcu                               apcu_bc                           applepay                       bcmath                           blackfire                                 bz2                           calendar                           ctype                           curl                                 dba                           dom                           enchant                                 event                         exif                           fileinfo                           ftp                           gd                                 gearman                         geoip                                 gettext                           gmp                                 http                       iconv                           igbinary                           imagick                                 imap                                 interbase                                 intl                                 ioncube                         json                             ldap                                 mailparse                         mbstring                           mcrypt                             memcache                         memcached                               mongo                         mongodb                           msgpack                           mssql                         mysql                         mysqli                                 mysqlnd                                 newrelic                             oauth                           odbc                                 opcache                               openssl                   pdo                                 pdo_dblib                                 pdo_firebird                                 pdo_mysql                                 pdo_odbc                                 pdo_pgsql                                 pdo_sqlite                                 pdo_sqlsrv                         http                     pgsql                                 phar                           pinba                         posix                           propro                     pspell                                 pthreads                     raphf                     readline                                 recode                                 redis                                 shmop                           simplexml                           snmp                                 soap                           sockets                           sodium                       sourceguardian                      spplus                       sqlite3                                 sqlsrv                         ssh2                                 sysvmsg                           sysvsem                           sysvshm                           tideways                          tideways xhprof                           tidy                                 tokenizer                           uuid                         wddx                           xcache                       xdebug                               xhprof                         xml                           xmlreader                           xmlrpc                                 xmlwriter                           xsl                                 yaml                         zbarcode                           zendopcache                     zip                           note   check output ls  etc php5 mods available   up to date complete list extensions SSH   environment  PHP 7  use ls  etc php   mods available  Custom PHP extensions possible use extension not listed takes slightly work  Download  so file extension part build hook using curl similar  added Git repository file not publicly downloadable  although committing large binary blobs Git generally not recommended  Provide custom php ini file application root  as sibling  platform app yaml file  loads extension using absolute path  example  extension named spiffy so root application  php ini file reads  extension  app spiffy so",
        "objectID": "en/languages/php/extensions",
        "weight": 1,
        "toc": true
    },
    {
        "title": "PHP-FPM sizing",
        "uri": "en/languages/php/fpm",
        "content": "heuristic heuristic based three input parameters  memory available container  depends size container  S  M  L   memory average request expected require  memory reserved things not specific request  memory nginx  op code cache  OS page cache  etc   number workers calculated as      text workers     max  Bigg    frac  text ContainerMemory     text ReservedMemory    text RequestMemory    2  Bigg     Defaults default assumptions are  45 MB average per request memory 70 MB reserved memory deliberately conservative values allow programs run without modification  change using runtime sizinghints reservedmemory runtime sizinghints requestmemory  platform app yaml  example  application consumes average 110 MB memory request use  runtime  sizing_hints  request_memory  110 requestmemory lower limit 10 MB reservedmemory lower limit 70 MB  Values lower will replaced minimums  check maximum number PHP FPM workers opening SSH session running following command  example PHP 7 x   grep  e   pm max_children   etc php   fpm php fpm conf pm max_children   2 Measuring PHP worker memory usage memory PHP worker processes using  open SSH session look PHP access log  less  var log php access log fifth column  you ll peak memory usage occurred request handled  peak usage will probably vary requests  order avoid severe performance costs swapping  size hint somewhere average worst case memory usages observe  good determine optimal request memory following command  tail  n5000  var log php access log   awk   print  6     sort  n   uniq  c will print table requests used memory  KB  last 5000 requests reached PHP FPM   On especially busy site may need increase number   example  consider following output  1 4800 2048 948 4096 785 6144 584 8192 889 10240 492 12288 196 14336 68 16384 2 18432 1 22528 6 131072 indicates majority requests  4800  used 2048 KB memory  case that s likely application caching work  requests used around 10 MB memory  few used 18 MB few  6 requests  peaked 131 MB   In example probably cache clears   conservative approach suggest average request memory 16 MB sufficient  aggressive stance suggest 10 MB  aggressive approach potentially allow concurrent requests risk requests needing use swap memory  thus slowing down  web agency Pixelant published log analyzer tool Platform sh offers better visualization access logs determine memory requests using average  offers additional insights operation site suggest places further optimize configuration provide guidance when it s time increase plan size   Please note tool maintained 3rd party  not Platform sh     note     running PHP 5 x don t bother adjusting worker memory usage until upgrade PHP 7 x  PHP 7 vastly memory efficient PHP 5 will likely need less half memory per process PHP 7",
        "objectID": "en/languages/php/fpm",
        "weight": 5,
        "markup": "mmark",
        "math": true,
        "description": "Platform.sh uses a heuristic to automatically set the number of workers of the PHP-FPM runtime based on the memory available in the container. This heuristic is based on assumptions about the memory necessary on average to process a request. You can tweak those assumptions if your application will typically use considerably more or less memory.<br><br>Note that this value is independent of the <code>memory_limit</code> set in <code>php.ini</code>, which is the maximum amount of memory a single PHP process can use before it is automatically terminated.  These estimates are used only for determining the number of PHP-FPM workers to start."
    },
    {
        "title": "Frameworks",
        "uri": "en/languages/php/frameworks",
        "content": "Drupal Drupal open source content management framework written PHP  Composer comes pre installed Platform sh  Drupal installed updated completely using Composer  default build flavor PHP application runs composer install during build  handling dependencies automatically  Drupal 7 Best Practices Drupal 8 Best Practices Community Support Drupal FAQs  how to guides tutorials right Platform sh Community  Drupal Platform sh Community Templates Drupal 7 Drupal 7  Vanilla  Drupal 8 Drupal 8  Multisite variant  Opigno GovCMS8 eZ Platform eZ Platform CMS based Symfony full stack framework  eZ Platform comes pre configured use Platform sh versions 1 13 later  takes mapping few environment variables existing project  Consult caching  configuration  local development best practices eZ Platform Fastly integration information  eZ Platform Best Practices Example Projects   Note    Template projects  repositories platformsh templates GitHub organization  actively maintained Platform sh team  example projects less support  remain public repositories proof of concepts  eZ Platform Symfony Symfony web application framework written PHP  Drupal  Symfony projects utilize native Composer build applications manage dependencies  Symfony Best Practices Community Support Symfony FAQs  how to guides tutorials right Platform sh Community  Symfony Platform sh Community Templates Symfony 3 Symfony 4 TYPO3 TYPO3 open source CMS written PHP  Utilized Platform sh native Composer handle builds maintain dependencies  TYPO3 Best Practices Example Projects   Note    Template projects  repositories platformsh templates GitHub organization  actively maintained Platform sh team  example projects less support  remain public repositories proof of concepts  TYPO3 Wordpress Wordpress PHP content management system  Platform sh recommends using composer based installation method Wordpress  Wordpress Best Practices Community Support Wordpress FAQs  plus how to guides tutorials right Platform sh Community  Wordpress Platform sh Community Templates Wordpress",
        "objectID": "en/languages/php/frameworks",
        "weight": 2,
        "toc": true,
        "description": "Full Drush support and Composer-based builds make handling dependencies and builds for PHP frameworks as simple as committing your <code>composer.json</code> to your project."
    },
    {
        "title": "PHP.ini settings",
        "uri": "en/languages/php/ini",
        "content": "two ways customize php ini values application  recommended method use variables property  platform app yaml set ini values using php prefix  example  increase PHP memory limit you d put following  platform app yaml  variables  php  memory_limit  256M It s possible provide custom php ini file repository root application  where  platform app yaml file is     php ini   Increase PHP memory limit memory_limit   256M example set timezone PHP runtime  though  timezone settings containers services remain UTC   variables  php   date timezone    Europe Paris    php ini   Set PHP runtime timezone date timezone    Europe Paris  Environment specific php ini configuration directives provided via environment variables separately application code  note Environment variables section  Disabling functions common recommendation securing PHP installation disable certain built in functions frequently used remote attacks  default  Platform sh does not disable functions legitimate use various applications  However  may wish disable yourself know not needed  example  disable pcntlexec pcntlfork  which not usable web request anyway   variables  php   disablefunctions    pcntlexec pcntl_fork  Common functions disable include  createfunction   createfunction no useful purpose PHP 5 3 not used  ever  effectively replaced anonymous functions  exec passthru shellexec system procopen popen   functions allow PHP script run bash shell command  rarely used web applications  although build scripts may need them  pcntlexec pcntlfork pcntlsetpriority   pcntl  functions  including not listed here  responsible process management  will cause fatal error used within web request  Cron tasks workers may use them  however  safe disable unless know using them  curlexec curlmulti_exec   functions allow PHP script arbitrary HTTP requests  Note frequently used HTTP libraries Guzzle  case not disable them  show_source   function shows syntax highlighted version named PHP source file  rarely useful outside development  Naturally application does use functions  will fail disable them  case  not disable them  Default php ini settings default values frequently modified php ini settings listed below  memory_limit 128M postmaxsize 64M uploadmaxfilesize 64M display_errors On value default ease setting project Platform sh  strongly recommend providing custom error handler application setting value Off site live  zend assertions  1 Assertions optimized existence no impact runtime  assertions set 1 local development system  opcache memory_consumption 64 number megabytes available opcache  Large applications files may want increase value  opcache validate_timestamps On opcache will check updated files disk  necessary support applications generate compiled PHP code user configuration  certain application does not so disable setting small performance boost    warning     not limit put php ini file    settings break application  facility advanced   users",
        "objectID": "en/languages/php/ini",
        "weight": 4,
        "toc": true
    },
    {
        "title": "Performance tuning",
        "uri": "en/languages/php/tuning",
        "content": "Upgrade PHP 7 2  little purpose trying optimize PHP application PHP 5  PHP 7 generally twice fast uses half memory PHP 5  making unquestionably first step when trying PHP based site run faster  change PHP version  simply change type key  platform app yaml desired PHP version  always  test branch first merging master  Ensure router cache properly configured Although not PHP specific  common source performance issues misconfigured cache  common issue not whitelisting session cookies  results site cookies all  including analytics tools  cached  router cache documentation  cookie entry specifically  will need ensure application sending correct cache control header  router cache will obey whatever cache headers application sends  so send good ones  Static assets cache headers set using expires key  platform app yaml  web locations documentation details  Optimize FPM worker count PHP FPM reserves fixed number simultaneous worker processes handle incoming requests  simultaneous requests received number workers requests will wait  default worker count deliberately set rather conservative improved cases  PHP FPM sizing page determine set optimal value  Enable preloading PHP 7 4 later supports preloading code files shared memory once server startup  bypassing need include autoload later  Depending application doing so result significant improvements CPU memory usage  using PHP 7 4  PHP Preload instructions configure Platform sh consult application s documentation recommendations optimal preload configuration  not using PHP 7 4  good reason upgrade  Configure opcache PHP 5 5 later include opcache enabled times  be  may need tuned  however  opcache configured using php ini values  case best set using variables block  platform app yaml    note   using opcache preloading PHP 7 4 later  configure first let application run tuning opcache itself preload script may change necessary configuration here  important values set are  opcache maxacceleratedfiles  max number files opcache may cache once  lower number files application will begin thrashing become less effective  opcache memory_consumption  total memory opcache may use  application larger cache will start thrashing become less effective  determine files have  run command root application  find    type f  name    php    wc  l will report number files file tree end  php  may not perfectly accurate  some applications PHP code files don t end  php  may not catch generated files haven t generated yet  etc   it s reasonable approximation  Set opcache maxacceleratedfiles option value slightly higher this  Note PHP will automatically round value specify next highest prime number  reasons long lost sands time  Determining optimal opcache memory_consumption bit harder  unfortunately  requires executing code via web request adequate statistics  Fortunately command line tool will handle that  Change  tmp directory  or non web accessible writable directory  install CacheTool  large number commands options we re interested opcache status FastCGI command  really short version downloading using be  cd  tmp curl  sO http   gordalina github io cachetool downloads cachetool phar php cachetool phar opcache status   fcgi  SOCKET   fcgi  SOCKET option tells command connect PHP FPM process server Platform sh defined socket  command will output something similar following                                                               Name   Value                                                                Enabled   Yes     Cache full   No     Restart pending   No     Restart progress   No     Memory used   29 65 MiB     Memory free   34 35 MiB     Memory wasted       0 b  0                                                                  Cached scripts   1528     Cached keys   2609     Max cached keys   32531     Start time   Mon  18 Jun 2018 18 19 32  0000     Last restart time       Oom restarts   0     Hash restarts   0     Manual restarts   0     Hits   8554     Misses   1594     Blacklist misses       0  0       Opcache hit rate   84 29247142294                                                              important values Memory used  Memory free  Oom restarts  Out Memory Restarts   Oom restarts number high  meaning handful  means don t enough memory allocated opcache  example opcache using half 64 MB given default  fine  Memory free low Oom Restarts high  set higher value memory consumption  Remember remove cachetools phar file once you re done it   platform app yaml file will end including block similar to  variables  php   opcache maxacceleratedfiles   22000  opcache memory_consumption   96  Memory consumption set megabytes   Optimize code It s possible own code doing work needs to  Profiling optimizing PHP application larger topic will fit here  Platform sh recommends enabling Blackfire io project determine slow spots found addressed  web agency Pixelant published log analyzer tool Platform sh  works PHP scripts  offers good visualizations insights operation site suggest places further optimize configuration provide guidance when it s time increase plan size   Please note tool maintained 3rd party  ",
        "objectID": "en/languages/php/tuning",
        "weight": 3,
        "description": "Once your application is up and running it still needs to be kept fast.  Platform.sh offers a wide degree of flexibility in how PHP behaves, but that does mean you may need to take a few steps to ensure your site is running optimally.<br><br>The following recommendations are guidelines only.  They're also listed in approximately the order we recommend investigating them, although your mileage may vary.",
        "toc": true
    },
    {
        "title": "Python",
        "uri": "en/languages/python",
        "content": "Supported      Support libraries possible read environment directly application  generally easier robust use platformshconfig pip library handles decoding service credential information you  WSGI based configuration example  use Gunicorn run WSGI application  Configure  platform app yaml file few key settings listed below  complete example included end section  Specify language application  available versions listed above      codesnippet   registry images examples full python app yaml   language  yaml       endcodesnippet    Build application build hook  Assuming pip dependencies stored requirements txt setup py root application folder execute build steps  hooks  build    pip install  r requirements txt pip install  e   pip install gunicorn installed global dependencies environment  Configure command use start serving application  this foreground running process  web section  e g   web  commands  start   gunicorn  b 0 0 0 0  PORT project wsgi application  assumes WSGI file project wsgi py WSGI application object named application WSGI file  Define web locations application using  web  locations       root     passthru  true allow  false   static   root   static   allow  true configuration asks web server handle HTTP requests   static  serve static files stored  app static  folder everything else forwarded application server  Create Read Write mounts  root file system read only  explicitly describe writable mounts  mounts  tmp  source  local source_path  tmp logs  source  local source_path  logs setting allows application writing files  app tmp logs stored  app logs  Then  set routes application  platform routes yaml   https    default     type  upstream upstream   app http  complete  platform app yaml file  name  app type  python 2 7 web  commands  start   gunicorn  b  PORT project wsgi application  locations       root     passthru  true allow  false   static   root   static   allow  true hooks  build    pip install  r requirements txt pip install  e   pip install gunicorn mounts  tmp  source  local source_path  tmp logs  source  local source_path  logs disk  512 Using asyncio module above Gunicorn based WSGI example modified use Python 3 5  asyncio module  Change type python 3 6  Change start command use asyncio  web  commands  start   gunicorn  b  PORT  k gaiohttp project wsgi application  Add aiohttp pip dependency build hook  hooks  build    pip install  r requirements txt pip install  e   pip install gunicorn aiohttp Accessing services access various services Python  following examples  individual service pages information configuring service     codetabs name  Elasticsearch   type  python   url  https   examples docs platform sh python elasticsearch         language name  Kafka   type  python   url  https   examples docs platform sh python kafka         language name  Memcached   type  python   url  https   examples docs platform sh python memcached         language name  MongoDB   type  python   url  https   examples docs platform sh python mongodb         language name  MySQL   type  python   url  https   examples docs platform sh python mysql         language name  PostgreSQL   type  python   url  https   examples docs platform sh python postgresql         language name  RabbitMQ   type  python   url  https   examples docs platform sh python rabbitmq         language name  Redis   type  python   url  https   examples docs platform sh python redis         language name  Solr   type  python   url  https   examples docs platform sh python solr          endcodetabs    Project templates number project templates Python applications available GitHub  Not proactively maintained used starting point reference building own website web application",
        "objectID": "en/languages/python",
        "weight": 7,
        "description": "Platform.sh supports deploying Python applications. Your application can use WSGI-based (Gunicorn / uWSGI) application server, Tornado, Twisted, or Python 3.5+ asyncio server.",
        "toc": true
    },
    {
        "title": "Ruby",
        "uri": "en/languages/ruby",
        "content": "Supported versions Ruby MRI      Unicorn based Rails configuration example  use Unicorn run Ruby application  use Ruby application server Puma Thin  Configure  platform app yaml file few key settings listed below  complete example included end section  Specify language application  available versions listed above      codesnippet   registry images examples full ruby app yaml   language  yaml       endcodesnippet    Build application build hook  Assuming dependencies stored Gemfile root application folder execute build steps  hooks  build  bundle install   without development test deploy  RACK_ENV production bundle exec rake db migrate installed project dependencies environment  use dependecies key install global dependecies theses Ruby  Python  NodeJS PHP libraries  Configure command use start serving application  this foreground running process  web section  e g   web  upstream  socket_family  unix commands  start   unicorn  l  SOCKET  E production config ru  assumes Unicorn dependency Gemfile Use Unicorn app server group  production gem  unicorn  end rackup file config ru root repository  example rails application put  require  rubygems  require   File expandpath     config environment   FILE_  run Rails application Define web locations application using  web  locations       root   public  passthru  true expires  1h allow  true configuration asks web server handle HTTP requests   static  serve static files stored  app static  folder everything else forwarded application server  Create Read Write mounts  root file system read only  explicitly describe writable mounts  mounts  tmp  source  local source_path  tmp logs  source  local source_path  logs setting allows application writing files  app tmp logs stored  app logs  define read writre mounts  your application code itself deployed read only file system   Note file system persistent  when backup cluster mounts backed up too  Then  setup routes application  platform routes yaml   https    default     type  upstream first part project name upstream   app http  complete  platform app yaml file  name   app  type   ruby 2 6  web  upstream  socket_family  unix commands  start   unicorn  l  SOCKET  E production config ru  locations       root   public  passthru  true expires  1h allow  true relationships  database   database mysql  disk  2048 hooks  build  bundle install   without development test deploy  RACK_ENV production bundle exec rake db migrate mounts  tmp  source  local source_path  tmp logs  source  local source_path  logs Configuring services example assue relationships key mysql instance  configure need create  platform services yaml eample  database  type  mysql disk  2048 Connecting services define services environment  And  link services using  platform app yaml  relationships  database   mysqldb mysql  using following ruby function calls  obtain database details  require  base64  require  json  relationships  JSON parse Base64 decode64 ENV  PLATFORM_RELATIONSHIPS     give something like     database         path     main    query       is_master    true     port    3306   username     user    password         host     database internal    ip     246 0 241 50    scheme     mysql        Project templates number project templates Ruby applications typical configurations available GitHub  Not proactively maintained used starting point reference building own website web application  Platform sh provides helper library Ruby applications simplifies presenting environment information application  not required run Ruby applications Platform sh recommended",
        "objectID": "en/languages/ruby",
        "weight": 8,
        "description": "Platform.sh supports deploying any Ruby application. Your application can use any Ruby application server such as Unicorn or Puma and deploying a Rails or a Sinatra app is very straight forward.",
        "toc": true
    },
    {
        "title": "",
        "uri": "en/other",
        "content": "",
        "objectID": "en/other",
        "weight": -10
    },
    {
        "title": "Changelog",
        "uri": "en/other/changelog",
        "content": "2019      October PHP 7 4  support PHP 7 4  Projects larger application containers development environments  September  Dark mode  available Console  Go 1 13  support Go 1 13  July Elasticsearch 7 2  support Elasticsearch 7 2  Elasticsearch 5 2 5 4 support deprecated Kafka 2 2  support Kafka 2 2  Java 13  support Java 13  June Java  support documented use Java runtimes 8  11  12  includes examples use Java Config Reader  Headless Chrome  Users define Headless Chrome service access service container headless browser  used automated UI testing  May InfluxDB  support InfluxDB 1 7  Solr 7   8  support Solr 7 7 8 0  April Network storage service  Users define Network storage service sharing files containers  Kafka message queue service  Users define Kafka service storing  reading analysing streaming data  Management Console  Images wording updated throughout entire documentation alongside Management Console release  March Ruby 2 6  new version Ruby available  Go 1 12  support Go 1 12  Elasticsearch 6 5  support Elasticsearch 6 5  January RabbitMQ 3 7  support RabbitMQ 3 7  Solr 7  support Solr 7 6  Varnish  offer Varnish 5 2 6 0       2018      December Elasticsearch 5 4  offer Elasticsearch 5 4  Improved Bash support  Bash history application containers persists logins  PHP 7 3  support PHP 7 3  PostgreSQL 10 0 11 0  support PostgreSQL 10 0 11 0 automated upgrade path  Ruby 2 5 beta  fully support Ruby 2 5  October Redis updates  Redis 4 0 5 0 supported  Go language support  Go fully supported language platform  September Python 3 7 support  support Python 3 7  August New public Canadian region  new Canadian region open business  July Security Compliance  created new  Security Compliance  section help customers address common questions relating GDPR  Data Collection  Data Retention  Encryption  similar topics  June Node js 10  offer Node js version 10  releases 10 x series will included container  MongoDB 3 6  offer MongoDB 3 2  3 4  3 6  Note upgrading MongoDB 3 0 requires upgrading intermediary versions  March Web Application Firewall  WAF   Platform sh securing applications don t need change anything  Read blog post  February post_deploy hook added  Projects run commands deploy without blocking new requests       2017      December New project subdomains  routes generated subdomains literal domains development environments will use   instead translating      projects created date   include tag support YAML files  YAML configuration files support generic  include tag used embed one file within another  Extended mount definitions  new syntax added defining mount points self descriptive makes future extension easier  Blocking older TLS versions  possible disable support HTTPS requests using older versions TLS  TLS 1 0 known insecure circumstances compliance standards require higher minimum supported version   all  placeholder routes  new placeholder available routes yaml files matches configured domains  GitLab source code integration  Synchronize Git repository host GitLab Platform sh  November PHP 7 2 supported  release PHP 7 2 0  Platform sh offers PHP 7 2 containers Platform Professional  September Health notifications  Low disk warnings will trigger notification via email  Slack  PagerDuty  August Worker instances  Applications support worker instances  July Node js 8 2  Node js 8 2 available  June Memcache 1 4  Memcache 1 4 available caching backend  Custom static headers  platform app yaml  Added support setting custom headers static files  platform app yaml  example information  May Code driven variables  platform app yaml  Added support setting environment variables via  platform app yaml  Python 3 6  Ruby 2 4  Node js 6 10  Added support updated versions several languages  April Support automatic SSL certificates  production environments issued SSL certificate automatically Let s Encrypt  routing documentation information  MariaDB 10 1  MariaDB 10 1 available  accessible mysql 10 1   Additionally  MariaDB 10 0 10 1 use Barracuda file format innodblargeprefix enabled  allows longer indexes resolves issues UTF 8 MB use cases  March Elasticsearch 2 4 5 2 support plugins  Elasticsearch 2 4 5 2 available  number optional plugins avaialble  Elasticsearch documentation information  InfluxDB 1 2  new service type available InfluxDB 1 2  time series database  InfluxDB documentation information  February HHVM 3 15 3 18  Two new HHVM versions available  January Support Multiple MySQL databases restricted users  MySQL supports multiple databases  restricted users per MySQL service  MySQL documentation details read blog post  Support Persistent Redis services  Added redis persistent service appropriate persistent key value data  redis service available caching  Redis documentation details  Support Apache Solr 6 3 multiple cores  Added Apache 6 3 service  configured multiple cores  Solr documentation details  Support HTTP 2  site configured HTTPS will automatically support HTTP 2  Read blog post       2016      December Support Async PHP  Deploy applications ReactPHP Amp allow PHP run single process asynchronous process  Read blog p",
        "objectID": "en/other/changelog",
        "weight": 2,
        "description": "Look here for all the most recent additions to Platform.sh.",
        "toc": true
    },
    {
        "title": "Glossary",
        "uri": "en/other/glossary",
        "content": "",
        "objectID": "en/other/glossary",
        "weight": 1,
        "description": "something"
    },
    {
        "title": "The Big Picture",
        "uri": "en/overview",
        "content": "",
        "objectID": "en/overview",
        "weight": -120,
        "description": "If you're new to Platform.sh, we recommend starting with Structure and Build & Deploy, which will get you started on the right track to best leverage Platform.sh."
    },
    {
        "title": "Build & Deploy",
        "uri": "en/overview/build-deploy",
        "content": "build process looks configuration files repository assembles necessary containers  deploy process makes containers live  replacing previous versions  virtually no interruption service  Always Compiling Interpreted languages PHP Node js may not seem compiled  modern package management tools Composer npm  growing use CSS preprocessors Sass  modern web applications need  build  step source code production execution code  Platform sh  aim easy  build step includes entire application container mdash from language version build tools code mdash rebuilt every time  build process control runs every Git push  Every Git push validation not code  build process  Whether that s installing packages using Composer Bundler  compiling TypeScript Sass  building application code Go Java  build process vetted every time push  Whenever possible  avoid committing build assets repository regenerated build time  Depending application  may include 3rd party libraries frameworks  generated optimized CSS JS files  generated source code  etc  following two constraints sure fast  repeatable builds  build step environment independent  paramount ensure development environments truly perfect copies production  means not connect services  like database  during build  final built application read only  application requires writing filesystem  specify directories require Read Write access  not directories code  security risk  Building application push code  first build step validate configuration files  i e   platform app yaml   platform services yaml   platform routes yaml   Git server will issue error validation fails  nothing will happen server    note     projects single  platform app yaml file  Platform sh supports multiple applications single project  will scan repository  platform app yaml files subdirectories directory containing one will built independent application  built application will not contain directories above one found  system smart enough not rebuild applications already built  so multiple applications  changed applications will rebuilt redeployed  live environment composed multiple containers mdash both application s  services depends on  virtual network connecting them  router route incoming requests appropriate application  Based application type system will select one pre built container images run following  First  dependencies specified  platform app yaml file installed  include tools Sass  Gulp  Drupal Console  others may need  Then  depending  build flavor  specified configuration file  run series standard commands  default PHP containers  example  simply run composer install  Finally  run  build hook  configuration file  build hook comprises one shell commands write finish creating production code base  compiling Sass files  running Gulp Grunt script  rearranging files disk  compiling application compiled language  whatever else want  Note that  point  able access file system  no services databases available  Once completed  freeze file system produce read only container image  image final build artifact  reliable  repeatable snapshot application  built want  environment want  container configuration  both application its underlying services  exclusively based configuration files  configuration files managed Git  know given container 1 1 relationship Git commit  means builds always repeatable  means detect no changes affect given container  skip build step entirely reuse existing container image  saving great deal time  practice  entire build process usually takes less minute  Deploying application Deploying application several steps  although they re quicker  First  pause incoming requests hold so there s no interruption service  disconnect current containers file system mounts  any  connect file systems new containers instead  it s new branch no existing file system  clone parent branch  open networking connections various containers  specified configuration files  using relationships key   No configuration  no connection  helps security  connections actually needed even exist  connection information service available application environment variables  working  running containers two steps run  First   start  command specified  platform app yaml file start application  run that   With PHP  optional   run deploy hook  Just build hook  deploy hook number shell commands need prepare application  Usually includes clearing caches  running database migrations  so on  complete access services application running  file system code lives will read only  Finally  once deploy hooks done  open floodgates let incoming requests newly deployed application  You re done  practice  deploy process takes few seconds  plus whatever time required deploy hook  any",
        "objectID": "en/overview/build-deploy",
        "weight": 2,
        "description": "Every time you push to a live branch (a git branch with an active environment attached to it) or activate an <a href=\"/administration/web/environments.html\">environment</a> for a branch, there are two main processes that happen: <b>Build</b> and <b>Deploy</b>.",
        "toc": true
    },
    {
        "title": "Getting help",
        "uri": "en/overview/getting-help",
        "content": "will redirected list support tickets  click open  New ticket  top page  File issues fields new ticket Submit  open support ticket directly user account  welcome hop on public Slack chat channel  always invited drop us line contact form",
        "objectID": "en/overview/getting-help",
        "weight": 4,
        "description": "If you're facing any issue with Platform.sh, you can submit a support ticket from the Platform.sh management console."
    },
    {
        "title": "Pricing",
        "uri": "en/overview/pricing",
        "content": "full pricing information at  https   platform sh pricing  Platform sh plans include  four Environments  3 staging development  1 live site   one Developer license 5GB Storage per environment multiple Backend services  MySQL  PostgreSQL  Elasticsearch  Redis  Solr    support switch plans  downgrade upgrade  freely  note reducing storage currently not supported technical reasons  need reduce storage  please create support ticket  will always billed prorated rate plan period used  may cancel plan time will billed actual period used  Enterprise Agency Plans pay purchase order  plans need add credit card account  offer free trial period so test service great is  ever need time evaluate Platform sh  please contact sales representatives  issue extra voucher prolong test    Prices below listed US Dollars  will billed US Dollars  Euros  British Pounds depending billing address is  list current prices please refer https   platform sh pricing     Euro Prices presented excluding VAT  bill  appropriate will include correct VAT rate  Extras extra consumption prorated time actually used    example  added extra developer 10 days billed around  3 extra end month  based then current price extra developer seat   Extra developers Adding developer project will add monthly per project per user fee unless agency enterprise account  Extra environments add extra staging development environments plan multiples 3    example  want 12 staging environments pay additional  63 per month top basic plan price  Extra storage add additional storage  2 50 per 5GB per staging development environment    example  default plan  with 3 staging environments  add 10GB  for total 15GB per environment   pay extra  15 month      added 3 extra environments  for total 6 staging environments  added 10GB  for total 15GB per environment   pay extra  30 month  Development basic plan  Development  starts  10 per month  includes 4 environments  3 staging development 1 future production     not map custom domain name development plan Development environments less resources production environments  Production live environment  master  production plan resources development environments project  https   platform sh pricing lists resources available per plan  these always production environment resources  development environment own resources  not counted towards limit  map domain names master environment  SSL support always included  Multiple Applications single project Platform sh plans support multiple applications single cluster  share global resources cluster  resources Standard plan not sufficient run one application cluster MySQL database Service  Useful multi apps start Medium  Medium plan  example  support 3 Apps MySQL instance Redis instance  wonder specific setup fit plan  don t hesitate contact support  Enterprise Dedicated price lower traditional managed hosting  included development staging environments  triple redundancy every element stack with    99 99  Uptime Guaranteed   24 7 White Glove On boarding Support Please contact sales department discuss help you  Agencies propose three tiers agencies perks  Free user licenses free site own agency 10  customer lifetime referral fees 15  discounts Access agency speci c  Small  price plan Free Medium Large plan website own agency site Free Small plan every Enterprise project sold  hellip and more  Learn join today    German Cloud Pricing prices Germany currently set 10  above EU US plan prices  Thus   Production Standard  environment Sovereign German Cloud will  55 instead  50  estimation page  which reach clicking account dashboard edit link project  does reflect new options  questions don t hesitate contact sales department",
        "objectID": "en/overview/pricing",
        "weight": 3,
        "description": "Platform.sh is the Idea-to-Cloud Application Platform—the end to end solution to develop and deploy web apps and sites. We offer a free trial period so you can test the service and see how great it is.<br><br>You can view all information about our product pricing on our <a href=\"https://platform.sh/pricing/\">website</a>.",
        "toc": true
    },
    {
        "title": "Structure",
        "uri": "en/overview/structure",
        "content": "three types containers within cluster  one Router one Application containers zero Service containers containers managed three special files Git repository   platform routes yaml  platform services yaml  platform app yaml cases  means repository will look this  yourproject   git   platform  services yaml routes yaml  platform app yaml Router always exactly one Router per cluster  Router cluster single nginx process  configured routes yaml file  maps incoming requests appropriate Application container provides basic caching responses  so configured  no persistent storage  Service Service containers configured services yaml file  may zero Service containers cluster  depending services yaml file  code Service provided Platform sh pre built container image  along default configuration  Depending service may include user provided configuration services yaml file  Examples services include MySQL MariaDB  Elasticsearch  Redis  RabbitMQ  Application always one Application container cluster  may more  Application container corresponds  platform app yaml file repository  3  platform app yaml files  will three Application containers  Application containers hold code provide via Git repository  Application containers always built off one Platform sh provided language specific images   PHP 5 6    PHP 7 2    Python 3 7   possible multiple Application containers running different languages versions  typical applications  one  platform app yaml file  generally placed repository root",
        "objectID": "en/overview/structure",
        "weight": 1,
        "description": "Every application you deploy on Platform.sh is built as a <b>virtual cluster</b>, containing a set of containers.  The master branch of your Git repository is always deployed as the production cluster.  Any other branch can be deployed as a development cluster.<br><br>By default, you can have up to three live development clusters at once, but you can buy more on a per-project basis.",
        "toc": true
    },
    {
        "sidebarIgnore": true,
        "uri": "en/registry",
        "content": "",
        "objectID": "en/registry"
    },
    {
        "title": "Security And Compliance",
        "uri": "en/security",
        "content": "",
        "objectID": "en/security",
        "weight": -50,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Backup and restore",
        "uri": "en/security/backups",
        "content": "Platform sh Professional Platform sh Professional  enabled clients manage own backup restore functions  Please backup restore page details  RPO  User defined  RPO configured clients  RTO  Variable  Recovery time will depend upon size data recovering Platform sh Enterprise Grid Enterprise Dedicated RPO  6 hours  Platform sh takes backup Platform sh Enterprise environments every 6 hours  RTO  Variable  Recovery time will depend upon size data recovering",
        "objectID": "en/security/backups",
        "weight": 6,
        "toc": true,
        "description": "Backups vary by our offering and their retention is governed by our <a href=\"/security/data-retention.html\">data retention</a> policies.<br><br>\n\nThis section details our Recovery Point Objective (RPO) and Recovery Time Objective (RTO) for our Platform.sh Professional and Platform.sh Enterprise offerings.\n"
    },
    {
        "title": "Compliance guidance",
        "uri": "en/security/compliance-guidance",
        "content": "Compliance guidance Platform sh PCI SOC 2 certified customers using services  requirements responsibility host others responsibility application developer  Basic compliance questions handled support team via ticket  advanced questions walk through full audit please contact Platform sh Account Manager  Overview Platform sh provides Platform Service  PaaS  solution customers may use store  process  transmit cardholder data  Security   Compensating Controls list security measures  please Security page  Please note customer environments deployed read only instance  segregated GRE IPSEC tunnels  often permits compensating controls claimed several PCI requirements  customers use PaaS variety ways  best approach auditors focus  What I  customer  control configure managed compliant manner   Responsibility Platform sh customers shared responsibility ensuring date secure system  Compliance ultimately responsibility customer  however  Platform sh responsible for  Physical Environmental controls   use third party hosting thus requirements passed providers  e g  AWS   Patch Management   Platform sh responsible patching fixing underlying system software  management software  environment images  Configuration Management   Platform sh maintains configuration its infrastructure devices  Awareness Training   Platform sh trains its own employees secure software development management  Capacity Management   Platform sh responsible capacity management infrastructure  server allocation bandwidth management  Access Control   Platform sh responsible providing access control mechanisms customers vetting Platform sh personnel access  Backups   Platform sh responsible backing infrastructure management components system  Platform sh Dedicated Enterprise  only   Platform sh will backup application code databases behalf customers  Customers responsible for  Patch Management   Customers responsible maintaining patching application code uploaded Platform sh  either written third party  Configuration Management   Customers responsible secure configuration application  including Platform sh configuration routes managed YAML files  Awareness Training   Customers responsible training own employees users secure software practices  Capacity Management   Customers responsible ensuring application containers sufficient resources selected tasks  Access Control   Customers responsible effectively leveraging available access control mechanisms  including proper access control settings  secrets management  ssh keys management  use two factor authentication  Backups   Platform sh Professional customers responsible application database backups  following sections provide guidance shared responsibilities achieve PCI DSS compliance  list below covers sections found typical SAQ D although may not need level detail efforts  section currently using PCI DSS 3 2 reference  Requirement 1  Requirement  Responsibility Comments                                              1 1 1 3 3  Platform  Infrastructure cannot modified customer    1 3 4  Shared  Platform responsible infrastructure  Customer responsible correct routes yaml configuration   1 3 5 1 3 6 Platform  Infrastructure cannot modified customer    1 3 7  Shared  Customers responsible ensuring application does not leak private IP addresses    1 4 1 5  Shared  Customers responsible devices accessing environment   Requirement 2  Requirement  Responsibility Comments                                              2 1  Shared  Customer responsible change vendor supplied defaults app    2 1 1  N A  There no wireless environments connected CDE    2 2 2 2 1  Platform  Infrastructure cannot modified customer    2 2 2 2 2 5 Shared  Customers ensure app configured use necessary services  services yaml   routes  routes yaml   apps  app yaml    2 3  Shared  Customers responsible admin access app    2 4  Shared  Customer responsible application data flows  Platform maintains data flow chart network diagram infrastructure    2 5  Shared  Customers responsible app    2 6  Platform  Yes   Requirement 3  Requirement  Responsibility Comments                                            3 1  Shared  Platform sh responsible storage securely deleted  Customer responsible provisions     3 2 3 4 1 Customer  Customer responsibility  Customer responsible sanitizing cardholder data copied non production sources     3 5 3 7  Shared  Customer responsible data encryption non infrastructure key management  recommend column level database encryption  need data rest protection  please docs Encryption  Requirement 4  Requirement Responsibility Comments                                           All  Customer  Customer responsible internet transmission cardholder data  docs Encryption  Requirement 5  Requirement Responsibility Comments                                           All  Shared  Customer responsible systems   Requirement 6  Requirement Responsibility Comments                                           All  Shared  Customer responsible application  Platform sh responsible infrastructure   Requirement 7  Requirement Responsibility Comments                ",
        "objectID": "en/security/compliance-guidance",
        "weight": 9,
        "toc": true,
        "description": "Platform.sh has many PCI and SOC 2 certified customers using our services. Some requirements are the responsibility of the host and others are the responsibility of the application developer.<br><br>\n\nBasic compliance questions can be handled by our support team via a ticket. For more advanced questions or walk-through of a full audit please contact your Platform.sh Account Manager.\n"
    },
    {
        "title": "Data collection",
        "uri": "en/security/data-collection",
        "content": "Application logs Application logs generated host application application server  such PHP FPM   immutable Customers prevent tampering  logs secured behind key based SSH so Customer relevant teams access  System logs Platform sh records routine system logs  not access Customer specific system logs customer environment unless requested so help solve problem  future  will rolling better log segregation allow Customer easier access own logs diagnostic purposes  Access logs two main types access logs  web SSH  Web access logs Application access logs immutable Customers prevent tampering  logs secured behind key based SSH so Customer relevant teams access  SSH access logs SSH access logs securely stored infrastructure not accessible customers  accessed Platform sh support personnel part audit requested  Access customers Platform sh support personnel customer environments logged  However  log connection itself  not done during session  violation customer privacy  Vendor data sharing identified mapped data collect share vendors  such AWS  Azure  Orange   know capture goes  vendors vetted security GDPR compliance  enacted contract amendments Data Processing Agreements  DPAs  applicable",
        "objectID": "en/security/data-collection",
        "weight": 3,
        "description": "As part of our normal business operations we do collect various pieces of data.<br><br>In GDPR terms:<ul><li>Article 4: Our accounts system contains some (routine) Article 4 items (name, address, phone, etc.) in order to allow us to bill your account appropriately.  This information can be verified, changed, and deleted by [logging into your account](https://accounts.platform.sh/).</li><li>Article 9: We don't capture and store any Article 9 special identifiers (such as race, religion, sexual orientation, or other attributes that are irrelevant to our business).</li><li>Article 30: The only Article 30 items we keep are IP address and Log files. These reside on AWS/Azure/Orange (depending on your hosting), and may be sent to Sentry.io when there are crashes.</li></ul>",
        "toc": true
    },
    {
        "title": "Data deletion",
        "uri": "en/security/data-deletion",
        "content": "Media destruction Media destruction handled via backend providers  When provider decommissions media undergoes destruction outlined NIST 800 88  Resources AWS Security Whitepaper Azure Data Retention Google Cloud Platform Compliance Information Interoute Compliance Information",
        "objectID": "en/security/data-deletion",
        "weight": 5,
        "toc": true,
        "description": "Data deletion is handled via our backend providers. When a volume is released back to the provider, the provider will perform a wipe on the data utilizing either <a href=\"https://csrc.nist.gov/publications/detail/sp/800-88/rev-1/final\">NIST 800-88</a> or <a href=\"(http://www.dss.mil/documents/odaa/nispom2006-5220.pdf)\">DoD 5220.22-M</a> depending upon the offering. This wipe is done immediately before reuse.<br><br>\n\nIf your project is utilizing encrypted volumes, the encryption key is destroyed when we release the volume back to the provider adding another layer of protection.\n"
    },
    {
        "title": "Data retention",
        "uri": "en/security/data-retention",
        "content": "Data retention Platform sh logs stores sorts data normal part its business  information retained needed business purposes old data purged  retention time varies depending type data stored  Account information Information relating customer accounts  login information  billing information  etc   retained long account active Platform sh  Customers may request account deleted related data purged filing issue ticket  System logs System level access security logs maintained Platform sh diagnostic purposes  logs not customer accessible  logs retained least 6 months 1 year  General system level logs retained least 30 days 1 year  Payment processing logs Logs related payment processing retained least 3 months 1 year  consistent PCI recommendations  Application logs Application logs customer environment retained environment  Individual log files truncated 100 MB  regardless age  accessing logs page instructions access them  When environment deleted its application logs deleted well  Backups Backups Platform sh Professional retained least 7 days  will purged 7 days 6 months  Platform sh s discretion  Enterprise backups Platform sh takes backup Platform sh Enterprise environments every 6 hours  backups retained 2 weeks  Tombstone backups When project deleted Platform sh takes final backup active environments Git repository holding user code  final backup allow Platform sh recover recently deleted project case accident   tombstone  backups retained 7 days 6 months  Analytics Platform sh uses Google Analytics various web pages  therefore Google Analytics will store collected data period time  configured Google Analytics account store data 14 months time last accessed site  minimum Google allows",
        "objectID": "en/security/data-retention",
        "weight": 4,
        "description": "Platform.sh logs and stores all sorts of data as a normal part of its business.  This information is retained as needed for business purposes and old data is purged. The retention time varies depending on the type of data stored.",
        "toc": true
    },
    {
        "title": "Encryption",
        "uri": "en/security/encryption",
        "content": "Data Transit Data transit World Platform sh always encrypted sites tools Platform sh supports maintains require TLS SSH access  includes Platform sh management console  Accounts site  Git repositories  Documentation  Helpdesk  Data transit World customer applications encrypted default  SSH HTTPS connections generally accepted  HTTP request redirected HTTPS  Users may opt out redirect accept HTTP requests via routes yaml configuration  although not recommended  default HTTPS connections use automatically generated Let s Encrypt certificate users may provide own TLS certificate  Data transit Platform sh controlled networks  eg  application database  may may not encrypted  nonetheless protected private networking rules  Data Rest application data encrypted rest default using encrypted ephemeral storage  typically using AES 256 block cipher   Enterprise Dedicated clusters not full encryption rest  specific audit requirements surrounding data rest encryption please contact us",
        "objectID": "en/security/encryption",
        "weight": 7,
        "toc": true
    },
    {
        "title": "GDPR",
        "uri": "en/security/gdpr",
        "content": "part measures implemented following  Data Protection Officer  Appointment Security Officer holds Data Protection Officer  DPO  role  Data Breach Policy  updated data breach policy procedures reviewed suppliers compliant breach notifications  Consent  We ve confirmed customer communication  business related marketing related  opt in no information shared us without customer s consent  Data Governance  internally audited suppliers internal security GDPR compliance status confirm in scope suppliers GDPR compliant  Data Protection design  We ve implemented policies company ensure employees follow necessary training protocols around security  addition  privacy protection part every project during instantiation  Enhanced Rights  GDPR provides rights individuals right portability  right rectification  right forgotten  We ve made sure comply rights  Nearly information edited user s account  delete accounts upon request  Personally identifiable information  PII   We ve audited systems confirm encrypt protect personal data  Data Flows  identified data  mapped high level data flow  mapped data shared vendors   including cross border transfers  PIA  performed internal Privacy Impact Analysis  PIA  using CNIL s PIA Software ensure comply GDPR  Security  created https   platform sh security document security features  Data Collection  We ve documented information data collect  Data Retention  documented information data retention  DPA  revised Terms Service Privacy Policy align GDPR offer GDPR Data Processing Agreement Customers need it",
        "objectID": "en/security/gdpr",
        "weight": 1,
        "description": "Platform.sh has taken numerous steps to ensure GDPR compliance."
    },
    {
        "title": "Vulnerability Scanning and Penetration Testing",
        "uri": "en/security/pen-test",
        "content": "Approved Activities Vulnerability scanning web application  free perform often required without approval Platform sh  Web application penetration tests not result high network load  free perform often required without approval Platform sh  Approved Activities Prior Arrangement Platform sh Enterprise Dedicated customers permit infrastructure penetration testing  but not load testing  prior arrangement  requires special advanced preparation  submit support ticket request minimum three  3  weeks advance us coordinate behalf  Prohibited Activities Vulnerability scanning web applications not own  Denial Service tests type testing results heavy network load  Social engineering tests Platform sh services including falsely representing yourself Platform sh employee  Infrastructure penetration tests non Dedicated Enterprise customers  includes SSH database testing  Rate Limits Please limit scans maximum 20 Mbps 50 requests per second order prevent triggering denial service bans  Troubleshooting vulnerability scanning suggests may issue Platform sh s service  please ensure container updated retest  problem remains  please contact support",
        "objectID": "en/security/pen-test",
        "weight": 10,
        "sidebarTitle": "Security scans",
        "toc": true,
        "description": "Platform.sh understands the need for application owners to ensure the integrity, and standards compliance, of their applications. Because there could be adverse impacts to other clients which would violate our terms of service, we only permit certain types of tests.\n"
    },
    {
        "title": "Protective block",
        "uri": "en/security/protective-block",
        "content": "Platform sh security block Outdated software often contains known vulnerabilities exploited Internet  Sites exploited protected Platform sh  system partially blocks access sites  protective block works Platform sh maintains database signatures known security vulnerabilities open source software commonly deployed infrastructure  security check analyze known vulnerabilities open source projects Drupal  Symfony WordPress  cannot examine customizations written Platform sh customers  analyze code application  When push new code Git Regularly when new vulnerabilities added database vulnerability deemed critical detected application  Platform sh going reject Git push  run two types blocks  production websites  run  partial block  allows site stay mostly online  Depending nature vulnerability  parts request  query string  cookies additional headers  may removed requests  requests may blocked entirely   apply logging in  form submission product checkout  development websites  run complete blocks  error message gives detailed information vulnerability  Unblocking automated upon resolution security risk  block removed soon customer applies security upgrade removes vulnerability  Opting protective block protective block protect against known vulnerabilities software deploy Platform sh  nonetheless want opt protective block  simply need specify  platform app yaml this  preflight  enabled  false explicitly opt out specific check this  preflight  enabled  true ignore_rules     drupal SA CORE 2014 005",
        "objectID": "en/security/protective-block",
        "weight": 8,
        "toc": true,
        "description": "The Platform.sh service has a protective blocking feature that, under certain circumstances, restricts access to web sites with security vulnerabilities. We use this partial blocking method to prevent exploitation of known security vulnerabilities.<br><br>\n\nThe protective block is meant for high impact, low complexity attacks.\n"
    },
    {
        "title": "SCA",
        "uri": "en/security/sca",
        "content": "article states    Payment service providers shall apply strong customer authentication when payer creates  amends  initiates first time  series recurring transactions amount payee  SCA part second Payment Services Directive  PSD2   acting regulatory requirement reduce fraud online transactions secure  law went affect September 14  2019  European card holders will required go additional re authentication step within Platform sh management console starting October 1  2019 order authenticate recurring payments payment institution  Prior October 1  2019  Platform sh projects associated EU credit card will banner top management console  banner will direct authenticate payment information settings  process click  Authenticate  will vary according payment institution  cases  having phone number registered institution will sufficient enable 2FA here  October 1  2019  SCA banner management console will become warning update payment settings  will grace period first few weeks following change  when period ended projects not set payment authentication console will suspended  so important so soon possible",
        "objectID": "en/security/sca",
        "sidebar-title": "SCA",
        "alt-title": "Strong Customer Authentication (SCA)",
        "weight": 2,
        "description": "In accordance with Article 14(1) of the <a href=\"https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A32018R0389\">Commission Delegated Regulation (EU) 2018/389</a>, Platform.sh has made changes in order to comply with and implement Strong Customer Authentication (SCA) for customers using payment methods from the EU. "
    },
    {
        "title": "Update all the things",
        "uri": "en/security/updates",
        "content": "Platform sh Rule  Update Early  Update Often Platform sh periodically updates its container images latest security updates upstream providers   PHP versions  Ruby versions  MariaDB versions  etc    not always happen immediately when security vulnerability identified released tends fairly soon after  However  updates not automatically propagated individual projects involve potential customer downtime  Instead  latest available version every requested container loaded deploy given environment  deploy always guaranteed running latest Platform sh provided version container  regular redeploys scheduled Let s Encrypt SSL certificates will ensure container versions date time  reason recommend customers setup appropriate cron task redeploy every two weeks so",
        "objectID": "en/security/updates",
        "weight": 11,
        "sidebarTitle": "Updating"
    },
    {
        "title": "Tutorials",
        "uri": "en/tutorials",
        "content": "",
        "objectID": "en/tutorials",
        "weight": -30,
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tortor augue, tincidunt a est quis, ullamcorper feugiat odio. Donec molestie, nunc vitae placerat elementum, ante ligula gravida dolor, ut varius elit ipsum sed nunc. Quisque varius lacinia urna, ac consequat turpis gravida volutpat."
    },
    {
        "title": "Authenticated Composer repositories",
        "uri": "en/tutorials/composer-auth",
        "content": "Specify third party repository composer json example  consider several packages want install private repository hosted my private repos example com  List repository composer json file     repositories        type    composer    url    https   my private repos example com        Set env COMPOSER_AUTH project variable Set Composer authentication adding project level variable called env COMPOSER_AUTH JSON available during build time  done management console via command line  so  platform variable create   level project   name env COMPOSER_AUTH     json true   visible runtime false     value    http basic     my private repos example com     username    your username    password    your password      env  prefix will variable appear its own Unix environment variable available Composer during build process  optional   no visible runtime flag means variable will defined during build hook  offers slightly better security  Note  authentication credentials may cached project s build container  so please sure clear Composer cache upon changing authentication credentials  use platform project clear build cache command  Build application Composer simply need enable default Composer build mode  platform app yaml  build  flavor   composer  case  Composer will able authenticate download dependencies authenticated repository  Private repository hosting Typically  private dependency will hosted private Git repository  Platform sh supports private repositories site itself  doesn t help pulling third party dependencies private repositories unless SSH keys associated them  Fortunately  private Composer tools  including Satis  Toran Proxy  Private Packagist  mirror tagged releases dependencies serve directly rather hitting Git repository  Therefore long dependencies specify tagged releases no need authenticate against remote Git repository no authentication issue",
        "objectID": "en/tutorials/composer-auth",
        "weight": 1,
        "toc": true,
        "sidebarTitle": "Authenticated Composer",
        "description": "Some PHP projects may need to leverage a private, third party Composer repository in addition to the public Packagist.org repository.  Often, such third party repositories require authentication in order to download packages, and not everyone is comfortable putting those credentials into their Git repository source code (for obvious reasons).<br><br>\n\nTo handle that situation, you can define a <code>env:COMPOSER_AUTH</code> <a href=\"/development/variables.html#project-variables\">project variable</a> which allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing an <code>http-basic</code> object (see <a href=\"https://getcomposer.org/doc/03-cli.md#composer-auth\">composer-auth specifications</a>).<br><br>\n\nThe advantage is that you can control who in your team has access to those variables.\n"
    },
    {
        "title": "Exporting data",
        "uri": "en/tutorials/exporting",
        "content": "Downloading code application s code maintained Git  Git distributed system trivial download entire code history simple git clone platform command  Downloading files application runs read only file system  so cannot edited  means there s nothing download isn t already Git repository  files download writable file mounts may defined  platform app yaml file  easiest download using rsync tool  instance  suppose mounts section defines one web accessible directory one non web accessible directory  mounts   web uploads   source  local source_path  uploads  private   source  local source_path  private Using CLI CLI provides useful mount command accessing mount data  platform mount list Downloading mount simple running following  platform mount download Using rsync use rsync download directory  use following commands  platform ssh   pipe command will return SSH URL current environment inline string rsync recognize  use non default environment  use  e switch   pipe  Note trailing slash remote path means rsync will copy just files inside specified directory  not directory itself  rsync  az platform ssh   pipe  app private    private  rsync  az platform ssh   pipe  app web uploads   uploads    note     you re running rsync MacOS  add   iconv utf 8 utf 8 mac rsync call  rsync documentation details adjust download process  Download data services mechanism downloading service  such database  varies  services designed hold non persistent information  such Redis Solr  it s generally not necessary download data rebuilt primary data store  download data persistent services  MySQL  PostgreSQL  MongoDB  InfluxDB   service s page instructions",
        "objectID": "en/tutorials/exporting",
        "weight": 2,
        "toc": true,
        "description": "Platform.sh aims to be a great host, but we never want to lock you in to our service. Your code and your data belong to you, and you should always be able to download your site's data for local development, backup, or to \"take your data elsewhere\".\n"
    },
    {
        "title": "Migrating to Platform.sh",
        "uri": "en/tutorials/migrating",
        "content": "Preparation First  assemble Git repository appropriate  master branch  sure include Platform sh configuration files  will not able push repository Platform sh otherwise  applications  Drupal will need dump configuration files proceeding  will need provide appropriate configuration read credentials services runtime integrate application s configuration  details integration will vary systems  sure appropriate project templates recommended configuration  Go Templates Java Templates Node js Templates PHP Templates Python Templates management console  click   Add project create new Platform sh project  When asked select template pick  Create blank project   Push code When creating new project  management console will provide two commands copy paste similar following  git remote add platform nodzrdripcyh6 git us platform sh nodzrdripcyh6 git git push  u platform master first will add Git remote Platform sh repository named platform  name significant Platform sh CLI will look either platform origin Platform sh repository  commands may not function correctly otherwise  second will push repository s master branch Platform sh master branch  Note project always start master branch  deploys environment will fail  When push  new environment will created using code provided configuration files  system will flag errors configuration can  so  correct error try again  Import database will need dump backup database wish start from  process essentially type persistent data service  MySQL  PostgreSQL  MongoDB documentation appropriate  Import files Content files  that is  files not intended part code base so not Git  uploaded mounts using Platform sh CLI using rsync  will need upload directory s files separately  Suppose instance following file mounts defined  mounts   web uploads   source  local source_path  uploads  private   source  local source_path  private using CLI rsync common solutions uploading files mounts  use SCP  Platform sh CLI easiest import files project mounts using Platform sh CLI mount upload command  upload directories above  use following commands  platform mount upload   mount web uploads   source   uploads platform mount upload   mount private   source   private rsync use rsync upload directory  platform ssh   pipe command will return SSH URL current environment inline string rsync recognize  use non default environment  use  e switch   pipe  Note trailing slash remote path means rsync will copy just files inside specified directory  not directory itself  rsync  az   private platform ssh   pipe  app private  rsync  az   web uploads platform ssh   pipe  app web uploads   note     you re running rsync MacOS  add   iconv utf 8 mac utf 8 rsync call  rsync documentation details adjust upload process",
        "objectID": "en/tutorials/migrating",
        "weight": 3,
        "toc": true,
        "description": "Moving an already-built site to Platform.sh is generally straightforward.  For the most part, the only part that will vary from one framework to another is the details of the Platform.sh configuration files.<br><br>\n\nSee the <a href=\"/frameworks.html\"><b>Featured Frameworks</b></a> section or our <a href=\"/development/templates.html\"><b>Project Templates</b></a> for more project-specific documentation.\n"
    },
    {
        "title": "Region migration",
        "uri": "en/tutorials/region-migration",
        "content": "Why migrate regions  Different datacenters located different geographic areas  may want keep site physically close bulk user base reduced latency  selected regions offer European Sovereign hosting  created project non Sovereign region may need migrate Sovereign region  regions running older versions Platform sh orchestration system offers fewer features  particular  US 1 EU 1 regions not offer XL 2XL plans  self terminating builds case build process runs long  distributing environments across different grid hosts  one regions desire features will need migrate newer US 2 EU 2 regions  Scripted migration process Although not directly supported Platform sh  agency named Contextual Code built bash migration script automate common configurations  site typical single application single SQL database  script care process you   If additional backend systems may need additional work manually  documented below   0  Preparation Plan timeframe handle migration  will want avoid developing new code during period  as Git repository will change  prepared brief site outage when migrate  essentially relaunching site  just host previously  Plan accordingly  Set DNS Time to Live low possible  1  Create new project Create new Platform sh Project desired region  initially create Development project change plan size immediately switching go ahead use desired size beginning  When system asks want use existing template provide own code  select provide own code  However  not need push code yet  Note new project s ID URL  2  Download invoke script Download Platform Migration tool Contextual Code  README file explains step uses detail  typical site will carry full process transfering code  data  configuration  domain name new project  Note  will need update DNS record registrar point new project when ready go live  aware script does not transfer external integrations  mdash  health notifications 3rd party Git provider integrations  mdash  so will need re enable manually  3  Remove old project Once new project running DNS fully propagated delete old project  Manual migration process 0  Preparation Plan timeframe handle migration  will want avoid developing new code during period  as Git repository will change  prepared brief site outage when migrate  essentially relaunching site  just host previously  Plan accordingly  Set DNS Time to Live low possible  1  Create populate new project Create new Platform sh project desired region  initially create Development project change plan size immediately switching go ahead use desired size beginning  When system asks want use existing template provide own code  select provide own code  Git clone existing project  add Git remote new project  using Git URL shown management console  Push code least master branch new project   You transfer branches desired  That s optional   Alternatively  using 3rd party Git repository  GitHub  BitBucket  GitLab  etc    add integration new project just old one  will automatically mirror 3rd party repository exactly old project won t need update manually  Copy existing user files old project computer using rsync  exporting page details  use rsync copy directory new project  migrating page details  Export database old project import new project  Again  exporting migration pages  instructions specific database services  Re enter project environment variables you ve defined old project new project  Add users new project want continue access  3rd party integrations active  especially Health Notification checks  add new project  2  Maintain mirror sites generated data Solr  Elasticsearch  similar needs regenerated  whatever steps needed reindex systems  may simply allowing cron run while  system may command reindex everything faster  will vary application  periodically re sync data  rsync process quite fast long maintain local copy it  rsync will transfer content changed  database may longer depending size data  Depending site s size schedule  old new project overlapping hour two several weeks  That s you  sure verify new site working desired continuing  3  Launch new site Once new project right production plan size cut it  Add domain name s  new project  custom SSL certificate will need add time   Because projects separate regions it s safe add domain name time  reduces apparent downtime   possible  put site read only mode maintenance mode  one final data sync  code database  ensure new project starts fo data old one  Once domain set  update DNS provider s records point new site  Run platform environment info edge_hostname  p domain name point CNAME at  may time DNS change SSL change propagate  Until does  browsers may not new site may SSL mismatch error  cases will resolve itself 1 3 hours  4  Remove old project Once new project running DNS fully propagated delete old project",
        "objectID": "en/tutorials/region-migration",
        "weight": 5,
        "sidebarTitle": "Changing regions",
        "toc": true,
        "description": "Platform.sh is available in a number of different <b>Regions</b>.  Each region is a self-contained copy of Platform.sh in a single datacenter.  When you first create a project you can specify which region it should be in.<br><br>\n\nPlatform.sh does not offer an automated way to migrate a project from one region to another after it is created.  However, the process to do so manually is fairly straightforward and scriptable.\n"
    },
    {
        "title": "Platform.sh Third-Party Resources",
        "uri": "en/tutorials/third-party",
        "content": "Blogs  The future PHP PaaS here  journey Platform sh   Marcus Hausammann introduction Platform sh Chris Ward Guides Getting started   workflow Set Mac Platform sh using MAMP  owntheweb Platform sh simplify contribution workflow GitHub Micka l Andrieu Akeneo guide French deploying Platform sh Thomas Asnar  FR  Nacho Digital guide moving existing site Platform sh stuff need pro dev flow using platform sh deploy target again https   www thinktandem io Working Platform sh connect MySQL database using Sequel Pro set XDebug Official Symfony documentation deploying Platform sh Official Sylius documentation deploying Platform sh install Apache Tika Platform sh store complete logs AWS S3 Contextual Code Automated SSL Certificates Export Platform sh Contextual Code Platform sh region migration tool Contextual Code Drupal Modifying distribution files Platform sh Platform sh Drupal 8 Development Workflow  JohnatasJMO Syslogging not supported Platform sh  instead  Log using Monolog keep log files database  and or use whatever processors   handlers want  Magento Deploying Magento 2 Redis Platform sh  rafaelcgstz Sylius  Sylius documentation https   docs sylius com en latest cookbook deployment platform sh html  solid set instructions setting Sylius Platform sh  Examples Platform sh lists maintained examples its Github page  cross referencing http   docs platform sh  Examples listed below work fine  may out of date unmaintained  Use own risk  NodeJS Framework   Credit   Date added                                  MEAN stack  OriPekelman May 2017 Python Framework   Credit   Date added                                  Python Flask using gunicorn  etoulas May 2017 Odoo Open Source ERP CRM  OriPekelman May 2017 PHP Framework   Credit   Date added                                  Akeneo example  maciejzgadzaj May 2017 API Platform ReactJS client admin   GuGuss May 2017 Backdrop example  gmoigneu May 2017 Headless Drupal 8 Angular  GuGuss May 2017 Headless Drupal 8 React js  systemseed Aug 2018 Joomla example  gmoigneu May 2017 Laravel example  JGrubb May 2017 Moodle example  JGrubb May 2017 Mouf framework example The Coding Machine May 2017 Flow Framework support package Dominique Feyer Jul 2017 Neos CMS support package Dominique Feyer Jul 2017 Silex example  JGrubb May 2017 Silverstripe example  gmoigneu May 2017 Thunder example maintained MD Systems team May 2017 WooCommerce example  Liip May 2017 Grav example Mike Crittenden August 2017 Ruby Framework   Credit   Date added                                  Jekyll example  JGrubb May 2017 Rust Framework   Credit   Date added                                  Rust Rocket webasm Royall Spence July 2018 Integrations Integrate GitLab Platform sh using Gitlab CI   Axelerant Running Behat tests CircleCI Platform sh environment  Matt Glaman Platform sh s original  unsupported  scripts GitLab https   gist github com pjcdawkins 0b3f7a6da963c129030961f0947746c4  Platform sh supports Gitlab natively  adapter platform sh webhook slack incoming webhook hosted platform sh app https   github com hanoii platformsh2slack call NewRelic API deploy  by  christopher hopper  helper utility running browser based tests CircleCI against Platform sh environment  https   github com xendk dais Tools   development MySQL disk space monitor https   github com galister platformsh_mysqlmon Create deploy commands run composer  using Symfony small tool Hanoii https   github com hanoii drocal Script sync Drupal site Production Local https   github com pjcdawkins platformsh sync Matt Pope s Platform sh automated mysql files backup script Development environments Beetbox  pre provisioned L MP stack Drupal frameworks  Platform sh CLI integration Docker image Platform sh CLI https   github com maxc0d3r docker platformshcli tips using Platform sh DrupalVM https   github com geerlingguy drupal vm issues 984 Vagrant Ansiblefor Platform sh  opinionated towards Drupal   mglaman  Ansible Playbook setting Vagrant VirtualBox use Platform sh project PixelArt s Platform sh CLI role",
        "objectID": "en/tutorials/third-party",
        "weight": 4,
        "toc": true,
        "sidebarTitle": "Third-party resources",
        "description": "This is a Big List of known third party resources for Platform.sh. These resources are not vetted by Platform.sh, but may be useful for people working with the platform.\n"
    }
]